

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Fri Aug 03 12:08:13 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     7                           	psect	text0,global,reloc=2,class=CODE,delta=1
     8                           	psect	text1,global,reloc=2,class=CODE,delta=1
     9                           	psect	text2,global,reloc=2,class=CODE,delta=1
    10                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    11                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    12                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    13  0000                     
    14                           ; Version 1.45
    15                           ; Generated 16/11/2017 GMT
    16                           ; 
    17                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    18                           ; All rights reserved.
    19                           ; 
    20                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    21                           ; 
    22                           ; Redistribution and use in source and binary forms, with or without modification, are
    23                           ; permitted provided that the following conditions are met:
    24                           ; 
    25                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    26                           ;        conditions and the following disclaimer.
    27                           ; 
    28                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    29                           ;        of conditions and the following disclaimer in the documentation and/or other
    30                           ;        materials provided with the distribution.
    31                           ; 
    32                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    33                           ;        software without specific prior written permission.
    34                           ; 
    35                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    36                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    37                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    38                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    39                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    40                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    41                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    42                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    43                           ; 
    44                           ; 
    45                           ; Code-generator required, PIC18F4550 Definitions
    46                           ; 
    47                           ; SFR Addresses
    48  0000                     _LATDbits	set	3980
    49  0000                     _TRISDbits	set	3989
    50  0000                     _RCREG	set	4014
    51  0000                     _TXREG	set	4013
    52  0000                     _RCSTAbits	set	4011
    53  0000                     _TXSTAbits	set	4012
    54  0000                     _SPBRG	set	4015
    55  0000                     _TRISCbits	set	3988
    56                           
    57                           ; #config settings
    58  0000                     
    59                           	psect	cinit
    60  007E8A                     __pcinit:
    61                           	opt stack 0
    62  007E8A                     start_initialization:
    63                           	opt stack 0
    64  007E8A                     __initialization:
    65                           	opt stack 0
    66  007E8A                     end_of_initialization:
    67                           	opt stack 0
    68  007E8A                     __end_of__initialization:
    69                           	opt stack 0
    70  007E8A  0100               	movlb	0
    71  007E8C  EF48  F03F         	goto	_main	;jump to C main() function
    72                           
    73                           	psect	cstackCOMRAM
    74  000001                     __pcstackCOMRAM:
    75                           	opt stack 0
    76  000001                     ?___aldiv:
    77                           	opt stack 0
    78  000001                     ___aldiv@dividend:
    79                           	opt stack 0
    80                           
    81                           ; 4 bytes @ 0x0
    82  000001                     	ds	4
    83  000005                     ___aldiv@divisor:
    84                           	opt stack 0
    85                           
    86                           ; 4 bytes @ 0x4
    87  000005                     	ds	4
    88  000009                     ___aldiv@counter:
    89                           	opt stack 0
    90                           
    91                           ; 1 bytes @ 0x8
    92  000009                     	ds	1
    93  00000A                     ___aldiv@sign:
    94                           	opt stack 0
    95                           
    96                           ; 1 bytes @ 0x9
    97  00000A                     	ds	1
    98  00000B                     ___aldiv@quotient:
    99                           	opt stack 0
   100                           
   101                           ; 4 bytes @ 0xA
   102  00000B                     	ds	4
   103  00000F                     USART_Init@BAUD:
   104                           	opt stack 0
   105                           
   106                           ; 4 bytes @ 0xE
   107  00000F                     	ds	4
   108  000013                     _USART_Init$835:
   109                           	opt stack 0
   110                           
   111                           ; 4 bytes @ 0x12
   112  000013                     	ds	4
   113  000017                     main@valor:
   114                           	opt stack 0
   115                           
   116                           ; 1 bytes @ 0x16
   117  000017                     	ds	1
   118                           
   119 ;;
   120 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   121 ;;
   122 ;; *************** function _main *****************
   123 ;; Defined at:
   124 ;;		line 27 in file "Programa_principal.c"
   125 ;; Parameters:    Size  Location     Type
   126 ;;		None
   127 ;; Auto vars:     Size  Location     Type
   128 ;;  valor           1   22[COMRAM] unsigned char 
   129 ;; Return value:  Size  Location     Type
   130 ;;                  1    wreg      void 
   131 ;; Registers used:
   132 ;;		wreg, status,2, status,0, cstack
   133 ;; Tracked objects:
   134 ;;		On entry : 0/0
   135 ;;		On exit  : 0/0
   136 ;;		Unchanged: 0/0
   137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   138 ;;      Params:         0       0       0       0       0       0       0       0       0
   139 ;;      Locals:         1       0       0       0       0       0       0       0       0
   140 ;;      Temps:          0       0       0       0       0       0       0       0       0
   141 ;;      Totals:         1       0       0       0       0       0       0       0       0
   142 ;;Total ram usage:        1 bytes
   143 ;; Hardware stack levels required when called:    2
   144 ;; This function calls:
   145 ;;		_USART_Init
   146 ;;		_USART_Rx
   147 ;; This function is called by:
   148 ;;		Startup code after reset
   149 ;; This function uses a non-reentrant model
   150 ;;
   151                           
   152                           	psect	text0
   153  007E90                     __ptext0:
   154                           	opt stack 0
   155  007E90                     _main:
   156                           	opt stack 29
   157                           
   158                           ;Programa_principal.c: 28: USART_Init(9600);
   159                           
   160                           ;incstack = 0
   161  007E90  0E80               	movlw	128
   162  007E92  6E0F               	movwf	USART_Init@BAUD,c
   163  007E94  0E25               	movlw	37
   164  007E96  6E10               	movwf	USART_Init@BAUD+1,c
   165  007E98  0E00               	movlw	0
   166  007E9A  6E11               	movwf	USART_Init@BAUD+2,c
   167  007E9C  0E00               	movlw	0
   168  007E9E  6E12               	movwf	USART_Init@BAUD+3,c
   169  007EA0  EC62  F03F         	call	_USART_Init	;wreg free
   170                           
   171                           ;Programa_principal.c: 29: TRISDbits.RD7 = 0;
   172  007EA4  9E95               	bcf	3989,7,c	;volatile
   173  007EA6                     
   174                           ;Programa_principal.c: 31: char valor = USART_Rx();
   175  007EA6  EC43  F03F         	call	_USART_Rx	;wreg free
   176  007EAA  6E17               	movwf	main@valor,c
   177                           
   178                           ;Programa_principal.c: 32: if(valor == '1'){
   179  007EAC  0E31               	movlw	49
   180  007EAE  1817               	xorwf	main@valor,w,c
   181  007EB0  A4D8               	btfss	status,2,c
   182  007EB2  D002               	goto	l35
   183                           
   184                           ;Programa_principal.c: 33: LATDbits.LD7 = 1;
   185  007EB4  8E8C               	bsf	3980,7,c	;volatile
   186                           
   187                           ;Programa_principal.c: 34: }
   188  007EB6  D7F7               	goto	l34
   189  007EB8                     l35:
   190                           
   191                           ;Programa_principal.c: 35: else if(valor == '2'){
   192  007EB8  0E32               	movlw	50
   193  007EBA  1817               	xorwf	main@valor,w,c
   194  007EBC  A4D8               	btfss	status,2,c
   195  007EBE  D7F3               	goto	l34
   196                           
   197                           ;Programa_principal.c: 36: LATDbits.LD7 = 0;
   198  007EC0  9E8C               	bcf	3980,7,c	;volatile
   199  007EC2  D7F1               	goto	l34
   200  007EC4                     __end_of_main:
   201                           	opt stack 0
   202                           status	equ	0xFD8
   203                           
   204 ;; *************** function _USART_Rx *****************
   205 ;; Defined at:
   206 ;;		line 52 in file "USART_libreria.c"
   207 ;; Parameters:    Size  Location     Type
   208 ;;		None
   209 ;; Auto vars:     Size  Location     Type
   210 ;;		None
   211 ;; Return value:  Size  Location     Type
   212 ;;                  1    wreg      unsigned char 
   213 ;; Registers used:
   214 ;;		wreg, status,2
   215 ;; Tracked objects:
   216 ;;		On entry : 0/0
   217 ;;		On exit  : 0/0
   218 ;;		Unchanged: 0/0
   219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   220 ;;      Params:         0       0       0       0       0       0       0       0       0
   221 ;;      Locals:         0       0       0       0       0       0       0       0       0
   222 ;;      Temps:          0       0       0       0       0       0       0       0       0
   223 ;;      Totals:         0       0       0       0       0       0       0       0       0
   224 ;;Total ram usage:        0 bytes
   225 ;; Hardware stack levels used:    1
   226 ;; This function calls:
   227 ;;		Nothing
   228 ;; This function is called by:
   229 ;;		_main
   230 ;; This function uses a non-reentrant model
   231 ;;
   232                           
   233                           	psect	text1
   234  007E86                     __ptext1:
   235                           	opt stack 0
   236  007E86                     _USART_Rx:
   237                           	opt stack 30
   238                           
   239                           ;USART_libreria.c: 53: return RCREG;
   240                           
   241                           ;incstack = 0
   242  007E86  50AE               	movf	4014,w,c	;volatile
   243  007E88  0012               	return	
   244  007E8A                     __end_of_USART_Rx:
   245                           	opt stack 0
   246                           status	equ	0xFD8
   247                           
   248 ;; *************** function _USART_Init *****************
   249 ;; Defined at:
   250 ;;		line 26 in file "USART_libreria.c"
   251 ;; Parameters:    Size  Location     Type
   252 ;;  BAUD            4   14[COMRAM] long 
   253 ;; Auto vars:     Size  Location     Type
   254 ;;		None
   255 ;; Return value:  Size  Location     Type
   256 ;;                  1    wreg      void 
   257 ;; Registers used:
   258 ;;		wreg, status,2, status,0, cstack
   259 ;; Tracked objects:
   260 ;;		On entry : 0/0
   261 ;;		On exit  : 0/0
   262 ;;		Unchanged: 0/0
   263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   264 ;;      Params:         4       0       0       0       0       0       0       0       0
   265 ;;      Locals:         4       0       0       0       0       0       0       0       0
   266 ;;      Temps:          0       0       0       0       0       0       0       0       0
   267 ;;      Totals:         8       0       0       0       0       0       0       0       0
   268 ;;Total ram usage:        8 bytes
   269 ;; Hardware stack levels used:    1
   270 ;; Hardware stack levels required when called:    1
   271 ;; This function calls:
   272 ;;		___aldiv
   273 ;; This function is called by:
   274 ;;		_main
   275 ;; This function uses a non-reentrant model
   276 ;;
   277                           
   278                           	psect	text2
   279  007EC4                     __ptext2:
   280                           	opt stack 0
   281  007EC4                     _USART_Init:
   282                           	opt stack 29
   283                           
   284                           ;USART_libreria.c: 28: TRISCbits.RC6 = 0;
   285                           
   286                           ;incstack = 0
   287  007EC4  9C94               	bcf	3988,6,c	;volatile
   288                           
   289                           ;USART_libreria.c: 29: TRISCbits.RC7 = 1;
   290  007EC6  8E94               	bsf	3988,7,c	;volatile
   291                           
   292                           ;USART_libreria.c: 32: SPBRG = (unsigned char)(((20000000L/BAUD)/64)-1);
   293  007EC8  C00F  F005         	movff	USART_Init@BAUD,___aldiv@divisor
   294  007ECC  C010  F006         	movff	USART_Init@BAUD+1,___aldiv@divisor+1
   295  007ED0  C011  F007         	movff	USART_Init@BAUD+2,___aldiv@divisor+2
   296  007ED4  C012  F008         	movff	USART_Init@BAUD+3,___aldiv@divisor+3
   297  007ED8  0E00               	movlw	0
   298  007EDA  6E01               	movwf	___aldiv@dividend,c
   299  007EDC  0E2D               	movlw	45
   300  007EDE  6E02               	movwf	___aldiv@dividend+1,c
   301  007EE0  0E31               	movlw	49
   302  007EE2  6E03               	movwf	___aldiv@dividend+2,c
   303  007EE4  0E01               	movlw	1
   304  007EE6  6E04               	movwf	___aldiv@dividend+3,c
   305  007EE8  EC9A  F03F         	call	___aldiv	;wreg free
   306  007EEC  C001  F013         	movff	?___aldiv,_USART_Init$835
   307  007EF0  C002  F014         	movff	?___aldiv+1,_USART_Init$835+1
   308  007EF4  C003  F015         	movff	?___aldiv+2,_USART_Init$835+2
   309  007EF8  C004  F016         	movff	?___aldiv+3,_USART_Init$835+3
   310                           
   311                           ;USART_libreria.c: 32: SPBRG = (unsigned char)(((20000000L/BAUD)/64)-1);
   312  007EFC  C013  F001         	movff	_USART_Init$835,___aldiv@dividend
   313  007F00  C014  F002         	movff	_USART_Init$835+1,___aldiv@dividend+1
   314  007F04  C015  F003         	movff	_USART_Init$835+2,___aldiv@dividend+2
   315  007F08  C016  F004         	movff	_USART_Init$835+3,___aldiv@dividend+3
   316  007F0C  0E40               	movlw	64
   317  007F0E  6E05               	movwf	___aldiv@divisor,c
   318  007F10  0E00               	movlw	0
   319  007F12  6E06               	movwf	___aldiv@divisor+1,c
   320  007F14  0E00               	movlw	0
   321  007F16  6E07               	movwf	___aldiv@divisor+2,c
   322  007F18  0E00               	movlw	0
   323  007F1A  6E08               	movwf	___aldiv@divisor+3,c
   324  007F1C  EC9A  F03F         	call	___aldiv	;wreg free
   325  007F20  0401               	decf	?___aldiv,w,c
   326  007F22  6EAF               	movwf	4015,c	;volatile
   327                           
   328                           ;USART_libreria.c: 35: TXSTAbits.BRGH = 0;
   329  007F24  94AC               	bcf	4012,2,c	;volatile
   330                           
   331                           ;USART_libreria.c: 36: TXSTAbits.SYNC = 0;
   332  007F26  98AC               	bcf	4012,4,c	;volatile
   333                           
   334                           ;USART_libreria.c: 37: RCSTAbits.SPEN = 1;
   335  007F28  8EAB               	bsf	4011,7,c	;volatile
   336                           
   337                           ;USART_libreria.c: 40: TXSTAbits.TX9 = 0;
   338  007F2A  9CAC               	bcf	4012,6,c	;volatile
   339                           
   340                           ;USART_libreria.c: 41: TXSTAbits.TXEN = 1;
   341  007F2C  8AAC               	bsf	4012,5,c	;volatile
   342                           
   343                           ;USART_libreria.c: 44: RCSTAbits.RC9 = 0;
   344  007F2E  9CAB               	bcf	4011,6,c	;volatile
   345                           
   346                           ;USART_libreria.c: 45: RCSTAbits.CREN = 1;
   347  007F30  88AB               	bsf	4011,4,c	;volatile
   348  007F32  0012               	return		;funcret
   349  007F34                     __end_of_USART_Init:
   350                           	opt stack 0
   351                           status	equ	0xFD8
   352                           
   353 ;; *************** function ___aldiv *****************
   354 ;; Defined at:
   355 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\aldiv.c"
   356 ;; Parameters:    Size  Location     Type
   357 ;;  dividend        4    0[COMRAM] long 
   358 ;;  divisor         4    4[COMRAM] long 
   359 ;; Auto vars:     Size  Location     Type
   360 ;;  quotient        4   10[COMRAM] long 
   361 ;;  sign            1    9[COMRAM] unsigned char 
   362 ;;  counter         1    8[COMRAM] unsigned char 
   363 ;; Return value:  Size  Location     Type
   364 ;;                  4    0[COMRAM] long 
   365 ;; Registers used:
   366 ;;		wreg, status,2, status,0
   367 ;; Tracked objects:
   368 ;;		On entry : 0/0
   369 ;;		On exit  : 0/0
   370 ;;		Unchanged: 0/0
   371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   372 ;;      Params:         8       0       0       0       0       0       0       0       0
   373 ;;      Locals:         6       0       0       0       0       0       0       0       0
   374 ;;      Temps:          0       0       0       0       0       0       0       0       0
   375 ;;      Totals:        14       0       0       0       0       0       0       0       0
   376 ;;Total ram usage:       14 bytes
   377 ;; Hardware stack levels used:    1
   378 ;; This function calls:
   379 ;;		Nothing
   380 ;; This function is called by:
   381 ;;		_USART_Init
   382 ;; This function uses a non-reentrant model
   383 ;;
   384                           
   385                           	psect	text3
   386  007F34                     __ptext3:
   387                           	opt stack 0
   388  007F34                     ___aldiv:
   389                           	opt stack 29
   390                           
   391                           ;incstack = 0
   392  007F34  0E00               	movlw	0
   393  007F36  6E0A               	movwf	___aldiv@sign,c
   394  007F38  AE08               	btfss	___aldiv@divisor+3,7,c
   395  007F3A  D00A               	goto	l96
   396  007F3C  1E08               	comf	___aldiv@divisor+3,f,c
   397  007F3E  1E07               	comf	___aldiv@divisor+2,f,c
   398  007F40  1E06               	comf	___aldiv@divisor+1,f,c
   399  007F42  6C05               	negf	___aldiv@divisor,c
   400  007F44  0E00               	movlw	0
   401  007F46  2206               	addwfc	___aldiv@divisor+1,f,c
   402  007F48  2207               	addwfc	___aldiv@divisor+2,f,c
   403  007F4A  2208               	addwfc	___aldiv@divisor+3,f,c
   404  007F4C  0E01               	movlw	1
   405  007F4E  6E0A               	movwf	___aldiv@sign,c
   406  007F50                     l96:
   407  007F50  AE04               	btfss	___aldiv@dividend+3,7,c
   408  007F52  D00A               	goto	l97
   409  007F54  1E04               	comf	___aldiv@dividend+3,f,c
   410  007F56  1E03               	comf	___aldiv@dividend+2,f,c
   411  007F58  1E02               	comf	___aldiv@dividend+1,f,c
   412  007F5A  6C01               	negf	___aldiv@dividend,c
   413  007F5C  0E00               	movlw	0
   414  007F5E  2202               	addwfc	___aldiv@dividend+1,f,c
   415  007F60  2203               	addwfc	___aldiv@dividend+2,f,c
   416  007F62  2204               	addwfc	___aldiv@dividend+3,f,c
   417  007F64  0E01               	movlw	1
   418  007F66  1A0A               	xorwf	___aldiv@sign,f,c
   419  007F68                     l97:
   420  007F68  0E00               	movlw	0
   421  007F6A  6E0B               	movwf	___aldiv@quotient,c
   422  007F6C  0E00               	movlw	0
   423  007F6E  6E0C               	movwf	___aldiv@quotient+1,c
   424  007F70  0E00               	movlw	0
   425  007F72  6E0D               	movwf	___aldiv@quotient+2,c
   426  007F74  0E00               	movlw	0
   427  007F76  6E0E               	movwf	___aldiv@quotient+3,c
   428  007F78  5005               	movf	___aldiv@divisor,w,c
   429  007F7A  1006               	iorwf	___aldiv@divisor+1,w,c
   430  007F7C  1007               	iorwf	___aldiv@divisor+2,w,c
   431  007F7E  1008               	iorwf	___aldiv@divisor+3,w,c
   432  007F80  B4D8               	btfsc	status,2,c
   433  007F82  D02A               	goto	l104
   434  007F84  0E01               	movlw	1
   435  007F86  6E09               	movwf	___aldiv@counter,c
   436  007F88  D006               	goto	l99
   437  007F8A  90D8               	bcf	status,0,c
   438  007F8C  3605               	rlcf	___aldiv@divisor,f,c
   439  007F8E  3606               	rlcf	___aldiv@divisor+1,f,c
   440  007F90  3607               	rlcf	___aldiv@divisor+2,f,c
   441  007F92  3608               	rlcf	___aldiv@divisor+3,f,c
   442  007F94  2A09               	incf	___aldiv@counter,f,c
   443  007F96                     l99:
   444  007F96  AE08               	btfss	___aldiv@divisor+3,7,c
   445  007F98  D7F8               	goto	l100
   446  007F9A                     u120:
   447  007F9A  90D8               	bcf	status,0,c
   448  007F9C  360B               	rlcf	___aldiv@quotient,f,c
   449  007F9E  360C               	rlcf	___aldiv@quotient+1,f,c
   450  007FA0  360D               	rlcf	___aldiv@quotient+2,f,c
   451  007FA2  360E               	rlcf	___aldiv@quotient+3,f,c
   452  007FA4  5005               	movf	___aldiv@divisor,w,c
   453  007FA6  5C01               	subwf	___aldiv@dividend,w,c
   454  007FA8  5006               	movf	___aldiv@divisor+1,w,c
   455  007FAA  5802               	subwfb	___aldiv@dividend+1,w,c
   456  007FAC  5007               	movf	___aldiv@divisor+2,w,c
   457  007FAE  5803               	subwfb	___aldiv@dividend+2,w,c
   458  007FB0  5008               	movf	___aldiv@divisor+3,w,c
   459  007FB2  5804               	subwfb	___aldiv@dividend+3,w,c
   460  007FB4  A0D8               	btfss	status,0,c
   461  007FB6  D009               	goto	l103
   462  007FB8  5005               	movf	___aldiv@divisor,w,c
   463  007FBA  5E01               	subwf	___aldiv@dividend,f,c
   464  007FBC  5006               	movf	___aldiv@divisor+1,w,c
   465  007FBE  5A02               	subwfb	___aldiv@dividend+1,f,c
   466  007FC0  5007               	movf	___aldiv@divisor+2,w,c
   467  007FC2  5A03               	subwfb	___aldiv@dividend+2,f,c
   468  007FC4  5008               	movf	___aldiv@divisor+3,w,c
   469  007FC6  5A04               	subwfb	___aldiv@dividend+3,f,c
   470  007FC8  800B               	bsf	___aldiv@quotient,0,c
   471  007FCA                     l103:
   472  007FCA  90D8               	bcf	status,0,c
   473  007FCC  3208               	rrcf	___aldiv@divisor+3,f,c
   474  007FCE  3207               	rrcf	___aldiv@divisor+2,f,c
   475  007FD0  3206               	rrcf	___aldiv@divisor+1,f,c
   476  007FD2  3205               	rrcf	___aldiv@divisor,f,c
   477  007FD4  2E09               	decfsz	___aldiv@counter,f,c
   478  007FD6  D7E1               	goto	u120
   479  007FD8                     l104:
   480  007FD8  500A               	movf	___aldiv@sign,w,c
   481  007FDA  B4D8               	btfsc	status,2,c
   482  007FDC  D008               	goto	l105
   483  007FDE  1E0E               	comf	___aldiv@quotient+3,f,c
   484  007FE0  1E0D               	comf	___aldiv@quotient+2,f,c
   485  007FE2  1E0C               	comf	___aldiv@quotient+1,f,c
   486  007FE4  6C0B               	negf	___aldiv@quotient,c
   487  007FE6  0E00               	movlw	0
   488  007FE8  220C               	addwfc	___aldiv@quotient+1,f,c
   489  007FEA  220D               	addwfc	___aldiv@quotient+2,f,c
   490  007FEC  220E               	addwfc	___aldiv@quotient+3,f,c
   491  007FEE                     l105:
   492  007FEE  C00B  F001         	movff	___aldiv@quotient,?___aldiv
   493  007FF2  C00C  F002         	movff	___aldiv@quotient+1,?___aldiv+1
   494  007FF6  C00D  F003         	movff	___aldiv@quotient+2,?___aldiv+2
   495  007FFA  C00E  F004         	movff	___aldiv@quotient+3,?___aldiv+3
   496  007FFE  0012               	return	
   497  008000                     __end_of___aldiv:
   498                           	opt stack 0
   499  0000                     status	equ	0xFD8
   500                           status	equ	0xFD8
   501                           
   502                           	psect	rparam
   503  0000                     status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     23      23
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_USART_Init
    _USART_Init->___aldiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0     770
                                             22 COMRAM     1     1      0
                         _USART_Init
                           _USART_Rx
 ---------------------------------------------------------------------------------
 (1) _USART_Rx                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _USART_Init                                           8     4      4     725
                                             14 COMRAM     8     4      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     604
                                              0 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _USART_Init
     ___aldiv
   _USART_Rx

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F     17      17       1       24.2%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
ABS                  0      0       0      20        0.0%
BIGRAM             7FF      0       0      21        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Fri Aug 03 12:08:13 2018

                     l34 7EA6                       l35 7EB8                       l96 7F50  
                     l97 7F68                       l99 7F96              __CFG_BORV$3 000000  
           __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000  
           __CFG_CP3$OFF 000000                      l100 7F8A                      l103 7FCA  
                    l104 7FD8                      l105 7FEE             __CFG_CPB$OFF 000000  
                    u120 7F9A             __CFG_CPD$OFF 000000             __CFG_BOR$OFF 000000  
           __CFG_FOSC$HS 000000             __CFG_LVP$OFF 000000             __CFG_WDT$OFF 000000  
           __CFG_PWRT$ON 000000                     _main 7E90                     start 0000  
          __CFG_IESO$OFF 000000            __CFG_MCLRE$ON 000000             ___param_bank 000000  
          __CFG_PLLDIV$1 000000           __CFG_CCP2MX$ON 000000          __end_of___aldiv 8000  
                  ?_main 0001                    _RCREG 000FAE                    _SPBRG 000FAF  
          __CFG_USBDIV$1 000000                    _TXREG 000FAD            __CFG_WRT0$OFF 000000  
          __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000  
         __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000  
         __CFG_EBTR2$OFF 000000           __CFG_EBTR3$OFF 000000            __CFG_WRTB$OFF 000000  
          __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000           __CFG_EBTRB$OFF 000000  
       __end_of_USART_Rx 7E8A                    status 000FD8           __CFG_ICPRT$OFF 000000  
         __CFG_PBADEN$ON 000000              ?_USART_Init 000F          __initialization 7E8A  
           __end_of_main 7EC4                   ??_main 0017            __activetblptr 000000  
         __CFG_XINST$OFF 000000                ??___aldiv 0009           __CFG_STVREN$ON 000000  
    __size_of_USART_Init 0070               __accesstop 0060  __end_of__initialization 7E8A  
          ___rparam_used 000001           __pcstackCOMRAM 0001                ?_USART_Rx 0001  
             ??_USART_Rx 0001          __CFG_VREGEN$OFF 000000             ??_USART_Init 0013  
                __Hparam 0000                  __Lparam 0000                  ___aldiv 7F34  
         USART_Init@BAUD 000F                  __pcinit 7E8A                  __ramtop 0800  
                __ptext0 7E90                  __ptext1 7E86                  __ptext2 7EC4  
                __ptext3 7F34         ___aldiv@dividend 0001       __end_of_USART_Init 7F34  
   end_of_initialization 7E8A                _RCSTAbits 000FAB         ___aldiv@quotient 000B  
              _TRISCbits 000F94                _TRISDbits 000F95                _TXSTAbits 000FAC  
      __size_of_USART_Rx 0004      start_initialization 7E8A         __CFG_LPT1OSC$OFF 000000  
               ?___aldiv 0001          ___aldiv@divisor 0005          ___aldiv@counter 0009  
               _LATDbits 000F8C         __CFG_WDTPS$32768 000000                 _USART_Rx 7E86  
              main@valor 0017                 __Hrparam 0000                 __Lrparam 0000  
       __size_of___aldiv 00CC            __size_of_main 0034    __CFG_CPUDIV$OSC1_PLL2 000000  
         _USART_Init$835 0013             ___aldiv@sign 000A               _USART_Init 7EC4  
