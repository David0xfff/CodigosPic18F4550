

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Tue Aug 14 22:25:19 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    15                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    16  0000                     
    17                           ; Version 1.45
    18                           ; Generated 16/11/2017 GMT
    19                           ; 
    20                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    21                           ; All rights reserved.
    22                           ; 
    23                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    24                           ; 
    25                           ; Redistribution and use in source and binary forms, with or without modification, are
    26                           ; permitted provided that the following conditions are met:
    27                           ; 
    28                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    29                           ;        conditions and the following disclaimer.
    30                           ; 
    31                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    32                           ;        of conditions and the following disclaimer in the documentation and/or other
    33                           ;        materials provided with the distribution.
    34                           ; 
    35                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    36                           ;        software without specific prior written permission.
    37                           ; 
    38                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    39                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    40                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    41                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    42                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    43                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    44                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    45                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    46                           ; 
    47                           ; 
    48                           ; Code-generator required, PIC18F4550 Definitions
    49                           ; 
    50                           ; SFR Addresses
    51  0000                     
    52                           	psect	idataCOMRAM
    53  007DD1                     __pidataCOMRAM:
    54                           	opt stack 0
    55                           
    56                           ;initializer for _datos
    57  007DD1  41                 	db	65
    58  007DD2  50                 	db	80
    59  007DD3  41                 	db	65
    60  007DD4  47                 	db	71
    61  007DD5  41                 	db	65
    62  007DD6  44                 	db	68
    63  007DD7  4F                 	db	79
    64  0000                     _LATDbits	set	3980
    65  0000                     _TRISDbits	set	3989
    66  0000                     _RCREG	set	4014
    67  0000                     _TXREG	set	4013
    68  0000                     _RCSTAbits	set	4011
    69  0000                     _TXSTAbits	set	4012
    70  0000                     _SPBRG	set	4015
    71  0000                     _TRISCbits	set	3988
    72                           
    73                           ; #config settings
    74  0000                     
    75                           	psect	cinit
    76  007DE0                     __pcinit:
    77                           	opt stack 0
    78  007DE0                     start_initialization:
    79                           	opt stack 0
    80  007DE0                     __initialization:
    81                           	opt stack 0
    82                           
    83                           ; Initialize objects allocated to COMRAM (7 bytes)
    84                           ; load TBLPTR registers with __pidataCOMRAM
    85  007DE0  0ED1               	movlw	low __pidataCOMRAM
    86  007DE2  6EF6               	movwf	tblptrl,c
    87  007DE4  0E7D               	movlw	high __pidataCOMRAM
    88  007DE6  6EF7               	movwf	tblptrh,c
    89  007DE8  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
    90  007DEA  6EF8               	movwf	tblptru,c
    91  007DEC  EE00  F01D         	lfsr	0,__pdataCOMRAM
    92  007DF0  EE10 F007          	lfsr	1,7
    93  007DF4                     copy_data0:
    94  007DF4  0009               	tblrd		*+
    95  007DF6  CFF5 FFEE          	movff	tablat,postinc0
    96  007DFA  50E5               	movf	postdec1,w,c
    97  007DFC  50E1               	movf	fsr1l,w,c
    98  007DFE  E1FA               	bnz	copy_data0
    99  007E00                     end_of_initialization:
   100                           	opt stack 0
   101  007E00                     __end_of__initialization:
   102                           	opt stack 0
   103  007E00  0100               	movlb	0
   104  007E02  EF3B  F03F         	goto	_main	;jump to C main() function
   105                           tblptru	equ	0xFF8
   106                           tblptrh	equ	0xFF7
   107                           tblptrl	equ	0xFF6
   108                           tablat	equ	0xFF5
   109                           postinc0	equ	0xFEE
   110                           postdec1	equ	0xFE5
   111                           fsr1l	equ	0xFE1
   112                           
   113                           	psect	dataCOMRAM
   114  00001D                     __pdataCOMRAM:
   115                           	opt stack 0
   116  00001D                     _datos:
   117                           	opt stack 0
   118  00001D                     	ds	7
   119                           tblptru	equ	0xFF8
   120                           tblptrh	equ	0xFF7
   121                           tblptrl	equ	0xFF6
   122                           tablat	equ	0xFF5
   123                           postinc0	equ	0xFEE
   124                           postdec1	equ	0xFE5
   125                           fsr1l	equ	0xFE1
   126                           
   127                           	psect	cstackCOMRAM
   128  000001                     __pcstackCOMRAM:
   129                           	opt stack 0
   130  000001                     ?___aldiv:
   131                           	opt stack 0
   132  000001                     USART_Tx@data:
   133                           	opt stack 0
   134  000001                     ___aldiv@dividend:
   135                           	opt stack 0
   136                           
   137                           ; 4 bytes @ 0x0
   138  000001                     	ds	4
   139  000005                     ___aldiv@divisor:
   140                           	opt stack 0
   141                           
   142                           ; 4 bytes @ 0x4
   143  000005                     	ds	4
   144  000009                     ___aldiv@counter:
   145                           	opt stack 0
   146                           
   147                           ; 1 bytes @ 0x8
   148  000009                     	ds	1
   149  00000A                     ___aldiv@sign:
   150                           	opt stack 0
   151                           
   152                           ; 1 bytes @ 0x9
   153  00000A                     	ds	1
   154  00000B                     ___aldiv@quotient:
   155                           	opt stack 0
   156                           
   157                           ; 4 bytes @ 0xA
   158  00000B                     	ds	4
   159  00000F                     USART_Init@BAUD:
   160                           	opt stack 0
   161                           
   162                           ; 4 bytes @ 0xE
   163  00000F                     	ds	4
   164  000013                     _USART_Init$845:
   165                           	opt stack 0
   166                           
   167                           ; 4 bytes @ 0x12
   168  000013                     	ds	4
   169  000017                     ??_main:
   170                           
   171                           ; 1 bytes @ 0x16
   172  000017                     	ds	2
   173  000019                     main@data:
   174                           	opt stack 0
   175                           
   176                           ; 1 bytes @ 0x18
   177  000019                     	ds	1
   178  00001A                     main@i:
   179                           	opt stack 0
   180                           
   181                           ; 2 bytes @ 0x19
   182  00001A                     	ds	2
   183  00001C                     main@dato:
   184                           	opt stack 0
   185                           
   186                           ; 1 bytes @ 0x1B
   187  00001C                     	ds	1
   188                           tblptru	equ	0xFF8
   189                           tblptrh	equ	0xFF7
   190                           tblptrl	equ	0xFF6
   191                           tablat	equ	0xFF5
   192                           postinc0	equ	0xFEE
   193                           postdec1	equ	0xFE5
   194                           fsr1l	equ	0xFE1
   195                           
   196 ;;
   197 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   198 ;;
   199 ;; *************** function _main *****************
   200 ;; Defined at:
   201 ;;		line 29 in file "Programa_principal.c"
   202 ;; Parameters:    Size  Location     Type
   203 ;;		None
   204 ;; Auto vars:     Size  Location     Type
   205 ;;  i               2   25[COMRAM] int 
   206 ;;  dato            1   27[COMRAM] unsigned char 
   207 ;;  data            1   24[COMRAM] unsigned char 
   208 ;; Return value:  Size  Location     Type
   209 ;;                  1    wreg      void 
   210 ;; Registers used:
   211 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   212 ;; Tracked objects:
   213 ;;		On entry : 0/0
   214 ;;		On exit  : 0/0
   215 ;;		Unchanged: 0/0
   216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   217 ;;      Params:         0       0       0       0       0       0       0       0       0
   218 ;;      Locals:         4       0       0       0       0       0       0       0       0
   219 ;;      Temps:          2       0       0       0       0       0       0       0       0
   220 ;;      Totals:         6       0       0       0       0       0       0       0       0
   221 ;;Total ram usage:        6 bytes
   222 ;; Hardware stack levels required when called:    2
   223 ;; This function calls:
   224 ;;		_USART_Init
   225 ;;		_USART_Rx
   226 ;;		_USART_Tx
   227 ;; This function is called by:
   228 ;;		Startup code after reset
   229 ;; This function uses a non-reentrant model
   230 ;;
   231                           
   232                           	psect	text0
   233  007E76                     __ptext0:
   234                           	opt stack 0
   235  007E76                     _main:
   236                           	opt stack 29
   237                           
   238                           ;Programa_principal.c: 30: USART_Init(9600);
   239                           
   240                           ;incstack = 0
   241  007E76  0E80               	movlw	128
   242  007E78  6E0F               	movwf	USART_Init@BAUD,c
   243  007E7A  0E25               	movlw	37
   244  007E7C  6E10               	movwf	USART_Init@BAUD+1,c
   245  007E7E  0E00               	movlw	0
   246  007E80  6E11               	movwf	USART_Init@BAUD+2,c
   247  007E82  0E00               	movlw	0
   248  007E84  6E12               	movwf	USART_Init@BAUD+3,c
   249  007E86  EC03  F03F         	call	_USART_Init	;wreg free
   250                           
   251                           ;Programa_principal.c: 31: TRISDbits.RD0 = 0;
   252  007E8A  9095               	bcf	3989,0,c	;volatile
   253                           
   254                           ;Programa_principal.c: 32: TRISDbits.RD1 = 0;
   255  007E8C  9295               	bcf	3989,1,c	;volatile
   256                           
   257                           ;Programa_principal.c: 33: TRISDbits.RD2 = 0;
   258  007E8E  9495               	bcf	3989,2,c	;volatile
   259                           
   260                           ;Programa_principal.c: 34: TRISDbits.RD3 = 0;
   261  007E90  9695               	bcf	3989,3,c	;volatile
   262                           
   263                           ;Programa_principal.c: 35: TRISDbits.RD7 = 0;
   264  007E92  9E95               	bcf	3989,7,c	;volatile
   265  007E94                     
   266                           ;Programa_principal.c: 37: char data = USART_Rx();
   267  007E94  ECE6  F03E         	call	_USART_Rx	;wreg free
   268  007E98  6E19               	movwf	main@data,c
   269                           
   270                           ;Programa_principal.c: 38: if(data == '1'){
   271  007E9A  0E31               	movlw	49
   272  007E9C  1819               	xorwf	main@data,w,c
   273  007E9E  A4D8               	btfss	status,2,c
   274  007EA0  D047               	goto	l41
   275                           
   276                           ;Programa_principal.c: 39: LATDbits.LD7 = 1;
   277  007EA2  8E8C               	bsf	3980,7,c	;volatile
   278  007EA4                     
   279                           ;Programa_principal.c: 41: char dato = USART_Rx();
   280  007EA4  ECE6  F03E         	call	_USART_Rx	;wreg free
   281  007EA8  6E1C               	movwf	main@dato,c
   282                           
   283                           ;Programa_principal.c: 42: if(dato == 'w'){
   284  007EAA  0E77               	movlw	119
   285  007EAC  181C               	xorwf	main@dato,w,c
   286  007EAE  A4D8               	btfss	status,2,c
   287  007EB0  D004               	goto	l43
   288                           
   289                           ;Programa_principal.c: 43: LATDbits.LD0 = 1;
   290  007EB2  808C               	bsf	3980,0,c	;volatile
   291                           
   292                           ;Programa_principal.c: 44: LATDbits.LD1 = 0;
   293  007EB4  928C               	bcf	3980,1,c	;volatile
   294                           
   295                           ;Programa_principal.c: 45: LATDbits.LD2 = 0;
   296  007EB6  948C               	bcf	3980,2,c	;volatile
   297  007EB8  D006               	goto	L1
   298  007EBA                     l43:
   299                           
   300                           ;Programa_principal.c: 48: else if(dato == 'e'){
   301  007EBA  0E65               	movlw	101
   302  007EBC  181C               	xorwf	main@dato,w,c
   303  007EBE  A4D8               	btfss	status,2,c
   304  007EC0  D004               	goto	l45
   305                           
   306                           ;Programa_principal.c: 49: LATDbits.LD0 = 0;
   307  007EC2  908C               	bcf	3980,0,c	;volatile
   308  007EC4  D007               	goto	L2
   309  007EC6                     L1:
   310                           
   311                           ;Programa_principal.c: 52: LATDbits.LD3 = 0;
   312  007EC6  968C               	bcf	3980,3,c	;volatile
   313                           
   314                           ;Programa_principal.c: 53: }
   315  007EC8  D7ED               	goto	l42
   316  007ECA                     l45:
   317                           
   318                           ;Programa_principal.c: 54: else if(dato == 'l'){
   319  007ECA  0E6C               	movlw	108
   320  007ECC  181C               	xorwf	main@dato,w,c
   321  007ECE  A4D8               	btfss	status,2,c
   322  007ED0  D004               	goto	l47
   323                           
   324                           ;Programa_principal.c: 55: LATDbits.LD0 = 1;
   325  007ED2  808C               	bsf	3980,0,c	;volatile
   326  007ED4                     L2:
   327                           
   328                           ;Programa_principal.c: 56: LATDbits.LD1 = 0;
   329  007ED4  928C               	bcf	3980,1,c	;volatile
   330                           
   331                           ;Programa_principal.c: 57: LATDbits.LD2 = 1;
   332  007ED6  848C               	bsf	3980,2,c	;volatile
   333  007ED8  D7F6               	goto	L1
   334  007EDA                     l47:
   335                           
   336                           ;Programa_principal.c: 60: else if(dato == 's'){
   337  007EDA  0E73               	movlw	115
   338  007EDC  181C               	xorwf	main@dato,w,c
   339  007EDE  A4D8               	btfss	status,2,c
   340  007EE0  D7E1               	goto	l42
   341                           
   342                           ;Programa_principal.c: 61: LATDbits.LD0 = 0;
   343  007EE2  908C               	bcf	3980,0,c	;volatile
   344                           
   345                           ;Programa_principal.c: 62: LATDbits.LD1 = 0;
   346  007EE4  928C               	bcf	3980,1,c	;volatile
   347                           
   348                           ;Programa_principal.c: 63: LATDbits.LD2 = 0;
   349  007EE6  948C               	bcf	3980,2,c	;volatile
   350                           
   351                           ;Programa_principal.c: 64: LATDbits.LD3 = 0;
   352  007EE8  968C               	bcf	3980,3,c	;volatile
   353                           
   354                           ;Programa_principal.c: 65: for(int i=0;i<8;i++){
   355  007EEA  0E00               	movlw	0
   356  007EEC  6E1B               	movwf	main@i+1,c
   357  007EEE  0E00               	movlw	0
   358  007EF0  6E1A               	movwf	main@i,c
   359  007EF2  D016               	goto	l907
   360  007EF4                     
   361                           ;Programa_principal.c: 66: USART_Tx(datos[i]);
   362  007EF4  0E1D               	movlw	low _datos
   363  007EF6  241A               	addwf	main@i,w,c
   364  007EF8  6ED9               	movwf	fsr2l,c
   365  007EFA  0E00               	movlw	high _datos
   366  007EFC  201B               	addwfc	main@i+1,w,c
   367  007EFE  6EDA               	movwf	fsr2h,c
   368  007F00  50DF               	movf	indf2,w,c
   369  007F02  ECEC  F03E         	call	_USART_Tx
   370                           
   371                           ;Programa_principal.c: 67: _delay((unsigned long)((100)*(20000000L/4000.0)));
   372  007F06  0E03               	movlw	3
   373  007F08  6E18               	movwf	(??_main+1)& (0+255),c
   374  007F0A  0E8A               	movlw	138
   375  007F0C  6E17               	movwf	??_main& (0+255),c
   376  007F0E  0E56               	movlw	86
   377  007F10                     u277:
   378  007F10  2EE8               	decfsz	wreg,f,c
   379  007F12  D7FE               	bra	u277
   380  007F14  2E17               	decfsz	??_main& (0+255),f,c
   381  007F16  D7FC               	bra	u277
   382  007F18  2E18               	decfsz	(??_main+1)& (0+255),f,c
   383  007F1A  D7FA               	bra	u277
   384  007F1C  4A1A               	infsnz	main@i,f,c
   385  007F1E  2A1B               	incf	main@i+1,f,c
   386  007F20                     l907:
   387  007F20  BE1B               	btfsc	main@i+1,7,c
   388  007F22  D7E8               	goto	l50
   389  007F24  501B               	movf	main@i+1,w,c
   390  007F26  E104               	bnz	l41
   391  007F28  0E08               	movlw	8
   392  007F2A  5C1A               	subwf	main@i,w,c
   393  007F2C  A0D8               	btfss	status,0,c
   394  007F2E  D7E2               	goto	l50
   395  007F30                     l41:
   396                           
   397                           ;Programa_principal.c: 74: else{
   398                           ;Programa_principal.c: 75: LATDbits.LD7 = 0;
   399  007F30  9E8C               	bcf	3980,7,c	;volatile
   400  007F32  D7B0               	goto	l40
   401  007F34                     __end_of_main:
   402                           	opt stack 0
   403                           tblptru	equ	0xFF8
   404                           tblptrh	equ	0xFF7
   405                           tblptrl	equ	0xFF6
   406                           tablat	equ	0xFF5
   407                           postinc0	equ	0xFEE
   408                           wreg	equ	0xFE8
   409                           postdec1	equ	0xFE5
   410                           fsr1l	equ	0xFE1
   411                           indf2	equ	0xFDF
   412                           fsr2h	equ	0xFDA
   413                           fsr2l	equ	0xFD9
   414                           status	equ	0xFD8
   415                           
   416 ;; *************** function _USART_Tx *****************
   417 ;; Defined at:
   418 ;;		line 48 in file "USART_libreria.c"
   419 ;; Parameters:    Size  Location     Type
   420 ;;  data            1    wreg     unsigned char 
   421 ;; Auto vars:     Size  Location     Type
   422 ;;  data            1    0[COMRAM] unsigned char 
   423 ;; Return value:  Size  Location     Type
   424 ;;                  1    wreg      void 
   425 ;; Registers used:
   426 ;;		wreg
   427 ;; Tracked objects:
   428 ;;		On entry : 0/0
   429 ;;		On exit  : 0/0
   430 ;;		Unchanged: 0/0
   431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   432 ;;      Params:         0       0       0       0       0       0       0       0       0
   433 ;;      Locals:         1       0       0       0       0       0       0       0       0
   434 ;;      Temps:          0       0       0       0       0       0       0       0       0
   435 ;;      Totals:         1       0       0       0       0       0       0       0       0
   436 ;;Total ram usage:        1 bytes
   437 ;; Hardware stack levels used:    1
   438 ;; This function calls:
   439 ;;		Nothing
   440 ;; This function is called by:
   441 ;;		_main
   442 ;; This function uses a non-reentrant model
   443 ;;
   444                           
   445                           	psect	text1
   446  007DD8                     __ptext1:
   447                           	opt stack 0
   448  007DD8                     _USART_Tx:
   449                           	opt stack 30
   450                           
   451                           ;incstack = 0
   452                           ;USART_Tx@data stored from wreg
   453  007DD8  6E01               	movwf	USART_Tx@data,c
   454                           
   455                           ;USART_libreria.c: 49: TXREG = data;
   456  007DDA  C001  FFAD         	movff	USART_Tx@data,4013	;volatile
   457  007DDE  0012               	return		;funcret
   458  007DE0                     __end_of_USART_Tx:
   459                           	opt stack 0
   460                           tblptru	equ	0xFF8
   461                           tblptrh	equ	0xFF7
   462                           tblptrl	equ	0xFF6
   463                           tablat	equ	0xFF5
   464                           postinc0	equ	0xFEE
   465                           wreg	equ	0xFE8
   466                           postdec1	equ	0xFE5
   467                           fsr1l	equ	0xFE1
   468                           indf2	equ	0xFDF
   469                           fsr2h	equ	0xFDA
   470                           fsr2l	equ	0xFD9
   471                           status	equ	0xFD8
   472                           
   473 ;; *************** function _USART_Rx *****************
   474 ;; Defined at:
   475 ;;		line 52 in file "USART_libreria.c"
   476 ;; Parameters:    Size  Location     Type
   477 ;;		None
   478 ;; Auto vars:     Size  Location     Type
   479 ;;		None
   480 ;; Return value:  Size  Location     Type
   481 ;;                  1    wreg      unsigned char 
   482 ;; Registers used:
   483 ;;		wreg, status,2
   484 ;; Tracked objects:
   485 ;;		On entry : 0/0
   486 ;;		On exit  : 0/0
   487 ;;		Unchanged: 0/0
   488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   489 ;;      Params:         0       0       0       0       0       0       0       0       0
   490 ;;      Locals:         0       0       0       0       0       0       0       0       0
   491 ;;      Temps:          0       0       0       0       0       0       0       0       0
   492 ;;      Totals:         0       0       0       0       0       0       0       0       0
   493 ;;Total ram usage:        0 bytes
   494 ;; Hardware stack levels used:    1
   495 ;; This function calls:
   496 ;;		Nothing
   497 ;; This function is called by:
   498 ;;		_main
   499 ;; This function uses a non-reentrant model
   500 ;;
   501                           
   502                           	psect	text2
   503  007DCC                     __ptext2:
   504                           	opt stack 0
   505  007DCC                     _USART_Rx:
   506                           	opt stack 30
   507                           
   508                           ;USART_libreria.c: 53: return RCREG;
   509                           
   510                           ;incstack = 0
   511  007DCC  50AE               	movf	4014,w,c	;volatile
   512  007DCE  0012               	return	
   513  007DD0                     __end_of_USART_Rx:
   514                           	opt stack 0
   515                           tblptru	equ	0xFF8
   516                           tblptrh	equ	0xFF7
   517                           tblptrl	equ	0xFF6
   518                           tablat	equ	0xFF5
   519                           postinc0	equ	0xFEE
   520                           wreg	equ	0xFE8
   521                           postdec1	equ	0xFE5
   522                           fsr1l	equ	0xFE1
   523                           indf2	equ	0xFDF
   524                           fsr2h	equ	0xFDA
   525                           fsr2l	equ	0xFD9
   526                           status	equ	0xFD8
   527                           
   528 ;; *************** function _USART_Init *****************
   529 ;; Defined at:
   530 ;;		line 26 in file "USART_libreria.c"
   531 ;; Parameters:    Size  Location     Type
   532 ;;  BAUD            4   14[COMRAM] long 
   533 ;; Auto vars:     Size  Location     Type
   534 ;;		None
   535 ;; Return value:  Size  Location     Type
   536 ;;                  1    wreg      void 
   537 ;; Registers used:
   538 ;;		wreg, status,2, status,0, cstack
   539 ;; Tracked objects:
   540 ;;		On entry : 0/0
   541 ;;		On exit  : 0/0
   542 ;;		Unchanged: 0/0
   543 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   544 ;;      Params:         4       0       0       0       0       0       0       0       0
   545 ;;      Locals:         4       0       0       0       0       0       0       0       0
   546 ;;      Temps:          0       0       0       0       0       0       0       0       0
   547 ;;      Totals:         8       0       0       0       0       0       0       0       0
   548 ;;Total ram usage:        8 bytes
   549 ;; Hardware stack levels used:    1
   550 ;; Hardware stack levels required when called:    1
   551 ;; This function calls:
   552 ;;		___aldiv
   553 ;; This function is called by:
   554 ;;		_main
   555 ;; This function uses a non-reentrant model
   556 ;;
   557                           
   558                           	psect	text3
   559  007E06                     __ptext3:
   560                           	opt stack 0
   561  007E06                     _USART_Init:
   562                           	opt stack 29
   563                           
   564                           ;USART_libreria.c: 28: TRISCbits.RC6 = 0;
   565                           
   566                           ;incstack = 0
   567  007E06  9C94               	bcf	3988,6,c	;volatile
   568                           
   569                           ;USART_libreria.c: 29: TRISCbits.RC7 = 1;
   570  007E08  8E94               	bsf	3988,7,c	;volatile
   571                           
   572                           ;USART_libreria.c: 32: SPBRG = (unsigned char)(((20000000L/BAUD)/64)-1);
   573  007E0A  C00F  F005         	movff	USART_Init@BAUD,___aldiv@divisor
   574  007E0E  C010  F006         	movff	USART_Init@BAUD+1,___aldiv@divisor+1
   575  007E12  C011  F007         	movff	USART_Init@BAUD+2,___aldiv@divisor+2
   576  007E16  C012  F008         	movff	USART_Init@BAUD+3,___aldiv@divisor+3
   577  007E1A  0E00               	movlw	0
   578  007E1C  6E01               	movwf	___aldiv@dividend,c
   579  007E1E  0E2D               	movlw	45
   580  007E20  6E02               	movwf	___aldiv@dividend+1,c
   581  007E22  0E31               	movlw	49
   582  007E24  6E03               	movwf	___aldiv@dividend+2,c
   583  007E26  0E01               	movlw	1
   584  007E28  6E04               	movwf	___aldiv@dividend+3,c
   585  007E2A  EC9A  F03F         	call	___aldiv	;wreg free
   586  007E2E  C001  F013         	movff	?___aldiv,_USART_Init$845
   587  007E32  C002  F014         	movff	?___aldiv+1,_USART_Init$845+1
   588  007E36  C003  F015         	movff	?___aldiv+2,_USART_Init$845+2
   589  007E3A  C004  F016         	movff	?___aldiv+3,_USART_Init$845+3
   590                           
   591                           ;USART_libreria.c: 32: SPBRG = (unsigned char)(((20000000L/BAUD)/64)-1);
   592  007E3E  C013  F001         	movff	_USART_Init$845,___aldiv@dividend
   593  007E42  C014  F002         	movff	_USART_Init$845+1,___aldiv@dividend+1
   594  007E46  C015  F003         	movff	_USART_Init$845+2,___aldiv@dividend+2
   595  007E4A  C016  F004         	movff	_USART_Init$845+3,___aldiv@dividend+3
   596  007E4E  0E40               	movlw	64
   597  007E50  6E05               	movwf	___aldiv@divisor,c
   598  007E52  0E00               	movlw	0
   599  007E54  6E06               	movwf	___aldiv@divisor+1,c
   600  007E56  0E00               	movlw	0
   601  007E58  6E07               	movwf	___aldiv@divisor+2,c
   602  007E5A  0E00               	movlw	0
   603  007E5C  6E08               	movwf	___aldiv@divisor+3,c
   604  007E5E  EC9A  F03F         	call	___aldiv	;wreg free
   605  007E62  0401               	decf	?___aldiv,w,c
   606  007E64  6EAF               	movwf	4015,c	;volatile
   607                           
   608                           ;USART_libreria.c: 35: TXSTAbits.BRGH = 0;
   609  007E66  94AC               	bcf	4012,2,c	;volatile
   610                           
   611                           ;USART_libreria.c: 36: TXSTAbits.SYNC = 0;
   612  007E68  98AC               	bcf	4012,4,c	;volatile
   613                           
   614                           ;USART_libreria.c: 37: RCSTAbits.SPEN = 1;
   615  007E6A  8EAB               	bsf	4011,7,c	;volatile
   616                           
   617                           ;USART_libreria.c: 40: TXSTAbits.TX9 = 0;
   618  007E6C  9CAC               	bcf	4012,6,c	;volatile
   619                           
   620                           ;USART_libreria.c: 41: TXSTAbits.TXEN = 1;
   621  007E6E  8AAC               	bsf	4012,5,c	;volatile
   622                           
   623                           ;USART_libreria.c: 44: RCSTAbits.RC9 = 0;
   624  007E70  9CAB               	bcf	4011,6,c	;volatile
   625                           
   626                           ;USART_libreria.c: 45: RCSTAbits.CREN = 1;
   627  007E72  88AB               	bsf	4011,4,c	;volatile
   628  007E74  0012               	return		;funcret
   629  007E76                     __end_of_USART_Init:
   630                           	opt stack 0
   631                           tblptru	equ	0xFF8
   632                           tblptrh	equ	0xFF7
   633                           tblptrl	equ	0xFF6
   634                           tablat	equ	0xFF5
   635                           postinc0	equ	0xFEE
   636                           wreg	equ	0xFE8
   637                           postdec1	equ	0xFE5
   638                           fsr1l	equ	0xFE1
   639                           indf2	equ	0xFDF
   640                           fsr2h	equ	0xFDA
   641                           fsr2l	equ	0xFD9
   642                           status	equ	0xFD8
   643                           
   644 ;; *************** function ___aldiv *****************
   645 ;; Defined at:
   646 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\aldiv.c"
   647 ;; Parameters:    Size  Location     Type
   648 ;;  dividend        4    0[COMRAM] long 
   649 ;;  divisor         4    4[COMRAM] long 
   650 ;; Auto vars:     Size  Location     Type
   651 ;;  quotient        4   10[COMRAM] long 
   652 ;;  sign            1    9[COMRAM] unsigned char 
   653 ;;  counter         1    8[COMRAM] unsigned char 
   654 ;; Return value:  Size  Location     Type
   655 ;;                  4    0[COMRAM] long 
   656 ;; Registers used:
   657 ;;		wreg, status,2, status,0
   658 ;; Tracked objects:
   659 ;;		On entry : 0/0
   660 ;;		On exit  : 0/0
   661 ;;		Unchanged: 0/0
   662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   663 ;;      Params:         8       0       0       0       0       0       0       0       0
   664 ;;      Locals:         6       0       0       0       0       0       0       0       0
   665 ;;      Temps:          0       0       0       0       0       0       0       0       0
   666 ;;      Totals:        14       0       0       0       0       0       0       0       0
   667 ;;Total ram usage:       14 bytes
   668 ;; Hardware stack levels used:    1
   669 ;; This function calls:
   670 ;;		Nothing
   671 ;; This function is called by:
   672 ;;		_USART_Init
   673 ;; This function uses a non-reentrant model
   674 ;;
   675                           
   676                           	psect	text4
   677  007F34                     __ptext4:
   678                           	opt stack 0
   679  007F34                     ___aldiv:
   680                           	opt stack 29
   681                           
   682                           ;incstack = 0
   683  007F34  0E00               	movlw	0
   684  007F36  6E0A               	movwf	___aldiv@sign,c
   685  007F38  AE08               	btfss	___aldiv@divisor+3,7,c
   686  007F3A  D00A               	goto	l113
   687  007F3C  1E08               	comf	___aldiv@divisor+3,f,c
   688  007F3E  1E07               	comf	___aldiv@divisor+2,f,c
   689  007F40  1E06               	comf	___aldiv@divisor+1,f,c
   690  007F42  6C05               	negf	___aldiv@divisor,c
   691  007F44  0E00               	movlw	0
   692  007F46  2206               	addwfc	___aldiv@divisor+1,f,c
   693  007F48  2207               	addwfc	___aldiv@divisor+2,f,c
   694  007F4A  2208               	addwfc	___aldiv@divisor+3,f,c
   695  007F4C  0E01               	movlw	1
   696  007F4E  6E0A               	movwf	___aldiv@sign,c
   697  007F50                     l113:
   698  007F50  AE04               	btfss	___aldiv@dividend+3,7,c
   699  007F52  D00A               	goto	l114
   700  007F54  1E04               	comf	___aldiv@dividend+3,f,c
   701  007F56  1E03               	comf	___aldiv@dividend+2,f,c
   702  007F58  1E02               	comf	___aldiv@dividend+1,f,c
   703  007F5A  6C01               	negf	___aldiv@dividend,c
   704  007F5C  0E00               	movlw	0
   705  007F5E  2202               	addwfc	___aldiv@dividend+1,f,c
   706  007F60  2203               	addwfc	___aldiv@dividend+2,f,c
   707  007F62  2204               	addwfc	___aldiv@dividend+3,f,c
   708  007F64  0E01               	movlw	1
   709  007F66  1A0A               	xorwf	___aldiv@sign,f,c
   710  007F68                     l114:
   711  007F68  0E00               	movlw	0
   712  007F6A  6E0B               	movwf	___aldiv@quotient,c
   713  007F6C  0E00               	movlw	0
   714  007F6E  6E0C               	movwf	___aldiv@quotient+1,c
   715  007F70  0E00               	movlw	0
   716  007F72  6E0D               	movwf	___aldiv@quotient+2,c
   717  007F74  0E00               	movlw	0
   718  007F76  6E0E               	movwf	___aldiv@quotient+3,c
   719  007F78  5005               	movf	___aldiv@divisor,w,c
   720  007F7A  1006               	iorwf	___aldiv@divisor+1,w,c
   721  007F7C  1007               	iorwf	___aldiv@divisor+2,w,c
   722  007F7E  1008               	iorwf	___aldiv@divisor+3,w,c
   723  007F80  B4D8               	btfsc	status,2,c
   724  007F82  D02A               	goto	l121
   725  007F84  0E01               	movlw	1
   726  007F86  6E09               	movwf	___aldiv@counter,c
   727  007F88  D006               	goto	l116
   728  007F8A  90D8               	bcf	status,0,c
   729  007F8C  3605               	rlcf	___aldiv@divisor,f,c
   730  007F8E  3606               	rlcf	___aldiv@divisor+1,f,c
   731  007F90  3607               	rlcf	___aldiv@divisor+2,f,c
   732  007F92  3608               	rlcf	___aldiv@divisor+3,f,c
   733  007F94  2A09               	incf	___aldiv@counter,f,c
   734  007F96                     l116:
   735  007F96  AE08               	btfss	___aldiv@divisor+3,7,c
   736  007F98  D7F8               	goto	l117
   737  007F9A                     u170:
   738  007F9A  90D8               	bcf	status,0,c
   739  007F9C  360B               	rlcf	___aldiv@quotient,f,c
   740  007F9E  360C               	rlcf	___aldiv@quotient+1,f,c
   741  007FA0  360D               	rlcf	___aldiv@quotient+2,f,c
   742  007FA2  360E               	rlcf	___aldiv@quotient+3,f,c
   743  007FA4  5005               	movf	___aldiv@divisor,w,c
   744  007FA6  5C01               	subwf	___aldiv@dividend,w,c
   745  007FA8  5006               	movf	___aldiv@divisor+1,w,c
   746  007FAA  5802               	subwfb	___aldiv@dividend+1,w,c
   747  007FAC  5007               	movf	___aldiv@divisor+2,w,c
   748  007FAE  5803               	subwfb	___aldiv@dividend+2,w,c
   749  007FB0  5008               	movf	___aldiv@divisor+3,w,c
   750  007FB2  5804               	subwfb	___aldiv@dividend+3,w,c
   751  007FB4  A0D8               	btfss	status,0,c
   752  007FB6  D009               	goto	l120
   753  007FB8  5005               	movf	___aldiv@divisor,w,c
   754  007FBA  5E01               	subwf	___aldiv@dividend,f,c
   755  007FBC  5006               	movf	___aldiv@divisor+1,w,c
   756  007FBE  5A02               	subwfb	___aldiv@dividend+1,f,c
   757  007FC0  5007               	movf	___aldiv@divisor+2,w,c
   758  007FC2  5A03               	subwfb	___aldiv@dividend+2,f,c
   759  007FC4  5008               	movf	___aldiv@divisor+3,w,c
   760  007FC6  5A04               	subwfb	___aldiv@dividend+3,f,c
   761  007FC8  800B               	bsf	___aldiv@quotient,0,c
   762  007FCA                     l120:
   763  007FCA  90D8               	bcf	status,0,c
   764  007FCC  3208               	rrcf	___aldiv@divisor+3,f,c
   765  007FCE  3207               	rrcf	___aldiv@divisor+2,f,c
   766  007FD0  3206               	rrcf	___aldiv@divisor+1,f,c
   767  007FD2  3205               	rrcf	___aldiv@divisor,f,c
   768  007FD4  2E09               	decfsz	___aldiv@counter,f,c
   769  007FD6  D7E1               	goto	u170
   770  007FD8                     l121:
   771  007FD8  500A               	movf	___aldiv@sign,w,c
   772  007FDA  B4D8               	btfsc	status,2,c
   773  007FDC  D008               	goto	l122
   774  007FDE  1E0E               	comf	___aldiv@quotient+3,f,c
   775  007FE0  1E0D               	comf	___aldiv@quotient+2,f,c
   776  007FE2  1E0C               	comf	___aldiv@quotient+1,f,c
   777  007FE4  6C0B               	negf	___aldiv@quotient,c
   778  007FE6  0E00               	movlw	0
   779  007FE8  220C               	addwfc	___aldiv@quotient+1,f,c
   780  007FEA  220D               	addwfc	___aldiv@quotient+2,f,c
   781  007FEC  220E               	addwfc	___aldiv@quotient+3,f,c
   782  007FEE                     l122:
   783  007FEE  C00B  F001         	movff	___aldiv@quotient,?___aldiv
   784  007FF2  C00C  F002         	movff	___aldiv@quotient+1,?___aldiv+1
   785  007FF6  C00D  F003         	movff	___aldiv@quotient+2,?___aldiv+2
   786  007FFA  C00E  F004         	movff	___aldiv@quotient+3,?___aldiv+3
   787  007FFE  0012               	return	
   788  008000                     __end_of___aldiv:
   789                           	opt stack 0
   790  0000                     tblptru	equ	0xFF8
   791                           tblptrh	equ	0xFF7
   792                           tblptrl	equ	0xFF6
   793                           tablat	equ	0xFF5
   794                           postinc0	equ	0xFEE
   795                           wreg	equ	0xFE8
   796                           postdec1	equ	0xFE5
   797                           fsr1l	equ	0xFE1
   798                           indf2	equ	0xFDF
   799                           fsr2h	equ	0xFDA
   800                           fsr2l	equ	0xFD9
   801                           status	equ	0xFD8
   802                           tblptru	equ	0xFF8
   803                           tblptrh	equ	0xFF7
   804                           tblptrl	equ	0xFF6
   805                           tablat	equ	0xFF5
   806                           postinc0	equ	0xFEE
   807                           wreg	equ	0xFE8
   808                           postdec1	equ	0xFE5
   809                           fsr1l	equ	0xFE1
   810                           indf2	equ	0xFDF
   811                           fsr2h	equ	0xFDA
   812                           fsr2l	equ	0xFD9
   813                           status	equ	0xFD8
   814                           
   815                           	psect	rparam
   816  0000                     tblptru	equ	0xFF8
   817                           tblptrh	equ	0xFF7
   818                           tblptrl	equ	0xFF6
   819                           tablat	equ	0xFF5
   820                           postinc0	equ	0xFEE
   821                           wreg	equ	0xFE8
   822                           postdec1	equ	0xFE5
   823                           fsr1l	equ	0xFE1
   824                           indf2	equ	0xFDF
   825                           fsr2h	equ	0xFDA
   826                           fsr2l	equ	0xFD9
   827                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        7
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     28      35
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_USART_Init
    _USART_Init->___aldiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0     920
                                             22 COMRAM     6     6      0
                         _USART_Init
                           _USART_Rx
                           _USART_Tx
 ---------------------------------------------------------------------------------
 (1) _USART_Tx                                             1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _USART_Rx                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _USART_Init                                           8     4      4     725
                                             14 COMRAM     8     4      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     604
                                              0 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _USART_Init
     ___aldiv
   _USART_Rx
   _USART_Tx

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     1C      23       1       36.8%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      23      20        0.0%
DATA                 0      0      23       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Aug 14 22:25:19 2018

                     l40 7E94                       l41 7F30                       l50 7EF4  
                     l42 7EA4                       l43 7EBA                       l45 7ECA  
                     l47 7EDA              __CFG_BORV$3 000000             __CFG_CP0$OFF 000000  
           __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000  
                    l120 7FCA                      l121 7FD8                      l113 7F50  
                    l122 7FEE                      l114 7F68                      l116 7F96  
                    l117 7F8A                      l907 7F20             __CFG_CPB$OFF 000000  
                    u170 7F9A             __CFG_CPD$OFF 000000                      u277 7F10  
           __CFG_BOR$OFF 000000                      wreg 000FE8             __CFG_FOSC$HS 000000  
           __CFG_LVP$OFF 000000             __CFG_WDT$OFF 000000             __CFG_PWRT$ON 000000  
                   _main 7E76                     indf2 000FDF                     fsr1l 000FE1  
                   fsr2l 000FD9                     start 0000            __CFG_IESO$OFF 000000  
          __CFG_MCLRE$ON 000000             ___param_bank 000000            __CFG_PLLDIV$1 000000  
         __CFG_CCP2MX$ON 000000          __end_of___aldiv 8000                    ?_main 0001  
                  _RCREG 000FAE                    _SPBRG 000FAF            __CFG_USBDIV$1 000000  
                  _TXREG 000FAD            __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000  
          __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000           __CFG_EBTR0$OFF 000000  
         __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000  
         __CFG_EBTR3$OFF 000000            __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000  
          __CFG_WRTD$OFF 000000           __CFG_EBTRB$OFF 000000                    _datos 001D  
       __end_of_USART_Rx 7DD0         __end_of_USART_Tx 7DE0                    main@i 001A  
           USART_Tx@data 0001                    tablat 000FF5                    status 000FD8  
         __CFG_ICPRT$OFF 000000           __CFG_PBADEN$ON 000000              ?_USART_Init 000F  
        __initialization 7DE0             __end_of_main 7F34                   ??_main 0017  
          __activetblptr 000000           __CFG_XINST$OFF 000000                ??___aldiv 0009  
         __CFG_STVREN$ON 000000             __pdataCOMRAM 001D                   tblptrh 000FF7  
                 tblptrl 000FF6                   tblptru 000FF8      __size_of_USART_Init 0070  
             __accesstop 0060  __end_of__initialization 7E00            ___rparam_used 000001  
         __pcstackCOMRAM 0001                ?_USART_Rx 0001                ?_USART_Tx 0001  
             ??_USART_Rx 0001               ??_USART_Tx 0001          __CFG_VREGEN$OFF 000000  
           ??_USART_Init 0013                  __Hparam 0000                  __Lparam 0000  
                ___aldiv 7F34           USART_Init@BAUD 000F                  __pcinit 7DE0  
                __ramtop 0800                  __ptext0 7E76                  __ptext1 7DD8  
                __ptext2 7DCC                  __ptext3 7E06                  __ptext4 7F34  
       ___aldiv@dividend 0001       __end_of_USART_Init 7E76     end_of_initialization 7E00  
              _RCSTAbits 000FAB         ___aldiv@quotient 000B                  postdec1 000FE5  
                postinc0 000FEE                _TRISCbits 000F94                _TRISDbits 000F95  
              _TXSTAbits 000FAC            __pidataCOMRAM 7DD1        __size_of_USART_Rx 0004  
      __size_of_USART_Tx 0008      start_initialization 7DE0         __CFG_LPT1OSC$OFF 000000  
               ?___aldiv 0001          ___aldiv@divisor 0005          ___aldiv@counter 0009  
               _LATDbits 000F8C         __CFG_WDTPS$32768 000000                 _USART_Rx 7DCC  
               _USART_Tx 7DD8                copy_data0 7DF4                 __Hrparam 0000  
               __Lrparam 0000         __size_of___aldiv 00CC            __size_of_main 00BE  
               main@data 0019                 main@dato 001C    __CFG_CPUDIV$OSC1_PLL2 000000  
         _USART_Init$845 0013             ___aldiv@sign 000A               _USART_Init 7E06  
