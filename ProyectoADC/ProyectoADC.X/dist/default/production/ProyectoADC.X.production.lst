

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sun Jul 08 20:51:12 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1
    45                           	psect	text34,global,reloc=2,class=CODE,delta=1
    46                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    47                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    48  0000                     
    49                           ; Version 1.45
    50                           ; Generated 16/11/2017 GMT
    51                           ; 
    52                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    53                           ; All rights reserved.
    54                           ; 
    55                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    56                           ; 
    57                           ; Redistribution and use in source and binary forms, with or without modification, are
    58                           ; permitted provided that the following conditions are met:
    59                           ; 
    60                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    61                           ;        conditions and the following disclaimer.
    62                           ; 
    63                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    64                           ;        of conditions and the following disclaimer in the documentation and/or other
    65                           ;        materials provided with the distribution.
    66                           ; 
    67                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    68                           ;        software without specific prior written permission.
    69                           ; 
    70                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    71                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    72                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    73                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    74                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    75                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    76                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    77                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    78                           ; 
    79                           ; 
    80                           ; Code-generator required, PIC18F4550 Definitions
    81                           ; 
    82                           ; SFR Addresses
    83  0000                     
    84                           	psect	mediumconst
    85  007F00                     __pmediumconst:
    86                           	opt stack 0
    87  007F00  00                 	db	0
    88  007F01                     _dpowers:
    89                           	opt stack 0
    90  007F01  0001               	dw	1
    91  007F03  0000               	dw	0
    92  007F05  000A               	dw	10
    93  007F07  0000               	dw	0
    94  007F09  0064               	dw	100
    95  007F0B  0000               	dw	0
    96  007F0D  03E8               	dw	1000
    97  007F0F  0000               	dw	0
    98  007F11  2710               	dw	10000
    99  007F13  0000               	dw	0
   100  007F15  86A0               	dw	34464
   101  007F17  0001               	dw	1
   102  007F19  4240               	dw	16960
   103  007F1B  000F               	dw	15
   104  007F1D  9680               	dw	38528
   105  007F1F  0098               	dw	152
   106  007F21  E100               	dw	57600
   107  007F23  05F5               	dw	1525
   108  007F25  CA00               	dw	51712
   109  007F27  3B9A               	dw	15258
   110  007F29                     __end_of_dpowers:
   111                           	opt stack 0
   112  007F29                     __powers_:
   113                           	opt stack 0
   114  007F29  00                 	db	0
   115  007F2A  80                 	db	128
   116  007F2B  3F                 	db	63
   117  007F2C  00                 	db	0
   118  007F2D  20                 	db	32
   119  007F2E  41                 	db	65
   120  007F2F  00                 	db	0
   121  007F30  C8                 	db	200
   122  007F31  42                 	db	66
   123  007F32  00                 	db	0
   124  007F33  7A                 	db	122
   125  007F34  44                 	db	68
   126  007F35  40                 	db	64
   127  007F36  1C                 	db	28
   128  007F37  46                 	db	70
   129  007F38  50                 	db	80
   130  007F39  C3                 	db	195
   131  007F3A  47                 	db	71
   132  007F3B  24                 	db	36
   133  007F3C  74                 	db	116
   134  007F3D  49                 	db	73
   135  007F3E  97                 	db	151
   136  007F3F  18                 	db	24
   137  007F40  4B                 	db	75
   138  007F41  BC                 	db	188
   139  007F42  BE                 	db	190
   140  007F43  4C                 	db	76
   141  007F44  6B                 	db	107
   142  007F45  6E                 	db	110
   143  007F46  4E                 	db	78
   144  007F47  03                 	db	3
   145  007F48  15                 	db	21
   146  007F49  50                 	db	80
   147  007F4A  79                 	db	121
   148  007F4B  AD                 	db	173
   149  007F4C  60                 	db	96
   150  007F4D  F3                 	db	243
   151  007F4E  49                 	db	73
   152  007F4F  71                 	db	113
   153  007F50                     __end_of__powers_:
   154                           	opt stack 0
   155  007F50                     __npowers_:
   156                           	opt stack 0
   157  007F50  00                 	db	0
   158  007F51  80                 	db	128
   159  007F52  3F                 	db	63
   160  007F53  CD                 	db	205
   161  007F54  CC                 	db	204
   162  007F55  3D                 	db	61
   163  007F56  D7                 	db	215
   164  007F57  23                 	db	35
   165  007F58  3C                 	db	60
   166  007F59  12                 	db	18
   167  007F5A  83                 	db	131
   168  007F5B  3A                 	db	58
   169  007F5C  B7                 	db	183
   170  007F5D  D1                 	db	209
   171  007F5E  38                 	db	56
   172  007F5F  C6                 	db	198
   173  007F60  27                 	db	39
   174  007F61  37                 	db	55
   175  007F62  38                 	db	56
   176  007F63  86                 	db	134
   177  007F64  35                 	db	53
   178  007F65  C0                 	db	192
   179  007F66  D6                 	db	214
   180  007F67  33                 	db	51
   181  007F68  CC                 	db	204
   182  007F69  2B                 	db	43
   183  007F6A  32                 	db	50
   184  007F6B  70                 	db	112
   185  007F6C  89                 	db	137
   186  007F6D  30                 	db	48
   187  007F6E  E7                 	db	231
   188  007F6F  DB                 	db	219
   189  007F70  2E                 	db	46
   190  007F71  E5                 	db	229
   191  007F72  3C                 	db	60
   192  007F73  1E                 	db	30
   193  007F74  42                 	db	66
   194  007F75  A2                 	db	162
   195  007F76  0D                 	db	13
   196  007F77                     __end_of__npowers_:
   197                           	opt stack 0
   198  0000                     _ADRES	set	4035
   199  0000                     _LATDbits	set	3980
   200  0000                     _TRISDbits	set	3989
   201  0000                     _TRISD	set	3989
   202  0000                     _PORTD	set	3971
   203  0000                     _ADCON0bits	set	4034
   204  0000                     _ADCON2bits	set	4032
   205  0000                     _ADCON0	set	4034
   206  0000                     _ADCON1bits	set	4033
   207  0000                     _PORTBbits	set	3969
   208  0000                     _TRISA	set	3986
   209  0000                     _INTCON2bits	set	4081
   210  0000                     _TRISBbits	set	3987
   211  007F77                     STR_2:
   212  007F77  20                 	db	32
   213  007F78  20                 	db	32
   214  007F79  20                 	db	32
   215  007F7A  20                 	db	32
   216  007F7B  42                 	db	66	;'B'
   217  007F7C  79                 	db	121	;'y'
   218  007F7D  20                 	db	32
   219  007F7E  57                 	db	87	;'W'
   220  007F7F  45                 	db	69	;'E'
   221  007F80  4C                 	db	76	;'L'
   222  007F81  53                 	db	83	;'S'
   223  007F82  20                 	db	32
   224  007F83  20                 	db	32
   225  007F84  20                 	db	32
   226  007F85  20                 	db	32
   227  007F86  00                 	db	0
   228  007F87                     STR_6:
   229  007F87  20                 	db	32
   230  007F88  20                 	db	32
   231  007F89  2D                 	db	45
   232  007F8A  20                 	db	32
   233  007F8B  20                 	db	32
   234  007F8C  41                 	db	65	;'A'
   235  007F8D  44                 	db	68	;'D'
   236  007F8E  43                 	db	67	;'C'
   237  007F8F  20                 	db	32
   238  007F90  31                 	db	49	;'1'
   239  007F91  20                 	db	32
   240  007F92  20                 	db	32
   241  007F93  2D                 	db	45
   242  007F94  20                 	db	32
   243  007F95  20                 	db	32
   244  007F96  00                 	db	0
   245  007F97                     STR_9:
   246  007F97  20                 	db	32
   247  007F98  20                 	db	32
   248  007F99  2D                 	db	45
   249  007F9A  20                 	db	32
   250  007F9B  20                 	db	32
   251  007F9C  41                 	db	65	;'A'
   252  007F9D  44                 	db	68	;'D'
   253  007F9E  43                 	db	67	;'C'
   254  007F9F  20                 	db	32
   255  007FA0  32                 	db	50	;'2'
   256  007FA1  20                 	db	32
   257  007FA2  20                 	db	32
   258  007FA3  2D                 	db	45
   259  007FA4  20                 	db	32
   260  007FA5  20                 	db	32
   261  007FA6  00                 	db	0
   262  007FA7                     STR_12:
   263  007FA7  20                 	db	32
   264  007FA8  20                 	db	32
   265  007FA9  2D                 	db	45
   266  007FAA  20                 	db	32
   267  007FAB  20                 	db	32
   268  007FAC  41                 	db	65	;'A'
   269  007FAD  44                 	db	68	;'D'
   270  007FAE  43                 	db	67	;'C'
   271  007FAF  20                 	db	32
   272  007FB0  33                 	db	51	;'3'
   273  007FB1  20                 	db	32
   274  007FB2  20                 	db	32
   275  007FB3  2D                 	db	45
   276  007FB4  20                 	db	32
   277  007FB5  20                 	db	32
   278  007FB6  00                 	db	0
   279  007FB7                     STR_1:
   280  007FB7  20                 	db	32
   281  007FB8  56                 	db	86	;'V'
   282  007FB9  41                 	db	65	;'A'
   283  007FBA  52                 	db	82	;'R'
   284  007FBB  49                 	db	73	;'I'
   285  007FBC  41                 	db	65	;'A'
   286  007FBD  4E                 	db	78	;'N'
   287  007FBE  44                 	db	68	;'D'
   288  007FBF  4F                 	db	79	;'O'
   289  007FC0  20                 	db	32
   290  007FC1  41                 	db	65	;'A'
   291  007FC2  44                 	db	68	;'D'
   292  007FC3  43                 	db	67	;'C'
   293  007FC4  21                 	db	33
   294  007FC5  21                 	db	33
   295  007FC6  00                 	db	0
   296  007FC7                     STR_3:
   297  007FC7  41                 	db	65	;'A'
   298  007FC8  44                 	db	68	;'D'
   299  007FC9  43                 	db	67	;'C'
   300  007FCA  20                 	db	32
   301  007FCB  31                 	db	49	;'1'
   302  007FCC  20                 	db	32
   303  007FCD  3D                 	db	61	;'='
   304  007FCE  20                 	db	32
   305  007FCF  50                 	db	80	;'P'
   306  007FD0  55                 	db	85	;'U'
   307  007FD1  4C                 	db	76	;'L'
   308  007FD2  31                 	db	49	;'1'
   309  007FD3  00                 	db	0
   310  007FD4                     STR_4:
   311  007FD4  41                 	db	65	;'A'
   312  007FD5  44                 	db	68	;'D'
   313  007FD6  43                 	db	67	;'C'
   314  007FD7  20                 	db	32
   315  007FD8  32                 	db	50	;'2'
   316  007FD9  20                 	db	32
   317  007FDA  3D                 	db	61	;'='
   318  007FDB  20                 	db	32
   319  007FDC  50                 	db	80	;'P'
   320  007FDD  55                 	db	85	;'U'
   321  007FDE  4C                 	db	76	;'L'
   322  007FDF  32                 	db	50	;'2'
   323  007FE0  00                 	db	0
   324  007FE1                     STR_5:
   325  007FE1  41                 	db	65	;'A'
   326  007FE2  44                 	db	68	;'D'
   327  007FE3  43                 	db	67	;'C'
   328  007FE4  20                 	db	32
   329  007FE5  33                 	db	51	;'3'
   330  007FE6  20                 	db	32
   331  007FE7  3D                 	db	61	;'='
   332  007FE8  20                 	db	32
   333  007FE9  50                 	db	80	;'P'
   334  007FEA  55                 	db	85	;'U'
   335  007FEB  4C                 	db	76	;'L'
   336  007FEC  33                 	db	51	;'3'
   337  007FED  00                 	db	0
   338  007FEE                     STR_7:
   339  007FEE  56                 	db	86	;'V'
   340  007FEF  4F                 	db	79	;'O'
   341  007FF0  4C                 	db	76	;'L'
   342  007FF1  54                 	db	84	;'T'
   343  007FF2  41                 	db	65	;'A'
   344  007FF3  4A                 	db	74	;'J'
   345  007FF4  45                 	db	69	;'E'
   346  007FF5  20                 	db	32
   347  007FF6  45                 	db	69	;'E'
   348  007FF7  53                 	db	83	;'S'
   349  007FF8  3A                 	db	58	;':'
   350  007FF9  00                 	db	0
   351  007FFA                     STR_8:
   352  007FFA  25                 	db	37
   353  007FFB  2E                 	db	46
   354  007FFC  32                 	db	50	;'2'
   355  007FFD  66                 	db	102	;'f'
   356  007FFE  00                 	db	0
   357  0000                     
   358                           ; #config settings
   359  007FFF  00                 	db	0	; dummy byte at the end
   360  0000                     
   361                           	psect	cinit
   362  005F96                     __pcinit:
   363                           	opt stack 0
   364  005F96                     start_initialization:
   365                           	opt stack 0
   366  005F96                     __initialization:
   367                           	opt stack 0
   368                           
   369                           ; Clear objects allocated to BANK0 (20 bytes)
   370  005F96  EE00  F077         	lfsr	0,__pbssBANK0
   371  005F9A  0E14               	movlw	20
   372  005F9C                     clear_0:
   373  005F9C  6AEE               	clrf	postinc0,c
   374  005F9E  06E8               	decf	wreg,f,c
   375  005FA0  E1FD               	bnz	clear_0
   376                           
   377                           ; Clear objects allocated to COMRAM (5 bytes)
   378  005FA2  6A53               	clrf	(__pbssCOMRAM+4)& (0+255),c
   379  005FA4  6A52               	clrf	(__pbssCOMRAM+3)& (0+255),c
   380  005FA6  6A51               	clrf	(__pbssCOMRAM+2)& (0+255),c
   381  005FA8  6A50               	clrf	(__pbssCOMRAM+1)& (0+255),c
   382  005FAA  6A4F               	clrf	__pbssCOMRAM& (0+255),c
   383  005FAC                     end_of_initialization:
   384                           	opt stack 0
   385  005FAC                     __end_of__initialization:
   386                           	opt stack 0
   387  005FAC  0E00               	movlw	low (__Lmediumconst shr (0+16))
   388  005FAE  6EF8               	movwf	tblptru,c
   389  005FB0  0100               	movlb	0
   390  005FB2  EFC9  F039         	goto	_main	;jump to C main() function
   391                           tblptru	equ	0xFF8
   392                           postinc0	equ	0xFEE
   393                           wreg	equ	0xFE8
   394                           
   395                           	psect	bssCOMRAM
   396  00004F                     __pbssCOMRAM:
   397                           	opt stack 0
   398  00004F                     _voltaje:
   399                           	opt stack 0
   400  00004F                     	ds	3
   401  000052                     _valor:
   402                           	opt stack 0
   403  000052                     	ds	2
   404                           tblptru	equ	0xFF8
   405                           postinc0	equ	0xFEE
   406                           wreg	equ	0xFE8
   407                           
   408                           	psect	bssBANK0
   409  000077                     __pbssBANK0:
   410                           	opt stack 0
   411  000077                     _datos:
   412                           	opt stack 0
   413  000077                     	ds	20
   414                           tblptru	equ	0xFF8
   415                           postinc0	equ	0xFEE
   416                           wreg	equ	0xFE8
   417                           
   418                           	psect	cstackBANK0
   419  000060                     __pcstackBANK0:
   420                           	opt stack 0
   421  000060                     _sprintf$1174:
   422                           	opt stack 0
   423                           
   424                           ; 3 bytes @ 0x0
   425  000060                     	ds	3
   426  000063                     sprintf@ap:
   427                           	opt stack 0
   428                           
   429                           ; 2 bytes @ 0x3
   430  000063                     	ds	2
   431  000065                     sprintf@flag:
   432                           	opt stack 0
   433                           
   434                           ; 2 bytes @ 0x5
   435  000065                     	ds	2
   436  000067                     sprintf@val:
   437                           	opt stack 0
   438                           
   439                           ; 4 bytes @ 0x7
   440  000067                     	ds	4
   441  00006B                     sprintf@exp:
   442                           	opt stack 0
   443                           
   444                           ; 2 bytes @ 0xB
   445  00006B                     	ds	2
   446  00006D                     sprintf@tmpval:
   447                           	opt stack 0
   448                           
   449                           ; 4 bytes @ 0xD
   450  00006D                     	ds	4
   451  000071                     sprintf@prec:
   452                           	opt stack 0
   453                           
   454                           ; 2 bytes @ 0x11
   455  000071                     	ds	2
   456  000073                     sprintf@fval:
   457                           	opt stack 0
   458                           
   459                           ; 3 bytes @ 0x13
   460  000073                     	ds	3
   461  000076                     sprintf@c:
   462                           	opt stack 0
   463                           
   464                           ; 1 bytes @ 0x16
   465  000076                     	ds	1
   466                           tblptru	equ	0xFF8
   467                           postinc0	equ	0xFEE
   468                           wreg	equ	0xFE8
   469                           
   470                           	psect	cstackCOMRAM
   471  000001                     __pcstackCOMRAM:
   472                           	opt stack 0
   473  000001                     ??_SetDDRamAddr:
   474  000001                     ??_isdigit:
   475  000001                     ??_DelayPORXLCD:
   476  000001                     ?_ADC_read:
   477                           	opt stack 0
   478  000001                     ?___awmod:
   479                           	opt stack 0
   480  000001                     ?___ftpack:
   481                           	opt stack 0
   482  000001                     ?___ftneg:
   483                           	opt stack 0
   484  000001                     ?__tdiv_to_l_:
   485                           	opt stack 0
   486  000001                     ?__div_to_l_:
   487                           	opt stack 0
   488  000001                     ?___lldiv:
   489                           	opt stack 0
   490  000001                     ?___llmod:
   491                           	opt stack 0
   492  000001                     WriteCmdXLCD@cmd:
   493                           	opt stack 0
   494  000001                     WriteDataXLCD@data:
   495                           	opt stack 0
   496  000001                     ___awmod@dividend:
   497                           	opt stack 0
   498  000001                     __div_to_l_@f1:
   499                           	opt stack 0
   500  000001                     ___ftpack@arg:
   501                           	opt stack 0
   502  000001                     __tdiv_to_l_@f1:
   503                           	opt stack 0
   504  000001                     ___ftge@ff1:
   505                           	opt stack 0
   506  000001                     ___ftneg@f1:
   507                           	opt stack 0
   508  000001                     ___lldiv@dividend:
   509                           	opt stack 0
   510  000001                     ___llmod@dividend:
   511                           	opt stack 0
   512                           
   513                           ; 4 bytes @ 0x0
   514  000001                     	ds	1
   515  000002                     _isdigit$823:
   516                           	opt stack 0
   517  000002                     LCD_gotoXY@x:
   518                           	opt stack 0
   519  000002                     putrsXLCD@buffer:
   520                           	opt stack 0
   521                           
   522                           ; 2 bytes @ 0x1
   523  000002                     	ds	1
   524  000003                     ADC_read@ch:
   525                           	opt stack 0
   526  000003                     isdigit@c:
   527                           	opt stack 0
   528  000003                     ___awmod@divisor:
   529                           	opt stack 0
   530                           
   531                           ; 2 bytes @ 0x2
   532  000003                     	ds	1
   533  000004                     SetDDRamAddr@DDaddr:
   534                           	opt stack 0
   535  000004                     ___ftpack@exp:
   536                           	opt stack 0
   537  000004                     LCD_gotoXY@y:
   538                           	opt stack 0
   539  000004                     __div_to_l_@f2:
   540                           	opt stack 0
   541  000004                     __tdiv_to_l_@f2:
   542                           	opt stack 0
   543  000004                     ___ftge@ff2:
   544                           	opt stack 0
   545                           
   546                           ; 3 bytes @ 0x3
   547  000004                     	ds	1
   548  000005                     OpenXLCD@lcdtype:
   549                           	opt stack 0
   550  000005                     ___awmod@counter:
   551                           	opt stack 0
   552  000005                     ___ftpack@sign:
   553                           	opt stack 0
   554  000005                     ___lldiv@divisor:
   555                           	opt stack 0
   556  000005                     ___llmod@divisor:
   557                           	opt stack 0
   558                           
   559                           ; 4 bytes @ 0x4
   560  000005                     	ds	1
   561  000006                     ??___ftpack:
   562  000006                     ___awmod@sign:
   563                           	opt stack 0
   564                           
   565                           ; 1 bytes @ 0x5
   566  000006                     	ds	1
   567  000007                     ??__tdiv_to_l_:
   568  000007                     ??___ftge:
   569  000007                     ?___awdiv:
   570                           	opt stack 0
   571  000007                     ___awdiv@dividend:
   572                           	opt stack 0
   573  000007                     __div_to_l_@quot:
   574                           	opt stack 0
   575                           
   576                           ; 4 bytes @ 0x6
   577  000007                     	ds	2
   578  000009                     ?___lltoft:
   579                           	opt stack 0
   580  000009                     ?___lwtoft:
   581                           	opt stack 0
   582  000009                     ___llmod@counter:
   583                           	opt stack 0
   584  000009                     ___awdiv@divisor:
   585                           	opt stack 0
   586  000009                     ___lwtoft@c:
   587                           	opt stack 0
   588  000009                     ___lldiv@quotient:
   589                           	opt stack 0
   590  000009                     ___lltoft@c:
   591                           	opt stack 0
   592                           
   593                           ; 4 bytes @ 0x8
   594  000009                     	ds	1
   595  00000A                     __tdiv_to_l_@quot:
   596                           	opt stack 0
   597                           
   598                           ; 4 bytes @ 0x9
   599  00000A                     	ds	1
   600  00000B                     ___awdiv@counter:
   601                           	opt stack 0
   602  00000B                     __div_to_l_@cntr:
   603                           	opt stack 0
   604                           
   605                           ; 1 bytes @ 0xA
   606  00000B                     	ds	1
   607  00000C                     ___awdiv@sign:
   608                           	opt stack 0
   609  00000C                     __div_to_l_@exp1:
   610                           	opt stack 0
   611                           
   612                           ; 1 bytes @ 0xB
   613  00000C                     	ds	1
   614  00000D                     ??___lltoft:
   615  00000D                     ___lldiv@counter:
   616                           	opt stack 0
   617  00000D                     ___awdiv@quotient:
   618                           	opt stack 0
   619                           
   620                           ; 2 bytes @ 0xC
   621  00000D                     	ds	1
   622  00000E                     __tdiv_to_l_@cntr:
   623                           	opt stack 0
   624                           
   625                           ; 1 bytes @ 0xD
   626  00000E                     	ds	1
   627  00000F                     ?___wmul:
   628                           	opt stack 0
   629  00000F                     __tdiv_to_l_@exp1:
   630                           	opt stack 0
   631  00000F                     ___wmul@multiplier:
   632                           	opt stack 0
   633                           
   634                           ; 2 bytes @ 0xE
   635  00000F                     	ds	2
   636  000011                     ___lltoft@exp:
   637                           	opt stack 0
   638  000011                     ___wmul@multiplicand:
   639                           	opt stack 0
   640                           
   641                           ; 2 bytes @ 0x10
   642  000011                     	ds	2
   643  000013                     ___wmul@product:
   644                           	opt stack 0
   645                           
   646                           ; 2 bytes @ 0x12
   647  000013                     	ds	2
   648  000015                     ?___ftmul:
   649                           	opt stack 0
   650  000015                     ___ftmul@f1:
   651                           	opt stack 0
   652                           
   653                           ; 3 bytes @ 0x14
   654  000015                     	ds	3
   655  000018                     ___ftmul@f2:
   656                           	opt stack 0
   657                           
   658                           ; 3 bytes @ 0x17
   659  000018                     	ds	3
   660  00001B                     ??___ftmul:
   661                           
   662                           ; 1 bytes @ 0x1A
   663  00001B                     	ds	3
   664  00001E                     ___ftmul@exp:
   665                           	opt stack 0
   666                           
   667                           ; 1 bytes @ 0x1D
   668  00001E                     	ds	1
   669  00001F                     ___ftmul@f3_as_product:
   670                           	opt stack 0
   671                           
   672                           ; 3 bytes @ 0x1E
   673  00001F                     	ds	3
   674  000022                     ___ftmul@cntr:
   675                           	opt stack 0
   676                           
   677                           ; 1 bytes @ 0x21
   678  000022                     	ds	1
   679  000023                     ___ftmul@sign:
   680                           	opt stack 0
   681                           
   682                           ; 1 bytes @ 0x22
   683  000023                     	ds	1
   684  000024                     ?___ftdiv:
   685                           	opt stack 0
   686  000024                     ?_fround:
   687                           	opt stack 0
   688  000024                     ?_scale:
   689                           	opt stack 0
   690  000024                     ___ftdiv@f1:
   691                           	opt stack 0
   692                           
   693                           ; 3 bytes @ 0x23
   694  000024                     	ds	3
   695  000027                     ___ftdiv@f2:
   696                           	opt stack 0
   697  000027                     _fround$1172:
   698                           	opt stack 0
   699  000027                     _scale$1173:
   700                           	opt stack 0
   701                           
   702                           ; 3 bytes @ 0x26
   703  000027                     	ds	3
   704  00002A                     ??___ftdiv:
   705  00002A                     scale@scl:
   706                           	opt stack 0
   707  00002A                     _fround$1171:
   708                           	opt stack 0
   709                           
   710                           ; 3 bytes @ 0x29
   711  00002A                     	ds	1
   712  00002B                     ?___fttol:
   713                           	opt stack 0
   714  00002B                     ___fttol@f1:
   715                           	opt stack 0
   716                           
   717                           ; 3 bytes @ 0x2A
   718  00002B                     	ds	2
   719  00002D                     fround@prec:
   720                           	opt stack 0
   721  00002D                     ___ftdiv@cntr:
   722                           	opt stack 0
   723                           
   724                           ; 1 bytes @ 0x2C
   725  00002D                     	ds	1
   726  00002E                     ?___ftadd:
   727                           	opt stack 0
   728  00002E                     ___ftadd@f1:
   729                           	opt stack 0
   730  00002E                     ___ftdiv@f3:
   731                           	opt stack 0
   732                           
   733                           ; 3 bytes @ 0x2D
   734  00002E                     	ds	1
   735  00002F                     ??___fttol:
   736                           
   737                           ; 1 bytes @ 0x2E
   738  00002F                     	ds	2
   739  000031                     ___ftdiv@exp:
   740                           	opt stack 0
   741  000031                     ___ftadd@f2:
   742                           	opt stack 0
   743                           
   744                           ; 3 bytes @ 0x30
   745  000031                     	ds	1
   746  000032                     ___ftdiv@sign:
   747                           	opt stack 0
   748                           
   749                           ; 1 bytes @ 0x31
   750  000032                     	ds	2
   751  000034                     ??___ftadd:
   752  000034                     ___fttol@sign1:
   753                           	opt stack 0
   754                           
   755                           ; 1 bytes @ 0x33
   756  000034                     	ds	1
   757  000035                     ___fttol@lval:
   758                           	opt stack 0
   759                           
   760                           ; 4 bytes @ 0x34
   761  000035                     	ds	2
   762  000037                     ___ftadd@sign:
   763                           	opt stack 0
   764                           
   765                           ; 1 bytes @ 0x36
   766  000037                     	ds	1
   767  000038                     ___ftadd@exp2:
   768                           	opt stack 0
   769                           
   770                           ; 1 bytes @ 0x37
   771  000038                     	ds	1
   772  000039                     ___ftadd@exp1:
   773                           	opt stack 0
   774  000039                     ___fttol@exp1:
   775                           	opt stack 0
   776                           
   777                           ; 1 bytes @ 0x38
   778  000039                     	ds	1
   779  00003A                     ?___ftsub:
   780                           	opt stack 0
   781  00003A                     ___ftsub@f1:
   782                           	opt stack 0
   783                           
   784                           ; 3 bytes @ 0x39
   785  00003A                     	ds	3
   786  00003D                     ___ftsub@f2:
   787                           	opt stack 0
   788                           
   789                           ; 3 bytes @ 0x3C
   790  00003D                     	ds	3
   791  000040                     ?_sprintf:
   792                           	opt stack 0
   793  000040                     sprintf@sp:
   794                           	opt stack 0
   795                           
   796                           ; 2 bytes @ 0x3F
   797  000040                     	ds	2
   798  000042                     sprintf@f:
   799                           	opt stack 0
   800                           
   801                           ; 2 bytes @ 0x41
   802  000042                     	ds	5
   803  000047                     ??_sprintf:
   804                           
   805                           ; 1 bytes @ 0x46
   806  000047                     	ds	6
   807  00004D                     ??_main:
   808                           
   809                           ; 1 bytes @ 0x4C
   810  00004D                     	ds	2
   811                           tblptru	equ	0xFF8
   812                           postinc0	equ	0xFEE
   813                           wreg	equ	0xFE8
   814                           
   815 ;;
   816 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   817 ;;
   818 ;; *************** function _main *****************
   819 ;; Defined at:
   820 ;;		line 41 in file "Programa_principal.c"
   821 ;; Parameters:    Size  Location     Type
   822 ;;		None
   823 ;; Auto vars:     Size  Location     Type
   824 ;;		None
   825 ;; Return value:  Size  Location     Type
   826 ;;                  1    wreg      void 
   827 ;; Registers used:
   828 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   829 ;; Tracked objects:
   830 ;;		On entry : 0/0
   831 ;;		On exit  : 0/0
   832 ;;		Unchanged: 0/0
   833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   834 ;;      Params:         0       0       0       0       0       0       0       0       0
   835 ;;      Locals:         0       0       0       0       0       0       0       0       0
   836 ;;      Temps:          2       0       0       0       0       0       0       0       0
   837 ;;      Totals:         2       0       0       0       0       0       0       0       0
   838 ;;Total ram usage:        2 bytes
   839 ;; Hardware stack levels required when called:    4
   840 ;; This function calls:
   841 ;;		_ADC_init
   842 ;;		_ADC_read
   843 ;;		_LCD_Init
   844 ;;		_LCD_gotoXY
   845 ;;		_PORT_Init
   846 ;;		_WriteCmdXLCD
   847 ;;		___ftdiv
   848 ;;		___ftmul
   849 ;;		___lwtoft
   850 ;;		_putrsXLCD
   851 ;;		_sprintf
   852 ;; This function is called by:
   853 ;;		Startup code after reset
   854 ;; This function uses a non-reentrant model
   855 ;;
   856                           
   857                           	psect	text0
   858  007392                     __ptext0:
   859                           	opt stack 0
   860  007392                     _main:
   861                           	opt stack 27
   862                           
   863                           ;Programa_principal.c: 42: LCD_Init();
   864                           
   865                           ;incstack = 0
   866  007392  ECAD  F02F         	call	_LCD_Init	;wreg free
   867                           
   868                           ;Programa_principal.c: 43: ADC_init();
   869  007396  ECEC  F02F         	call	_ADC_init	;wreg free
   870                           
   871                           ;Programa_principal.c: 44: PORT_Init();
   872  00739A  EC91  F02F         	call	_PORT_Init	;wreg free
   873                           
   874                           ;Programa_principal.c: 45: LCD_gotoXY(0,0);
   875  00739E  0E00               	movlw	0
   876  0073A0  6E03               	movwf	LCD_gotoXY@x+1,c
   877  0073A2  0E00               	movlw	0
   878  0073A4  6E02               	movwf	LCD_gotoXY@x,c
   879  0073A6  0E00               	movlw	0
   880  0073A8  6E05               	movwf	LCD_gotoXY@y+1,c
   881  0073AA  0E00               	movlw	0
   882  0073AC  6E04               	movwf	LCD_gotoXY@y,c
   883  0073AE  ECDB  F02F         	call	_LCD_gotoXY	;wreg free
   884                           
   885                           ;Programa_principal.c: 46: putrsXLCD(" VARIANDO ADC!!");
   886  0073B2  0EB7               	movlw	low STR_1
   887  0073B4  6E02               	movwf	putrsXLCD@buffer,c
   888  0073B6  0E7F               	movlw	high STR_1
   889  0073B8  6E03               	movwf	putrsXLCD@buffer+1,c
   890  0073BA  ECF7  F030         	call	_putrsXLCD	;wreg free
   891                           
   892                           ;Programa_principal.c: 47: _delay((unsigned long)((100)*(20000000L/4000.0)));
   893  0073BE  0E03               	movlw	3
   894  0073C0  6E4E               	movwf	(??_main+1)& (0+255),c
   895  0073C2  0E8A               	movlw	138
   896  0073C4  6E4D               	movwf	??_main& (0+255),c
   897  0073C6  0E56               	movlw	86
   898  0073C8                     u3217:
   899  0073C8  2EE8               	decfsz	wreg,f,c
   900  0073CA  D7FE               	bra	u3217
   901  0073CC  2E4D               	decfsz	??_main& (0+255),f,c
   902  0073CE  D7FC               	bra	u3217
   903  0073D0  2E4E               	decfsz	(??_main+1)& (0+255),f,c
   904  0073D2  D7FA               	bra	u3217
   905                           
   906                           ;Programa_principal.c: 48: LCD_gotoXY(1,0);
   907  0073D4  0E00               	movlw	0
   908  0073D6  6E03               	movwf	LCD_gotoXY@x+1,c
   909  0073D8  0E01               	movlw	1
   910  0073DA  6E02               	movwf	LCD_gotoXY@x,c
   911  0073DC  0E00               	movlw	0
   912  0073DE  6E05               	movwf	LCD_gotoXY@y+1,c
   913  0073E0  0E00               	movlw	0
   914  0073E2  6E04               	movwf	LCD_gotoXY@y,c
   915  0073E4  ECDB  F02F         	call	_LCD_gotoXY	;wreg free
   916                           
   917                           ;Programa_principal.c: 49: putrsXLCD("    By WELS    ");
   918  0073E8  0E77               	movlw	low STR_2
   919  0073EA  6E02               	movwf	putrsXLCD@buffer,c
   920  0073EC  0E7F               	movlw	high STR_2
   921  0073EE  6E03               	movwf	putrsXLCD@buffer+1,c
   922  0073F0  ECF7  F030         	call	_putrsXLCD	;wreg free
   923                           
   924                           ;Programa_principal.c: 50: _delay((unsigned long)((500)*(20000000L/4000.0)));
   925  0073F4  0E0D               	movlw	13
   926  0073F6  6E4E               	movwf	(??_main+1)& (0+255),c
   927  0073F8  0EAF               	movlw	175
   928  0073FA  6E4D               	movwf	??_main& (0+255),c
   929  0073FC  0EB6               	movlw	182
   930  0073FE                     u3227:
   931  0073FE  2EE8               	decfsz	wreg,f,c
   932  007400  D7FE               	bra	u3227
   933  007402  2E4D               	decfsz	??_main& (0+255),f,c
   934  007404  D7FC               	bra	u3227
   935  007406  2E4E               	decfsz	(??_main+1)& (0+255),f,c
   936  007408  D7FA               	bra	u3227
   937  00740A  D000               	nop2	
   938                           
   939                           ;Programa_principal.c: 51: WriteCmdXLCD(0x01);
   940  00740C  0E01               	movlw	1
   941  00740E  EC6B  F030         	call	_WriteCmdXLCD
   942  007412                     
   943                           ;Programa_principal.c: 53: LCD_gotoXY(0,0);
   944  007412  0E00               	movlw	0
   945  007414  6E03               	movwf	LCD_gotoXY@x+1,c
   946  007416  0E00               	movlw	0
   947  007418  6E02               	movwf	LCD_gotoXY@x,c
   948  00741A  0E00               	movlw	0
   949  00741C  6E05               	movwf	LCD_gotoXY@y+1,c
   950  00741E  0E00               	movlw	0
   951  007420  6E04               	movwf	LCD_gotoXY@y,c
   952  007422  ECDB  F02F         	call	_LCD_gotoXY	;wreg free
   953                           
   954                           ;Programa_principal.c: 54: putrsXLCD("ADC 1 = PUL1");
   955  007426  0EC7               	movlw	low STR_3
   956  007428  6E02               	movwf	putrsXLCD@buffer,c
   957  00742A  0E7F               	movlw	high STR_3
   958  00742C  6E03               	movwf	putrsXLCD@buffer+1,c
   959  00742E  ECF7  F030         	call	_putrsXLCD	;wreg free
   960                           
   961                           ;Programa_principal.c: 55: _delay((unsigned long)((500)*(20000000L/4000.0)));
   962  007432  0E0D               	movlw	13
   963  007434  6E4E               	movwf	(??_main+1)& (0+255),c
   964  007436  0EAF               	movlw	175
   965  007438  6E4D               	movwf	??_main& (0+255),c
   966  00743A  0EB6               	movlw	182
   967  00743C                     u3237:
   968  00743C  2EE8               	decfsz	wreg,f,c
   969  00743E  D7FE               	bra	u3237
   970  007440  2E4D               	decfsz	??_main& (0+255),f,c
   971  007442  D7FC               	bra	u3237
   972  007444  2E4E               	decfsz	(??_main+1)& (0+255),f,c
   973  007446  D7FA               	bra	u3237
   974  007448  D000               	nop2	
   975                           
   976                           ;Programa_principal.c: 56: LCD_gotoXY(1,0);
   977  00744A  0E00               	movlw	0
   978  00744C  6E03               	movwf	LCD_gotoXY@x+1,c
   979  00744E  0E01               	movlw	1
   980  007450  6E02               	movwf	LCD_gotoXY@x,c
   981  007452  0E00               	movlw	0
   982  007454  6E05               	movwf	LCD_gotoXY@y+1,c
   983  007456  0E00               	movlw	0
   984  007458  6E04               	movwf	LCD_gotoXY@y,c
   985  00745A  ECDB  F02F         	call	_LCD_gotoXY	;wreg free
   986                           
   987                           ;Programa_principal.c: 57: putrsXLCD("ADC 2 = PUL2");
   988  00745E  0ED4               	movlw	low STR_4
   989  007460  6E02               	movwf	putrsXLCD@buffer,c
   990  007462  0E7F               	movlw	high STR_4
   991  007464  6E03               	movwf	putrsXLCD@buffer+1,c
   992  007466  ECF7  F030         	call	_putrsXLCD	;wreg free
   993                           
   994                           ;Programa_principal.c: 58: _delay((unsigned long)((500)*(20000000L/4000.0)));
   995  00746A  0E0D               	movlw	13
   996  00746C  6E4E               	movwf	(??_main+1)& (0+255),c
   997  00746E  0EAF               	movlw	175
   998  007470  6E4D               	movwf	??_main& (0+255),c
   999  007472  0EB6               	movlw	182
  1000  007474                     u3247:
  1001  007474  2EE8               	decfsz	wreg,f,c
  1002  007476  D7FE               	bra	u3247
  1003  007478  2E4D               	decfsz	??_main& (0+255),f,c
  1004  00747A  D7FC               	bra	u3247
  1005  00747C  2E4E               	decfsz	(??_main+1)& (0+255),f,c
  1006  00747E  D7FA               	bra	u3247
  1007  007480  D000               	nop2	
  1008                           
  1009                           ;Programa_principal.c: 59: WriteCmdXLCD(0x01);
  1010  007482  0E01               	movlw	1
  1011  007484  EC6B  F030         	call	_WriteCmdXLCD
  1012                           
  1013                           ;Programa_principal.c: 60: LCD_gotoXY(0,0);
  1014  007488  0E00               	movlw	0
  1015  00748A  6E03               	movwf	LCD_gotoXY@x+1,c
  1016  00748C  0E00               	movlw	0
  1017  00748E  6E02               	movwf	LCD_gotoXY@x,c
  1018  007490  0E00               	movlw	0
  1019  007492  6E05               	movwf	LCD_gotoXY@y+1,c
  1020  007494  0E00               	movlw	0
  1021  007496  6E04               	movwf	LCD_gotoXY@y,c
  1022  007498  ECDB  F02F         	call	_LCD_gotoXY	;wreg free
  1023                           
  1024                           ;Programa_principal.c: 61: putrsXLCD("ADC 3 = PUL3");
  1025  00749C  0EE1               	movlw	low STR_5
  1026  00749E  6E02               	movwf	putrsXLCD@buffer,c
  1027  0074A0  0E7F               	movlw	high STR_5
  1028  0074A2  6E03               	movwf	putrsXLCD@buffer+1,c
  1029  0074A4  ECF7  F030         	call	_putrsXLCD	;wreg free
  1030                           
  1031                           ;Programa_principal.c: 62: _delay((unsigned long)((500)*(20000000L/4000.0)));
  1032  0074A8  0E0D               	movlw	13
  1033  0074AA  6E4E               	movwf	(??_main+1)& (0+255),c
  1034  0074AC  0EAF               	movlw	175
  1035  0074AE  6E4D               	movwf	??_main& (0+255),c
  1036  0074B0  0EB6               	movlw	182
  1037  0074B2                     u3257:
  1038  0074B2  2EE8               	decfsz	wreg,f,c
  1039  0074B4  D7FE               	bra	u3257
  1040  0074B6  2E4D               	decfsz	??_main& (0+255),f,c
  1041  0074B8  D7FC               	bra	u3257
  1042  0074BA  2E4E               	decfsz	(??_main+1)& (0+255),f,c
  1043  0074BC  D7FA               	bra	u3257
  1044  0074BE  D000               	nop2	
  1045                           
  1046                           ;Programa_principal.c: 63: if (PORTBbits.RB0 == 0){
  1047  0074C0  B081               	btfsc	3969,0,c	;volatile
  1048  0074C2  D088               	goto	l39
  1049  0074C4                     u3090:
  1050                           
  1051                           ;Programa_principal.c: 65: LCD_gotoXY(0,0);
  1052                           
  1053                           ;Programa_principal.c: 64: while(1){
  1054  0074C4  0E00               	movlw	0
  1055  0074C6  6E03               	movwf	LCD_gotoXY@x+1,c
  1056  0074C8  0E00               	movlw	0
  1057  0074CA  6E02               	movwf	LCD_gotoXY@x,c
  1058  0074CC  0E00               	movlw	0
  1059  0074CE  6E05               	movwf	LCD_gotoXY@y+1,c
  1060  0074D0  0E00               	movlw	0
  1061  0074D2  6E04               	movwf	LCD_gotoXY@y,c
  1062  0074D4  ECDB  F02F         	call	_LCD_gotoXY	;wreg free
  1063                           
  1064                           ;Programa_principal.c: 66: putrsXLCD("  -  ADC 1  -  ");
  1065  0074D8  0E87               	movlw	low STR_6
  1066  0074DA  6E02               	movwf	putrsXLCD@buffer,c
  1067  0074DC  0E7F               	movlw	high STR_6
  1068  0074DE  6E03               	movwf	putrsXLCD@buffer+1,c
  1069  0074E0  ECF7  F030         	call	_putrsXLCD	;wreg free
  1070                           
  1071                           ;Programa_principal.c: 67: _delay((unsigned long)((100)*(20000000L/4000.0)));
  1072  0074E4  0E03               	movlw	3
  1073  0074E6  6E4E               	movwf	(??_main+1)& (0+255),c
  1074  0074E8  0E8A               	movlw	138
  1075  0074EA  6E4D               	movwf	??_main& (0+255),c
  1076  0074EC  0E56               	movlw	86
  1077  0074EE                     u3267:
  1078  0074EE  2EE8               	decfsz	wreg,f,c
  1079  0074F0  D7FE               	bra	u3267
  1080  0074F2  2E4D               	decfsz	??_main& (0+255),f,c
  1081  0074F4  D7FC               	bra	u3267
  1082  0074F6  2E4E               	decfsz	(??_main+1)& (0+255),f,c
  1083  0074F8  D7FA               	bra	u3267
  1084                           
  1085                           ;Programa_principal.c: 68: LCD_gotoXY(1,0);
  1086  0074FA  0E00               	movlw	0
  1087  0074FC  6E03               	movwf	LCD_gotoXY@x+1,c
  1088  0074FE  0E01               	movlw	1
  1089  007500  6E02               	movwf	LCD_gotoXY@x,c
  1090  007502  0E00               	movlw	0
  1091  007504  6E05               	movwf	LCD_gotoXY@y+1,c
  1092  007506  0E00               	movlw	0
  1093  007508  6E04               	movwf	LCD_gotoXY@y,c
  1094  00750A  ECDB  F02F         	call	_LCD_gotoXY	;wreg free
  1095                           
  1096                           ;Programa_principal.c: 69: putrsXLCD("VOLTAJE ES:");
  1097  00750E  0EEE               	movlw	low STR_7
  1098  007510  6E02               	movwf	putrsXLCD@buffer,c
  1099  007512  0E7F               	movlw	high STR_7
  1100  007514  6E03               	movwf	putrsXLCD@buffer+1,c
  1101  007516  ECF7  F030         	call	_putrsXLCD	;wreg free
  1102                           
  1103                           ;Programa_principal.c: 70: valor = ADC_read(0);
  1104  00751A  0E00               	movlw	0
  1105  00751C  EC35  F030         	call	_ADC_read
  1106  007520  C001  F052         	movff	?_ADC_read,_valor
  1107  007524  C002  F053         	movff	?_ADC_read+1,_valor+1
  1108                           
  1109                           ;Programa_principal.c: 71: voltaje = (valor*5.0)/1023;
  1110  007528  0E00               	movlw	0
  1111  00752A  6E18               	movwf	___ftmul@f2,c
  1112  00752C  0EA0               	movlw	160
  1113  00752E  6E19               	movwf	___ftmul@f2+1,c
  1114  007530  0E40               	movlw	64
  1115  007532  6E1A               	movwf	___ftmul@f2+2,c
  1116  007534  C052  F009         	movff	_valor,___lwtoft@c
  1117  007538  C053  F00A         	movff	_valor+1,___lwtoft@c+1
  1118  00753C  ECFE  F02F         	call	___lwtoft	;wreg free
  1119  007540  C009  F015         	movff	?___lwtoft,___ftmul@f1
  1120  007544  C00A  F016         	movff	?___lwtoft+1,___ftmul@f1+1
  1121  007548  C00B  F017         	movff	?___lwtoft+2,___ftmul@f1+2
  1122  00754C  EC1F  F034         	call	___ftmul	;wreg free
  1123  007550  C015  F024         	movff	?___ftmul,___ftdiv@f1
  1124  007554  C016  F025         	movff	?___ftmul+1,___ftdiv@f1+1
  1125  007558  C017  F026         	movff	?___ftmul+2,___ftdiv@f1+2
  1126  00755C  0EC0               	movlw	192
  1127  00755E  6E27               	movwf	___ftdiv@f2,c
  1128  007560  0E7F               	movlw	127
  1129  007562  6E28               	movwf	___ftdiv@f2+1,c
  1130  007564  0E44               	movlw	68
  1131  007566  6E29               	movwf	___ftdiv@f2+2,c
  1132  007568  EC32  F033         	call	___ftdiv	;wreg free
  1133  00756C  C024  F04F         	movff	?___ftdiv,_voltaje
  1134  007570  C025  F050         	movff	?___ftdiv+1,_voltaje+1
  1135  007574  C026  F051         	movff	?___ftdiv+2,_voltaje+2
  1136                           
  1137                           ;Programa_principal.c: 72: LCD_gotoXY(1,12);
  1138  007578  0E00               	movlw	0
  1139  00757A  6E03               	movwf	LCD_gotoXY@x+1,c
  1140  00757C  0E01               	movlw	1
  1141  00757E  6E02               	movwf	LCD_gotoXY@x,c
  1142  007580  0E00               	movlw	0
  1143  007582  6E05               	movwf	LCD_gotoXY@y+1,c
  1144  007584  0E0C               	movlw	12
  1145  007586  6E04               	movwf	LCD_gotoXY@y,c
  1146  007588  ECDB  F02F         	call	_LCD_gotoXY	;wreg free
  1147                           
  1148                           ;Programa_principal.c: 73: sprintf(datos,"%.2f",voltaje);
  1149  00758C  0E77               	movlw	low _datos
  1150  00758E  6E40               	movwf	sprintf@sp,c
  1151  007590  0E00               	movlw	high _datos
  1152  007592  6E41               	movwf	sprintf@sp+1,c
  1153  007594  0EFA               	movlw	low STR_8
  1154  007596  6E42               	movwf	sprintf@f,c
  1155  007598  0E7F               	movlw	high STR_8
  1156  00759A  6E43               	movwf	sprintf@f+1,c
  1157  00759C  C04F  F044         	movff	_voltaje,?_sprintf+4
  1158  0075A0  C050  F045         	movff	_voltaje+1,?_sprintf+5
  1159  0075A4  C051  F046         	movff	_voltaje+2,?_sprintf+6
  1160  0075A8  ECFC  F03B         	call	_sprintf	;wreg free
  1161                           
  1162                           ;Programa_principal.c: 74: putrsXLCD(datos);
  1163  0075AC  0E77               	movlw	low _datos
  1164  0075AE  6E02               	movwf	putrsXLCD@buffer,c
  1165  0075B0  0E00               	movlw	high _datos
  1166  0075B2  6E03               	movwf	putrsXLCD@buffer+1,c
  1167  0075B4  ECF7  F030         	call	_putrsXLCD	;wreg free
  1168                           
  1169                           ;Programa_principal.c: 75: _delay((unsigned long)((100)*(20000000L/4000.0)));
  1170  0075B8  0E03               	movlw	3
  1171  0075BA  6E4E               	movwf	(??_main+1)& (0+255),c
  1172  0075BC  0E8A               	movlw	138
  1173  0075BE  6E4D               	movwf	??_main& (0+255),c
  1174  0075C0  0E56               	movlw	86
  1175  0075C2                     u3277:
  1176  0075C2  2EE8               	decfsz	wreg,f,c
  1177  0075C4  D7FE               	bra	u3277
  1178  0075C6  2E4D               	decfsz	??_main& (0+255),f,c
  1179  0075C8  D7FC               	bra	u3277
  1180  0075CA  2E4E               	decfsz	(??_main+1)& (0+255),f,c
  1181  0075CC  D7FA               	bra	u3277
  1182                           
  1183                           ;Programa_principal.c: 76: if(PORTBbits.RB0 == 1)break;
  1184  0075CE  B081               	btfsc	3969,0,c	;volatile
  1185  0075D0  D720               	goto	l38
  1186  0075D2  D778               	goto	u3090
  1187  0075D4                     l39:
  1188                           
  1189                           ;Programa_principal.c: 79: else if(PORTBbits.RB1 == 0){
  1190  0075D4  B281               	btfsc	3969,1,c	;volatile
  1191  0075D6  D088               	goto	l45
  1192  0075D8                     u3110:
  1193                           
  1194                           ;Programa_principal.c: 81: LCD_gotoXY(0,0);
  1195                           
  1196                           ;Programa_principal.c: 80: while(1){
  1197  0075D8  0E00               	movlw	0
  1198  0075DA  6E03               	movwf	LCD_gotoXY@x+1,c
  1199  0075DC  0E00               	movlw	0
  1200  0075DE  6E02               	movwf	LCD_gotoXY@x,c
  1201  0075E0  0E00               	movlw	0
  1202  0075E2  6E05               	movwf	LCD_gotoXY@y+1,c
  1203  0075E4  0E00               	movlw	0
  1204  0075E6  6E04               	movwf	LCD_gotoXY@y,c
  1205  0075E8  ECDB  F02F         	call	_LCD_gotoXY	;wreg free
  1206                           
  1207                           ;Programa_principal.c: 82: putrsXLCD("  -  ADC 2  -  ");
  1208  0075EC  0E97               	movlw	low STR_9
  1209  0075EE  6E02               	movwf	putrsXLCD@buffer,c
  1210  0075F0  0E7F               	movlw	high STR_9
  1211  0075F2  6E03               	movwf	putrsXLCD@buffer+1,c
  1212  0075F4  ECF7  F030         	call	_putrsXLCD	;wreg free
  1213                           
  1214                           ;Programa_principal.c: 83: _delay((unsigned long)((100)*(20000000L/4000.0)));
  1215  0075F8  0E03               	movlw	3
  1216  0075FA  6E4E               	movwf	(??_main+1)& (0+255),c
  1217  0075FC  0E8A               	movlw	138
  1218  0075FE  6E4D               	movwf	??_main& (0+255),c
  1219  007600  0E56               	movlw	86
  1220  007602                     u3287:
  1221  007602  2EE8               	decfsz	wreg,f,c
  1222  007604  D7FE               	bra	u3287
  1223  007606  2E4D               	decfsz	??_main& (0+255),f,c
  1224  007608  D7FC               	bra	u3287
  1225  00760A  2E4E               	decfsz	(??_main+1)& (0+255),f,c
  1226  00760C  D7FA               	bra	u3287
  1227                           
  1228                           ;Programa_principal.c: 84: LCD_gotoXY(1,0);
  1229  00760E  0E00               	movlw	0
  1230  007610  6E03               	movwf	LCD_gotoXY@x+1,c
  1231  007612  0E01               	movlw	1
  1232  007614  6E02               	movwf	LCD_gotoXY@x,c
  1233  007616  0E00               	movlw	0
  1234  007618  6E05               	movwf	LCD_gotoXY@y+1,c
  1235  00761A  0E00               	movlw	0
  1236  00761C  6E04               	movwf	LCD_gotoXY@y,c
  1237  00761E  ECDB  F02F         	call	_LCD_gotoXY	;wreg free
  1238                           
  1239                           ;Programa_principal.c: 85: putrsXLCD("VOLTAJE ES:");
  1240  007622  0EEE               	movlw	low STR_7
  1241  007624  6E02               	movwf	putrsXLCD@buffer,c
  1242  007626  0E7F               	movlw	high STR_7
  1243  007628  6E03               	movwf	putrsXLCD@buffer+1,c
  1244  00762A  ECF7  F030         	call	_putrsXLCD	;wreg free
  1245                           
  1246                           ;Programa_principal.c: 86: valor = ADC_read(1);
  1247  00762E  0E01               	movlw	1
  1248  007630  EC35  F030         	call	_ADC_read
  1249  007634  C001  F052         	movff	?_ADC_read,_valor
  1250  007638  C002  F053         	movff	?_ADC_read+1,_valor+1
  1251                           
  1252                           ;Programa_principal.c: 87: voltaje = (valor*5.0)/1023;
  1253  00763C  0E00               	movlw	0
  1254  00763E  6E18               	movwf	___ftmul@f2,c
  1255  007640  0EA0               	movlw	160
  1256  007642  6E19               	movwf	___ftmul@f2+1,c
  1257  007644  0E40               	movlw	64
  1258  007646  6E1A               	movwf	___ftmul@f2+2,c
  1259  007648  C052  F009         	movff	_valor,___lwtoft@c
  1260  00764C  C053  F00A         	movff	_valor+1,___lwtoft@c+1
  1261  007650  ECFE  F02F         	call	___lwtoft	;wreg free
  1262  007654  C009  F015         	movff	?___lwtoft,___ftmul@f1
  1263  007658  C00A  F016         	movff	?___lwtoft+1,___ftmul@f1+1
  1264  00765C  C00B  F017         	movff	?___lwtoft+2,___ftmul@f1+2
  1265  007660  EC1F  F034         	call	___ftmul	;wreg free
  1266  007664  C015  F024         	movff	?___ftmul,___ftdiv@f1
  1267  007668  C016  F025         	movff	?___ftmul+1,___ftdiv@f1+1
  1268  00766C  C017  F026         	movff	?___ftmul+2,___ftdiv@f1+2
  1269  007670  0EC0               	movlw	192
  1270  007672  6E27               	movwf	___ftdiv@f2,c
  1271  007674  0E7F               	movlw	127
  1272  007676  6E28               	movwf	___ftdiv@f2+1,c
  1273  007678  0E44               	movlw	68
  1274  00767A  6E29               	movwf	___ftdiv@f2+2,c
  1275  00767C  EC32  F033         	call	___ftdiv	;wreg free
  1276  007680  C024  F04F         	movff	?___ftdiv,_voltaje
  1277  007684  C025  F050         	movff	?___ftdiv+1,_voltaje+1
  1278  007688  C026  F051         	movff	?___ftdiv+2,_voltaje+2
  1279                           
  1280                           ;Programa_principal.c: 88: LCD_gotoXY(1,12);
  1281  00768C  0E00               	movlw	0
  1282  00768E  6E03               	movwf	LCD_gotoXY@x+1,c
  1283  007690  0E01               	movlw	1
  1284  007692  6E02               	movwf	LCD_gotoXY@x,c
  1285  007694  0E00               	movlw	0
  1286  007696  6E05               	movwf	LCD_gotoXY@y+1,c
  1287  007698  0E0C               	movlw	12
  1288  00769A  6E04               	movwf	LCD_gotoXY@y,c
  1289  00769C  ECDB  F02F         	call	_LCD_gotoXY	;wreg free
  1290                           
  1291                           ;Programa_principal.c: 89: sprintf(datos,"%.2f",voltaje);
  1292  0076A0  0E77               	movlw	low _datos
  1293  0076A2  6E40               	movwf	sprintf@sp,c
  1294  0076A4  0E00               	movlw	high _datos
  1295  0076A6  6E41               	movwf	sprintf@sp+1,c
  1296  0076A8  0EFA               	movlw	low STR_8
  1297  0076AA  6E42               	movwf	sprintf@f,c
  1298  0076AC  0E7F               	movlw	high STR_8
  1299  0076AE  6E43               	movwf	sprintf@f+1,c
  1300  0076B0  C04F  F044         	movff	_voltaje,?_sprintf+4
  1301  0076B4  C050  F045         	movff	_voltaje+1,?_sprintf+5
  1302  0076B8  C051  F046         	movff	_voltaje+2,?_sprintf+6
  1303  0076BC  ECFC  F03B         	call	_sprintf	;wreg free
  1304                           
  1305                           ;Programa_principal.c: 90: putrsXLCD(datos);
  1306  0076C0  0E77               	movlw	low _datos
  1307  0076C2  6E02               	movwf	putrsXLCD@buffer,c
  1308  0076C4  0E00               	movlw	high _datos
  1309  0076C6  6E03               	movwf	putrsXLCD@buffer+1,c
  1310  0076C8  ECF7  F030         	call	_putrsXLCD	;wreg free
  1311                           
  1312                           ;Programa_principal.c: 91: _delay((unsigned long)((100)*(20000000L/4000.0)));
  1313  0076CC  0E03               	movlw	3
  1314  0076CE  6E4E               	movwf	(??_main+1)& (0+255),c
  1315  0076D0  0E8A               	movlw	138
  1316  0076D2  6E4D               	movwf	??_main& (0+255),c
  1317  0076D4  0E56               	movlw	86
  1318  0076D6                     u3297:
  1319  0076D6  2EE8               	decfsz	wreg,f,c
  1320  0076D8  D7FE               	bra	u3297
  1321  0076DA  2E4D               	decfsz	??_main& (0+255),f,c
  1322  0076DC  D7FC               	bra	u3297
  1323  0076DE  2E4E               	decfsz	(??_main+1)& (0+255),f,c
  1324  0076E0  D7FA               	bra	u3297
  1325                           
  1326                           ;Programa_principal.c: 92: if(PORTBbits.RB1 == 1)break;
  1327  0076E2  B281               	btfsc	3969,1,c	;volatile
  1328  0076E4  D696               	goto	l38
  1329  0076E6  D778               	goto	u3110
  1330  0076E8                     l45:
  1331                           
  1332                           ;Programa_principal.c: 95: else if(PORTBbits.RB2 == 0){
  1333  0076E8  B481               	btfsc	3969,2,c	;volatile
  1334  0076EA  D693               	goto	l38
  1335                           
  1336                           ;Programa_principal.c: 97: LCD_gotoXY(0,0);
  1337                           
  1338                           ;Programa_principal.c: 96: while(1){
  1339  0076EC  0E00               	movlw	0
  1340  0076EE  6E03               	movwf	LCD_gotoXY@x+1,c
  1341  0076F0  0E00               	movlw	0
  1342  0076F2  6E02               	movwf	LCD_gotoXY@x,c
  1343  0076F4  0E00               	movlw	0
  1344  0076F6  6E05               	movwf	LCD_gotoXY@y+1,c
  1345  0076F8  0E00               	movlw	0
  1346  0076FA  6E04               	movwf	LCD_gotoXY@y,c
  1347  0076FC  ECDB  F02F         	call	_LCD_gotoXY	;wreg free
  1348                           
  1349                           ;Programa_principal.c: 98: putrsXLCD("  -  ADC 3  -  ");
  1350  007700  0EA7               	movlw	low STR_12
  1351  007702  6E02               	movwf	putrsXLCD@buffer,c
  1352  007704  0E7F               	movlw	high STR_12
  1353  007706  6E03               	movwf	putrsXLCD@buffer+1,c
  1354  007708  ECF7  F030         	call	_putrsXLCD	;wreg free
  1355                           
  1356                           ;Programa_principal.c: 99: _delay((unsigned long)((100)*(20000000L/4000.0)));
  1357  00770C  0E03               	movlw	3
  1358  00770E  6E4E               	movwf	(??_main+1)& (0+255),c
  1359  007710  0E8A               	movlw	138
  1360  007712  6E4D               	movwf	??_main& (0+255),c
  1361  007714  0E56               	movlw	86
  1362  007716                     u3307:
  1363  007716  2EE8               	decfsz	wreg,f,c
  1364  007718  D7FE               	bra	u3307
  1365  00771A  2E4D               	decfsz	??_main& (0+255),f,c
  1366  00771C  D7FC               	bra	u3307
  1367  00771E  2E4E               	decfsz	(??_main+1)& (0+255),f,c
  1368  007720  D7FA               	bra	u3307
  1369                           
  1370                           ;Programa_principal.c: 100: LCD_gotoXY(1,0);
  1371  007722  0E00               	movlw	0
  1372  007724  6E03               	movwf	LCD_gotoXY@x+1,c
  1373  007726  0E01               	movlw	1
  1374  007728  6E02               	movwf	LCD_gotoXY@x,c
  1375  00772A  0E00               	movlw	0
  1376  00772C  6E05               	movwf	LCD_gotoXY@y+1,c
  1377  00772E  0E00               	movlw	0
  1378  007730  6E04               	movwf	LCD_gotoXY@y,c
  1379  007732  ECDB  F02F         	call	_LCD_gotoXY	;wreg free
  1380                           
  1381                           ;Programa_principal.c: 101: putrsXLCD("VOLTAJE ES:");
  1382  007736  0EEE               	movlw	low STR_7
  1383  007738  6E02               	movwf	putrsXLCD@buffer,c
  1384  00773A  0E7F               	movlw	high STR_7
  1385  00773C  6E03               	movwf	putrsXLCD@buffer+1,c
  1386  00773E  ECF7  F030         	call	_putrsXLCD	;wreg free
  1387                           
  1388                           ;Programa_principal.c: 102: valor = ADC_read(2);
  1389  007742  0E02               	movlw	2
  1390  007744  EC35  F030         	call	_ADC_read
  1391  007748  C001  F052         	movff	?_ADC_read,_valor
  1392  00774C  C002  F053         	movff	?_ADC_read+1,_valor+1
  1393                           
  1394                           ;Programa_principal.c: 103: voltaje = (valor*5.0)/1023;
  1395  007750  0E00               	movlw	0
  1396  007752  6E18               	movwf	___ftmul@f2,c
  1397  007754  0EA0               	movlw	160
  1398  007756  6E19               	movwf	___ftmul@f2+1,c
  1399  007758  0E40               	movlw	64
  1400  00775A  6E1A               	movwf	___ftmul@f2+2,c
  1401  00775C  C052  F009         	movff	_valor,___lwtoft@c
  1402  007760  C053  F00A         	movff	_valor+1,___lwtoft@c+1
  1403  007764  ECFE  F02F         	call	___lwtoft	;wreg free
  1404  007768  C009  F015         	movff	?___lwtoft,___ftmul@f1
  1405  00776C  C00A  F016         	movff	?___lwtoft+1,___ftmul@f1+1
  1406  007770  C00B  F017         	movff	?___lwtoft+2,___ftmul@f1+2
  1407  007774  EC1F  F034         	call	___ftmul	;wreg free
  1408  007778  C015  F024         	movff	?___ftmul,___ftdiv@f1
  1409  00777C  C016  F025         	movff	?___ftmul+1,___ftdiv@f1+1
  1410  007780  C017  F026         	movff	?___ftmul+2,___ftdiv@f1+2
  1411  007784  0EC0               	movlw	192
  1412  007786  6E27               	movwf	___ftdiv@f2,c
  1413  007788  0E7F               	movlw	127
  1414  00778A  6E28               	movwf	___ftdiv@f2+1,c
  1415  00778C  0E44               	movlw	68
  1416  00778E  6E29               	movwf	___ftdiv@f2+2,c
  1417  007790  EC32  F033         	call	___ftdiv	;wreg free
  1418  007794  C024  F04F         	movff	?___ftdiv,_voltaje
  1419  007798  C025  F050         	movff	?___ftdiv+1,_voltaje+1
  1420  00779C  C026  F051         	movff	?___ftdiv+2,_voltaje+2
  1421                           
  1422                           ;Programa_principal.c: 104: LCD_gotoXY(1,12);
  1423  0077A0  0E00               	movlw	0
  1424  0077A2  6E03               	movwf	LCD_gotoXY@x+1,c
  1425  0077A4  0E01               	movlw	1
  1426  0077A6  6E02               	movwf	LCD_gotoXY@x,c
  1427  0077A8  0E00               	movlw	0
  1428  0077AA  6E05               	movwf	LCD_gotoXY@y+1,c
  1429  0077AC  0E0C               	movlw	12
  1430  0077AE  6E04               	movwf	LCD_gotoXY@y,c
  1431  0077B0  ECDB  F02F         	call	_LCD_gotoXY	;wreg free
  1432                           
  1433                           ;Programa_principal.c: 105: sprintf(datos,"%.2f",voltaje);
  1434  0077B4  0E77               	movlw	low _datos
  1435  0077B6  6E40               	movwf	sprintf@sp,c
  1436  0077B8  0E00               	movlw	high _datos
  1437  0077BA  6E41               	movwf	sprintf@sp+1,c
  1438  0077BC  0EFA               	movlw	low STR_8
  1439  0077BE  6E42               	movwf	sprintf@f,c
  1440  0077C0  0E7F               	movlw	high STR_8
  1441  0077C2  6E43               	movwf	sprintf@f+1,c
  1442  0077C4  C04F  F044         	movff	_voltaje,?_sprintf+4
  1443  0077C8  C050  F045         	movff	_voltaje+1,?_sprintf+5
  1444  0077CC  C051  F046         	movff	_voltaje+2,?_sprintf+6
  1445  0077D0  ECFC  F03B         	call	_sprintf	;wreg free
  1446                           
  1447                           ;Programa_principal.c: 106: putrsXLCD(datos);
  1448  0077D4  0E77               	movlw	low _datos
  1449  0077D6  6E02               	movwf	putrsXLCD@buffer,c
  1450  0077D8  0E00               	movlw	high _datos
  1451  0077DA  6E03               	movwf	putrsXLCD@buffer+1,c
  1452  0077DC  ECF7  F030         	call	_putrsXLCD	;wreg free
  1453                           
  1454                           ;Programa_principal.c: 107: _delay((unsigned long)((100)*(20000000L/4000.0)));
  1455  0077E0  0E03               	movlw	3
  1456  0077E2  6E4E               	movwf	(??_main+1)& (0+255),c
  1457  0077E4  0E8A               	movlw	138
  1458  0077E6  6E4D               	movwf	??_main& (0+255),c
  1459  0077E8  0E56               	movlw	86
  1460  0077EA                     u3317:
  1461  0077EA  2EE8               	decfsz	wreg,f,c
  1462  0077EC  D7FE               	bra	u3317
  1463  0077EE  2E4D               	decfsz	??_main& (0+255),f,c
  1464  0077F0  D7FC               	bra	u3317
  1465  0077F2  2E4E               	decfsz	(??_main+1)& (0+255),f,c
  1466  0077F4  D7FA               	bra	u3317
  1467  0077F6  D778               	goto	l45
  1468  0077F8                     __end_of_main:
  1469                           	opt stack 0
  1470                           tblptru	equ	0xFF8
  1471                           postinc0	equ	0xFEE
  1472                           wreg	equ	0xFE8
  1473                           
  1474 ;; *************** function _sprintf *****************
  1475 ;; Defined at:
  1476 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  1477 ;; Parameters:    Size  Location     Type
  1478 ;;  sp              2   63[COMRAM] PTR unsigned char 
  1479 ;;		 -> datos(20), 
  1480 ;;  f               2   65[COMRAM] PTR const unsigned char 
  1481 ;;		 -> STR_14(5), STR_11(5), STR_8(5), 
  1482 ;; Auto vars:     Size  Location     Type
  1483 ;;  tmpval          4   13[BANK0 ] struct .
  1484 ;;  val             4    7[BANK0 ] unsigned long 
  1485 ;;  fval            3   19[BANK0 ] unsigned long 
  1486 ;;  cp              3    0        PTR const unsigned char 
  1487 ;;  prec            2   17[BANK0 ] int 
  1488 ;;  exp             2   11[BANK0 ] int 
  1489 ;;  flag            2    5[BANK0 ] unsigned short 
  1490 ;;  ap              2    3[BANK0 ] PTR void [1]
  1491 ;;		 -> ?_sprintf(2), 
  1492 ;;  len             2    0        unsigned int 
  1493 ;;  width           2    0        int 
  1494 ;;  c               1   22[BANK0 ] char 
  1495 ;;  d               1    0        unsigned char 
  1496 ;; Return value:  Size  Location     Type
  1497 ;;                  2   63[COMRAM] int 
  1498 ;; Registers used:
  1499 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1500 ;; Tracked objects:
  1501 ;;		On entry : 0/0
  1502 ;;		On exit  : 0/0
  1503 ;;		Unchanged: 0/0
  1504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1505 ;;      Params:         7       0       0       0       0       0       0       0       0
  1506 ;;      Locals:         0      23       0       0       0       0       0       0       0
  1507 ;;      Temps:          6       0       0       0       0       0       0       0       0
  1508 ;;      Totals:        13      23       0       0       0       0       0       0       0
  1509 ;;Total ram usage:       36 bytes
  1510 ;; Hardware stack levels used:    1
  1511 ;; Hardware stack levels required when called:    3
  1512 ;; This function calls:
  1513 ;;		___awdiv
  1514 ;;		___ftadd
  1515 ;;		___ftge
  1516 ;;		___ftmul
  1517 ;;		___ftneg
  1518 ;;		___ftsub
  1519 ;;		___fttol
  1520 ;;		___lldiv
  1521 ;;		___llmod
  1522 ;;		___lltoft
  1523 ;;		___wmul
  1524 ;;		__div_to_l_
  1525 ;;		__tdiv_to_l_
  1526 ;;		_fround
  1527 ;;		_isdigit
  1528 ;;		_scale
  1529 ;; This function is called by:
  1530 ;;		_main
  1531 ;; This function uses a non-reentrant model
  1532 ;;
  1533                           
  1534                           	psect	text1
  1535  0077F8                     __ptext1:
  1536                           	opt stack 0
  1537  0077F8                     _sprintf:
  1538                           	opt stack 27
  1539                           
  1540                           ;doprnt.c: 494: va_list ap;
  1541                           ;doprnt.c: 499: signed char c;
  1542                           ;doprnt.c: 501: int width;
  1543                           ;doprnt.c: 504: int prec;
  1544                           ;doprnt.c: 508: unsigned short flag;
  1545                           ;doprnt.c: 515: char d;
  1546                           ;doprnt.c: 516: double fval;
  1547                           ;doprnt.c: 517: int exp;
  1548                           ;doprnt.c: 523: union {
  1549                           ;doprnt.c: 524: unsigned long vd;
  1550                           ;doprnt.c: 525: double integ;
  1551                           ;doprnt.c: 526: } tmpval;
  1552                           ;doprnt.c: 528: unsigned long val;
  1553                           ;doprnt.c: 529: unsigned len;
  1554                           ;doprnt.c: 530: const char * cp;
  1555                           ;doprnt.c: 533: *ap = __va_start();
  1556                           
  1557                           ;incstack = 0
  1558  0077F8  0E44               	movlw	low (?_sprintf+4)
  1559  0077FA  0100               	movlb	0	; () banked
  1560  0077FC  6F63               	movwf	sprintf@ap& (0+255),b
  1561  0077FE  0E00               	movlw	high (?_sprintf+4)
  1562  007800  6F64               	movwf	(sprintf@ap+1)& (0+255),b
  1563                           
  1564                           ;doprnt.c: 536: while(c = *f++) {
  1565  007802  D36B               	goto	l289
  1566  007804                     
  1567                           ; BSR set to: 0
  1568                           ;doprnt.c: 538: if(c != '%')
  1569                           
  1570                           ; BSR set to: 0
  1571  007804  0E25               	movlw	37
  1572  007806  1976               	xorwf	sprintf@c& (0+255),w,b
  1573  007808  B4D8               	btfsc	status,2,c
  1574  00780A  D007               	goto	l235
  1575                           
  1576                           ; BSR set to: 0
  1577                           ;doprnt.c: 540: {
  1578                           ;doprnt.c: 541: ((*sp++ = (c)));
  1579  00780C  C040  FFD9         	movff	sprintf@sp,fsr2l
  1580  007810  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  1581  007814  C076  FFDF         	movff	sprintf@c,indf2
  1582  007818  D35E               	goto	l3192
  1583  00781A                     l235:
  1584                           
  1585                           ; BSR set to: 0
  1586                           ;doprnt.c: 543: }
  1587                           ;doprnt.c: 548: flag = 0;
  1588                           
  1589                           ; BSR set to: 0
  1590  00781A  0E00               	movlw	0
  1591  00781C  6F66               	movwf	(sprintf@flag+1)& (0+255),b
  1592  00781E  0E00               	movlw	0
  1593  007820  6F65               	movwf	sprintf@flag& (0+255),b
  1594                           
  1595                           ; BSR set to: 0
  1596                           ;doprnt.c: 611: if(*f == '.') {
  1597  007822  C042  FFF6         	movff	sprintf@f,tblptrl
  1598  007826  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1599  00782A                     	if	0	;tblptru may be non-zero
  1600  00782A                     	endif
  1601  00782A                     	if	0	;tblptru may be non-zero
  1602  00782A                     	endif
  1603  00782A  0008               	tblrd		*
  1604  00782C  50F5               	movf	tablat,w,c
  1605  00782E  0A2E               	xorlw	46
  1606  007830  A4D8               	btfss	status,2,c
  1607  007832  D02F               	goto	l236
  1608                           
  1609                           ; BSR set to: 0
  1610                           ;doprnt.c: 612: flag |= 0x4000;
  1611  007834  8D66               	bsf	(sprintf@flag+1)& (0+255),6,b
  1612                           
  1613                           ;doprnt.c: 613: f++;
  1614  007836  4A42               	infsnz	sprintf@f,f,c
  1615  007838  2A43               	incf	sprintf@f+1,f,c
  1616                           
  1617                           ; BSR set to: 0
  1618                           ;doprnt.c: 620: {
  1619                           ;doprnt.c: 621: prec = 0;
  1620  00783A  0E00               	movlw	0
  1621  00783C  6F72               	movwf	(sprintf@prec+1)& (0+255),b
  1622  00783E  0E00               	movlw	0
  1623  007840  6F71               	movwf	sprintf@prec& (0+255),b
  1624                           
  1625                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  1626  007842  D01C               	goto	l237
  1627  007844                     
  1628                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  1629                           
  1630                           ; BSR set to: 0
  1631  007844  C071  F00F         	movff	sprintf@prec,___wmul@multiplier
  1632  007848  C072  F010         	movff	sprintf@prec+1,___wmul@multiplier+1
  1633  00784C  0E00               	movlw	0
  1634  00784E  6E12               	movwf	___wmul@multiplicand+1,c
  1635  007850  0E0A               	movlw	10
  1636  007852  6E11               	movwf	___wmul@multiplicand,c
  1637  007854  EC22  F030         	call	___wmul	;wreg free
  1638  007858  C042  FFF6         	movff	sprintf@f,tblptrl
  1639  00785C  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1640  007860                     	if	0	;tblptru may be non-zero
  1641  007860                     	endif
  1642  007860                     	if	0	;tblptru may be non-zero
  1643  007860                     	endif
  1644  007860  0008               	tblrd		*
  1645  007862  50F5               	movf	tablat,w,c
  1646  007864  260F               	addwf	?___wmul,f,c
  1647  007866  0E00               	movlw	0
  1648  007868  2210               	addwfc	?___wmul+1,f,c
  1649  00786A  0ED0               	movlw	208
  1650  00786C  240F               	addwf	?___wmul,w,c
  1651  00786E  0100               	movlb	0	; () banked
  1652  007870  6F71               	movwf	sprintf@prec& (0+255),b
  1653  007872  0EFF               	movlw	255
  1654  007874  2010               	addwfc	?___wmul+1,w,c
  1655  007876  6F72               	movwf	(sprintf@prec+1)& (0+255),b
  1656                           
  1657                           ; BSR set to: 0
  1658  007878  4A42               	infsnz	sprintf@f,f,c
  1659  00787A  2A43               	incf	sprintf@f+1,f,c
  1660  00787C                     l237:
  1661                           
  1662                           ; BSR set to: 0
  1663                           
  1664                           ; BSR set to: 0
  1665  00787C  C042  FFF6         	movff	sprintf@f,tblptrl
  1666  007880  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1667  007884                     	if	0	;tblptru may be non-zero
  1668  007884                     	endif
  1669  007884                     	if	0	;tblptru may be non-zero
  1670  007884                     	endif
  1671  007884  0008               	tblrd		*
  1672  007886  50F5               	movf	tablat,w,c
  1673  007888  ECBC  F02F         	call	_isdigit
  1674  00788C  A0D8               	btfss	status,0,c
  1675  00788E  D00A               	goto	l241
  1676  007890  D7D9               	goto	l238
  1677  007892                     l236:
  1678                           
  1679                           ;doprnt.c: 626: prec = 0;
  1680  007892  0E00               	movlw	0
  1681  007894  0100               	movlb	0	; () banked
  1682  007896  6F72               	movwf	(sprintf@prec+1)& (0+255),b
  1683  007898  0E00               	movlw	0
  1684  00789A  6F71               	movwf	sprintf@prec& (0+255),b
  1685                           
  1686                           ; BSR set to: 0
  1687                           ;doprnt.c: 628: flag |= 0x1000;
  1688  00789C  8966               	bsf	(sprintf@flag+1)& (0+255),4,b
  1689                           
  1690                           ; BSR set to: 0
  1691                           ;doprnt.c: 630: }
  1692                           ;doprnt.c: 635: switch(c = *f++) {
  1693  00789E  D002               	goto	l241
  1694  0078A0                     
  1695                           ; BSR set to: 0
  1696                           ;doprnt.c: 663: flag |= 0x400;
  1697                           
  1698                           ; BSR set to: 0
  1699  0078A0  8566               	bsf	(sprintf@flag+1)& (0+255),2,b
  1700                           
  1701                           ;doprnt.c: 664: break;
  1702  0078A2  D012               	goto	l245
  1703  0078A4                     l241:
  1704                           
  1705                           ; BSR set to: 0
  1706  0078A4  C042  FFF6         	movff	sprintf@f,tblptrl
  1707  0078A8  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1708  0078AC  4A42               	infsnz	sprintf@f,f,c
  1709  0078AE  2A43               	incf	sprintf@f+1,f,c
  1710  0078B0                     	if	0	;tblptru may be non-zero
  1711  0078B0                     	endif
  1712  0078B0                     	if	0	;tblptru may be non-zero
  1713  0078B0                     	endif
  1714  0078B0  0008               	tblrd		*
  1715  0078B2  CFF5 F076          	movff	tablat,sprintf@c
  1716  0078B6  0100               	movlb	0	; () banked
  1717  0078B8  5176               	movf	sprintf@c& (0+255),w,b
  1718                           
  1719                           ; Switch size 1, requested type "space"
  1720                           ; Number of cases is 2, Range of values is 0 to 102
  1721                           ; switch strategies available:
  1722                           ; Name         Instructions Cycles
  1723                           ; simple_byte            7     4 (average)
  1724                           ;	Chosen strategy is simple_byte
  1725  0078BA  0A00               	xorlw	0	; case 0
  1726  0078BC  B4D8               	btfsc	status,2,c
  1727  0078BE  D319               	goto	u3030
  1728  0078C0  0A66               	xorlw	102	; case 102
  1729  0078C2  B4D8               	btfsc	status,2,c
  1730  0078C4  D7ED               	goto	l244
  1731  0078C6  D309               	goto	l289
  1732  0078C8                     l245:
  1733                           
  1734                           ; BSR set to: 0
  1735                           ;doprnt.c: 825: if(flag & (0x700)) {
  1736                           
  1737                           ; BSR set to: 0
  1738  0078C8  0E07               	movlw	7
  1739  0078CA  1566               	andwf	(sprintf@flag+1)& (0+255),w,b
  1740  0078CC  B4D8               	btfsc	status,2,c
  1741  0078CE  D2C9               	goto	l247
  1742                           
  1743                           ; BSR set to: 0
  1744                           ;doprnt.c: 827: if(flag & 0x1000)
  1745  0078D0  A966               	btfss	(sprintf@flag+1)& (0+255),4,b
  1746  0078D2  D004               	goto	l248
  1747                           
  1748                           ; BSR set to: 0
  1749                           ;doprnt.c: 829: prec = 6;
  1750  0078D4  0E00               	movlw	0
  1751  0078D6  6F72               	movwf	(sprintf@prec+1)& (0+255),b
  1752  0078D8  0E06               	movlw	6
  1753  0078DA  6F71               	movwf	sprintf@prec& (0+255),b
  1754  0078DC                     l248:
  1755                           
  1756                           ; BSR set to: 0
  1757                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  1758                           
  1759                           ; BSR set to: 0
  1760  0078DC  C063  FFD9         	movff	sprintf@ap,fsr2l
  1761  0078E0  C064  FFDA         	movff	sprintf@ap+1,fsr2h
  1762  0078E4  CFDE F073          	movff	postinc2,sprintf@fval
  1763  0078E8  CFDE F074          	movff	postinc2,sprintf@fval+1
  1764  0078EC  CFDD F075          	movff	postdec2,sprintf@fval+2
  1765                           
  1766                           ; BSR set to: 0
  1767  0078F0  0E03               	movlw	3
  1768  0078F2  2763               	addwf	sprintf@ap& (0+255),f,b
  1769  0078F4  0E00               	movlw	0
  1770  0078F6  2364               	addwfc	(sprintf@ap+1)& (0+255),f,b
  1771                           
  1772                           ; BSR set to: 0
  1773                           ;doprnt.c: 831: if(fval < 0.0) {
  1774  0078F8  AF75               	btfss	(sprintf@fval+2)& (0+255),7,b
  1775  0078FA  D011               	goto	l249
  1776                           
  1777                           ; BSR set to: 0
  1778                           ;doprnt.c: 832: fval = -fval;
  1779  0078FC  C073  F001         	movff	sprintf@fval,___ftneg@f1
  1780  007900  C074  F002         	movff	sprintf@fval+1,___ftneg@f1+1
  1781  007904  C075  F003         	movff	sprintf@fval+2,___ftneg@f1+2
  1782  007908  EC10  F030         	call	___ftneg	;wreg free
  1783  00790C  C001  F073         	movff	?___ftneg,sprintf@fval
  1784  007910  C002  F074         	movff	?___ftneg+1,sprintf@fval+1
  1785  007914  C003  F075         	movff	?___ftneg+2,sprintf@fval+2
  1786                           
  1787                           ;doprnt.c: 833: flag |= 0x03;
  1788  007918  0E03               	movlw	3
  1789  00791A  0100               	movlb	0	; () banked
  1790  00791C  1365               	iorwf	sprintf@flag& (0+255),f,b
  1791  00791E                     l249:
  1792                           
  1793                           ; BSR set to: 0
  1794                           ;doprnt.c: 834: }
  1795                           ;doprnt.c: 835: exp = 0;
  1796                           
  1797                           ; BSR set to: 0
  1798  00791E  0E00               	movlw	0
  1799  007920  6F6C               	movwf	(sprintf@exp+1)& (0+255),b
  1800  007922  0E00               	movlw	0
  1801  007924  6F6B               	movwf	sprintf@exp& (0+255),b
  1802                           
  1803                           ; BSR set to: 0
  1804                           ;doprnt.c: 836: if( fval!=0) {
  1805  007926  5173               	movf	sprintf@fval& (0+255),w,b
  1806  007928  1174               	iorwf	(sprintf@fval+1)& (0+255),w,b
  1807  00792A  1175               	iorwf	(sprintf@fval+2)& (0+255),w,b
  1808  00792C  B4D8               	btfsc	status,2,c
  1809  00792E  D086               	goto	l254
  1810                           
  1811                           ; BSR set to: 0
  1812                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  1813  007930  0E82               	movlw	130
  1814  007932  6E47               	movwf	??_sprintf& (0+255),c
  1815  007934  0EFF               	movlw	255
  1816  007936  6E48               	movwf	(??_sprintf+1)& (0+255),c
  1817  007938  C073  F049         	movff	sprintf@fval,??_sprintf+2
  1818  00793C  C074  F04A         	movff	sprintf@fval+1,??_sprintf+3
  1819  007940  C075  F04B         	movff	sprintf@fval+2,??_sprintf+4
  1820  007944  C076  F04C         	movff	sprintf@fval+3,??_sprintf+5
  1821  007948  0E10               	movlw	16
  1822  00794A  D005               	goto	u2780
  1823  00794C                     u2785:
  1824  00794C  90D8               	bcf	status,0,c
  1825  00794E  324C               	rrcf	??_sprintf+5,f,c
  1826  007950  324B               	rrcf	??_sprintf+4,f,c
  1827  007952  324A               	rrcf	??_sprintf+3,f,c
  1828  007954  3249               	rrcf	??_sprintf+2,f,c
  1829  007956                     u2780:
  1830  007956  2EE8               	decfsz	wreg,f,c
  1831  007958  D7F9               	goto	u2785
  1832  00795A  5049               	movf	??_sprintf+2,w,c
  1833  00795C  2447               	addwf	??_sprintf,w,c
  1834  00795E  6F6B               	movwf	sprintf@exp& (0+255),b
  1835  007960  0E00               	movlw	0
  1836  007962  2048               	addwfc	??_sprintf+1,w,c
  1837  007964  6F6C               	movwf	(sprintf@exp+1)& (0+255),b
  1838                           
  1839                           ; BSR set to: 0
  1840                           ;doprnt.c: 838: exp--;
  1841  007966  076B               	decf	sprintf@exp& (0+255),f,b
  1842  007968  A0D8               	btfss	status,0,c
  1843  00796A  076C               	decf	(sprintf@exp+1)& (0+255),f,b
  1844                           
  1845                           ; BSR set to: 0
  1846                           ;doprnt.c: 839: exp *= 3;
  1847  00796C  C06B  F00F         	movff	sprintf@exp,___wmul@multiplier
  1848  007970  C06C  F010         	movff	sprintf@exp+1,___wmul@multiplier+1
  1849  007974  0E00               	movlw	0
  1850  007976  6E12               	movwf	___wmul@multiplicand+1,c
  1851  007978  0E03               	movlw	3
  1852  00797A  6E11               	movwf	___wmul@multiplicand,c
  1853  00797C  EC22  F030         	call	___wmul	;wreg free
  1854  007980  C00F  F06B         	movff	?___wmul,sprintf@exp
  1855  007984  C010  F06C         	movff	?___wmul+1,sprintf@exp+1
  1856                           
  1857                           ;doprnt.c: 840: exp /= 10;
  1858  007988  C06B  F007         	movff	sprintf@exp,___awdiv@dividend
  1859  00798C  C06C  F008         	movff	sprintf@exp+1,___awdiv@dividend+1
  1860  007990  0E00               	movlw	0
  1861  007992  6E0A               	movwf	___awdiv@divisor+1,c
  1862  007994  0E0A               	movlw	10
  1863  007996  6E09               	movwf	___awdiv@divisor,c
  1864  007998  ECFF  F031         	call	___awdiv	;wreg free
  1865  00799C  C007  F06B         	movff	?___awdiv,sprintf@exp
  1866  0079A0  C008  F06C         	movff	?___awdiv+1,sprintf@exp+1
  1867                           
  1868                           ;doprnt.c: 841: if(exp < 0)
  1869  0079A4  0100               	movlb	0	; () banked
  1870  0079A6  AF6C               	btfss	(sprintf@exp+1)& (0+255),7,b
  1871  0079A8  D003               	goto	l251
  1872                           
  1873                           ; BSR set to: 0
  1874                           ;doprnt.c: 842: exp--;
  1875  0079AA  076B               	decf	sprintf@exp& (0+255),f,b
  1876  0079AC  A0D8               	btfss	status,0,c
  1877  0079AE  076C               	decf	(sprintf@exp+1)& (0+255),f,b
  1878  0079B0                     l251:
  1879                           
  1880                           ; BSR set to: 0
  1881                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  1882                           
  1883                           ; BSR set to: 0
  1884  0079B0  516B               	movf	sprintf@exp& (0+255),w,b
  1885  0079B2  0800               	sublw	0
  1886  0079B4  ECC5  F037         	call	_scale
  1887  0079B8  C024  F06D         	movff	?_scale,sprintf@tmpval
  1888  0079BC  C025  F06E         	movff	?_scale+1,sprintf@tmpval+1
  1889  0079C0  C026  F06F         	movff	?_scale+2,sprintf@tmpval+2
  1890                           
  1891                           ;doprnt.c: 847: tmpval.integ *= fval;
  1892  0079C4  C06D  F015         	movff	sprintf@tmpval,___ftmul@f1
  1893  0079C8  C06E  F016         	movff	sprintf@tmpval+1,___ftmul@f1+1
  1894  0079CC  C06F  F017         	movff	sprintf@tmpval+2,___ftmul@f1+2
  1895  0079D0  C073  F018         	movff	sprintf@fval,___ftmul@f2
  1896  0079D4  C074  F019         	movff	sprintf@fval+1,___ftmul@f2+1
  1897  0079D8  C075  F01A         	movff	sprintf@fval+2,___ftmul@f2+2
  1898  0079DC  EC1F  F034         	call	___ftmul	;wreg free
  1899  0079E0  C015  F06D         	movff	?___ftmul,sprintf@tmpval
  1900  0079E4  C016  F06E         	movff	?___ftmul+1,sprintf@tmpval+1
  1901  0079E8  C017  F06F         	movff	?___ftmul+2,sprintf@tmpval+2
  1902                           
  1903                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  1904  0079EC  C06D  F001         	movff	sprintf@tmpval,___ftge@ff1
  1905  0079F0  C06E  F002         	movff	sprintf@tmpval+1,___ftge@ff1+1
  1906  0079F4  C06F  F003         	movff	sprintf@tmpval+2,___ftge@ff1+2
  1907  0079F8  0E00               	movlw	0
  1908  0079FA  6E04               	movwf	___ftge@ff2,c
  1909  0079FC  0E80               	movlw	128
  1910  0079FE  6E05               	movwf	___ftge@ff2+1,c
  1911  007A00  0E3F               	movlw	63
  1912  007A02  6E06               	movwf	___ftge@ff2+2,c
  1913  007A04  EC41  F032         	call	___ftge	;wreg free
  1914  007A08  B0D8               	btfsc	status,0,c
  1915  007A0A  D005               	goto	l252
  1916                           
  1917                           ;doprnt.c: 849: exp--;
  1918  007A0C  0100               	movlb	0	; () banked
  1919  007A0E  076B               	decf	sprintf@exp& (0+255),f,b
  1920  007A10  A0D8               	btfss	status,0,c
  1921  007A12  076C               	decf	(sprintf@exp+1)& (0+255),f,b
  1922  007A14  D013               	goto	l254
  1923  007A16                     l252:
  1924                           
  1925                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  1926                           
  1927                           ; BSR set to: 0
  1928  007A16  C06D  F001         	movff	sprintf@tmpval,___ftge@ff1
  1929  007A1A  C06E  F002         	movff	sprintf@tmpval+1,___ftge@ff1+1
  1930  007A1E  C06F  F003         	movff	sprintf@tmpval+2,___ftge@ff1+2
  1931  007A22  0E00               	movlw	0
  1932  007A24  6E04               	movwf	___ftge@ff2,c
  1933  007A26  0E20               	movlw	32
  1934  007A28  6E05               	movwf	___ftge@ff2+1,c
  1935  007A2A  0E41               	movlw	65
  1936  007A2C  6E06               	movwf	___ftge@ff2+2,c
  1937  007A2E  EC41  F032         	call	___ftge	;wreg free
  1938  007A32  A0D8               	btfss	status,0,c
  1939  007A34  D003               	goto	l254
  1940                           
  1941                           ;doprnt.c: 851: exp++;
  1942  007A36  0100               	movlb	0	; () banked
  1943  007A38  4B6B               	infsnz	sprintf@exp& (0+255),f,b
  1944  007A3A  2B6C               	incf	(sprintf@exp+1)& (0+255),f,b
  1945  007A3C                     l254:
  1946                           
  1947                           ;doprnt.c: 852: }
  1948                           ;doprnt.c: 1112: if(prec <= 12)
  1949                           
  1950                           ; BSR set to: 0
  1951                           
  1952                           ; BSR set to: 0
  1953                           
  1954                           ; BSR set to: 0
  1955  007A3C  0100               	movlb	0	; () banked
  1956  007A3E  BF72               	btfsc	(sprintf@prec+1)& (0+255),7,b
  1957  007A40  D006               	goto	u2820
  1958  007A42  5172               	movf	(sprintf@prec+1)& (0+255),w,b
  1959  007A44  E11B               	bnz	l3074
  1960  007A46  0E0D               	movlw	13
  1961  007A48  5D71               	subwf	sprintf@prec& (0+255),w,b
  1962  007A4A  B0D8               	btfsc	status,0,c
  1963  007A4C  D017               	goto	l255
  1964  007A4E                     u2820:
  1965                           
  1966                           ; BSR set to: 0
  1967                           ;doprnt.c: 1113: fval += fround(prec);
  1968  007A4E  C073  F02E         	movff	sprintf@fval,___ftadd@f1
  1969  007A52  C074  F02F         	movff	sprintf@fval+1,___ftadd@f1+1
  1970  007A56  C075  F030         	movff	sprintf@fval+2,___ftadd@f1+2
  1971  007A5A  5171               	movf	sprintf@prec& (0+255),w,b
  1972  007A5C  EC9C  F036         	call	_fround
  1973  007A60  C024  F031         	movff	?_fround,___ftadd@f2
  1974  007A64  C025  F032         	movff	?_fround+1,___ftadd@f2+1
  1975  007A68  C026  F033         	movff	?_fround+2,___ftadd@f2+2
  1976  007A6C  ECC6  F035         	call	___ftadd	;wreg free
  1977  007A70  C02E  F073         	movff	?___ftadd,sprintf@fval
  1978  007A74  C02F  F074         	movff	?___ftadd+1,sprintf@fval+1
  1979  007A78  C030  F075         	movff	?___ftadd+2,sprintf@fval+2
  1980  007A7C                     l255:
  1981  007A7C                     l3074:
  1982                           
  1983                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  1984  007A7C  0100               	movlb	0	; () banked
  1985  007A7E  BF6C               	btfsc	(sprintf@exp+1)& (0+255),7,b
  1986  007A80  D006               	goto	u2830
  1987  007A82  516C               	movf	(sprintf@exp+1)& (0+255),w,b
  1988  007A84  E120               	bnz	l3082
  1989  007A86  0E0A               	movlw	10
  1990  007A88  5D6B               	subwf	sprintf@exp& (0+255),w,b
  1991  007A8A  B0D8               	btfsc	status,0,c
  1992  007A8C  D01C               	goto	u2860
  1993  007A8E                     u2830:
  1994                           
  1995                           ; BSR set to: 0
  1996  007A8E  5173               	movf	sprintf@fval& (0+255),w,b
  1997  007A90  1174               	iorwf	(sprintf@fval+1)& (0+255),w,b
  1998  007A92  1175               	iorwf	(sprintf@fval+2)& (0+255),w,b
  1999  007A94  B4D8               	btfsc	status,2,c
  2000  007A96  D056               	goto	l256
  2001                           
  2002                           ; BSR set to: 0
  2003  007A98  C073  F02B         	movff	sprintf@fval,___fttol@f1
  2004  007A9C  C074  F02C         	movff	sprintf@fval+1,___fttol@f1+1
  2005  007AA0  C075  F02D         	movff	sprintf@fval+2,___fttol@f1+2
  2006  007AA4  ECA5  F033         	call	___fttol	;wreg free
  2007  007AA8  502B               	movf	?___fttol,w,c
  2008  007AAA  102C               	iorwf	?___fttol+1,w,c
  2009  007AAC  102D               	iorwf	?___fttol+2,w,c
  2010  007AAE  102E               	iorwf	?___fttol+3,w,c
  2011  007AB0  A4D8               	btfss	status,2,c
  2012  007AB2  D048               	goto	l256
  2013  007AB4  0100               	movlb	0	; () banked
  2014  007AB6  BF6C               	btfsc	(sprintf@exp+1)& (0+255),7,b
  2015  007AB8  D045               	goto	l256
  2016  007ABA  516C               	movf	(sprintf@exp+1)& (0+255),w,b
  2017  007ABC  E104               	bnz	l3082
  2018  007ABE  0E02               	movlw	2
  2019  007AC0  5D6B               	subwf	sprintf@exp& (0+255),w,b
  2020  007AC2  A0D8               	btfss	status,0,c
  2021  007AC4  D03F               	goto	l256
  2022  007AC6                     u2860:
  2023  007AC6                     l3082:
  2024                           
  2025                           ; BSR set to: 0
  2026                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  2027  007AC6  C06D  F001         	movff	sprintf@tmpval,___ftge@ff1
  2028  007ACA  C06E  F002         	movff	sprintf@tmpval+1,___ftge@ff1+1
  2029  007ACE  C06F  F003         	movff	sprintf@tmpval+2,___ftge@ff1+2
  2030  007AD2  0E70               	movlw	112
  2031  007AD4  6E04               	movwf	___ftge@ff2,c
  2032  007AD6  0E89               	movlw	137
  2033  007AD8  6E05               	movwf	___ftge@ff2+1,c
  2034  007ADA  0E40               	movlw	64
  2035  007ADC  6E06               	movwf	___ftge@ff2+2,c
  2036  007ADE  EC41  F032         	call	___ftge	;wreg free
  2037  007AE2  B0D8               	btfsc	status,0,c
  2038  007AE4  D003               	goto	l259
  2039                           
  2040                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  2041  007AE6  0100               	movlb	0	; () banked
  2042  007AE8  0EF7               	movlw	247
  2043  007AEA  D002               	goto	L1
  2044  007AEC                     l259:
  2045                           
  2046                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  2047                           
  2048                           ; BSR set to: 0
  2049  007AEC  0100               	movlb	0	; () banked
  2050  007AEE  0EF8               	movlw	248
  2051  007AF0                     L1:
  2052  007AF0  276B               	addwf	sprintf@exp& (0+255),f,b
  2053  007AF2  0EFF               	movlw	255
  2054  007AF4  236C               	addwfc	(sprintf@exp+1)& (0+255),f,b
  2055                           
  2056                           ; BSR set to: 0
  2057                           ;doprnt.c: 1124: }
  2058                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  2059                           
  2060                           ; BSR set to: 0
  2061  007AF6  516B               	movf	sprintf@exp& (0+255),w,b
  2062  007AF8  ECC5  F037         	call	_scale
  2063  007AFC  C024  F06D         	movff	?_scale,sprintf@tmpval
  2064  007B00  C025  F06E         	movff	?_scale+1,sprintf@tmpval+1
  2065  007B04  C026  F06F         	movff	?_scale+2,sprintf@tmpval+2
  2066                           
  2067                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  2068  007B08  C073  F001         	movff	sprintf@fval,__tdiv_to_l_@f1
  2069  007B0C  C074  F002         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  2070  007B10  C075  F003         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  2071  007B14  C06D  F004         	movff	sprintf@tmpval,__tdiv_to_l_@f2
  2072  007B18  C06E  F005         	movff	sprintf@tmpval+1,__tdiv_to_l_@f2+1
  2073  007B1C  C06F  F006         	movff	sprintf@tmpval+2,__tdiv_to_l_@f2+2
  2074  007B20  EC2D  F035         	call	__tdiv_to_l_	;wreg free
  2075  007B24  C001  F067         	movff	?__tdiv_to_l_,sprintf@val
  2076  007B28  C002  F068         	movff	?__tdiv_to_l_+1,sprintf@val+1
  2077  007B2C  C003  F069         	movff	?__tdiv_to_l_+2,sprintf@val+2
  2078  007B30  C004  F06A         	movff	?__tdiv_to_l_+3,sprintf@val+3
  2079                           
  2080                           ;doprnt.c: 1129: fval = 0.0;
  2081  007B34  0E00               	movlw	0
  2082  007B36  0100               	movlb	0	; () banked
  2083  007B38  6F73               	movwf	sprintf@fval& (0+255),b
  2084  007B3A  0E00               	movlw	0
  2085  007B3C  6F74               	movwf	(sprintf@fval+1)& (0+255),b
  2086  007B3E  0E00               	movlw	0
  2087  007B40  6F75               	movwf	(sprintf@fval+2)& (0+255),b
  2088                           
  2089                           ;doprnt.c: 1130: } else {
  2090  007B42  D033               	goto	l265
  2091  007B44                     l256:
  2092                           
  2093                           ;doprnt.c: 1131: val = (unsigned long)fval;
  2094                           
  2095                           ; BSR set to: 0
  2096  007B44  C073  F02B         	movff	sprintf@fval,___fttol@f1
  2097  007B48  C074  F02C         	movff	sprintf@fval+1,___fttol@f1+1
  2098  007B4C  C075  F02D         	movff	sprintf@fval+2,___fttol@f1+2
  2099  007B50  ECA5  F033         	call	___fttol	;wreg free
  2100  007B54  C02B  F067         	movff	?___fttol,sprintf@val
  2101  007B58  C02C  F068         	movff	?___fttol+1,sprintf@val+1
  2102  007B5C  C02D  F069         	movff	?___fttol+2,sprintf@val+2
  2103  007B60  C02E  F06A         	movff	?___fttol+3,sprintf@val+3
  2104                           
  2105                           ;doprnt.c: 1132: fval -= (double)val;
  2106  007B64  C073  F03A         	movff	sprintf@fval,___ftsub@f1
  2107  007B68  C074  F03B         	movff	sprintf@fval+1,___ftsub@f1+1
  2108  007B6C  C075  F03C         	movff	sprintf@fval+2,___ftsub@f1+2
  2109  007B70  C067  F009         	movff	sprintf@val,___lltoft@c
  2110  007B74  C068  F00A         	movff	sprintf@val+1,___lltoft@c+1
  2111  007B78  C069  F00B         	movff	sprintf@val+2,___lltoft@c+2
  2112  007B7C  C06A  F00C         	movff	sprintf@val+3,___lltoft@c+3
  2113  007B80  EC25  F031         	call	___lltoft	;wreg free
  2114  007B84  C009  F03D         	movff	?___lltoft,___ftsub@f2
  2115  007B88  C00A  F03E         	movff	?___lltoft+1,___ftsub@f2+1
  2116  007B8C  C00B  F03F         	movff	?___lltoft+2,___ftsub@f2+2
  2117  007B90  EC8A  F030         	call	___ftsub	;wreg free
  2118  007B94  C03A  F073         	movff	?___ftsub,sprintf@fval
  2119  007B98  C03B  F074         	movff	?___ftsub+1,sprintf@fval+1
  2120  007B9C  C03C  F075         	movff	?___ftsub+2,sprintf@fval+2
  2121                           
  2122                           ;doprnt.c: 1133: exp = 0;
  2123  007BA0  0E00               	movlw	0
  2124  007BA2  0100               	movlb	0	; () banked
  2125  007BA4  6F6C               	movwf	(sprintf@exp+1)& (0+255),b
  2126  007BA6  0E00               	movlw	0
  2127  007BA8  6F6B               	movwf	sprintf@exp& (0+255),b
  2128  007BAA                     l265:
  2129                           
  2130                           ; BSR set to: 0
  2131                           ;doprnt.c: 1134: }
  2132                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  2133                           
  2134                           ; BSR set to: 0
  2135  007BAA  0E01               	movlw	1
  2136  007BAC  6F76               	movwf	sprintf@c& (0+255),b
  2137  007BAE                     l3102:
  2138                           
  2139                           ; BSR set to: 0
  2140  007BAE  0E0A               	movlw	10
  2141  007BB0  1976               	xorwf	sprintf@c& (0+255),w,b
  2142  007BB2  B4D8               	btfsc	status,2,c
  2143  007BB4  D018               	goto	u2900
  2144                           
  2145                           ; BSR set to: 0
  2146                           ;doprnt.c: 1137: if(val < dpowers[c])
  2147                           
  2148                           ; BSR set to: 0
  2149                           
  2150                           ; BSR set to: 0
  2151  007BB6  5176               	movf	sprintf@c& (0+255),w,b
  2152  007BB8  0D04               	mullw	4
  2153  007BBA  0E01               	movlw	low _dpowers
  2154  007BBC  24F3               	addwf	prodl,w,c
  2155  007BBE  6EF6               	movwf	tblptrl,c
  2156  007BC0  0E7F               	movlw	high _dpowers
  2157  007BC2  20F4               	addwfc	prodh,w,c
  2158  007BC4  6EF7               	movwf	tblptrh,c
  2159  007BC6                     	if	0	;There are less than 3 active tblptr bytes
  2160  007BC6                     	endif
  2161  007BC6  0009               	tblrd		*+
  2162  007BC8  50F5               	movf	tablat,w,c
  2163  007BCA  5D67               	subwf	sprintf@val& (0+255),w,b
  2164  007BCC  0009               	tblrd		*+
  2165  007BCE  50F5               	movf	tablat,w,c
  2166  007BD0  5968               	subwfb	(sprintf@val+1)& (0+255),w,b
  2167  007BD2  0009               	tblrd		*+
  2168  007BD4  50F5               	movf	tablat,w,c
  2169  007BD6  5969               	subwfb	(sprintf@val+2)& (0+255),w,b
  2170  007BD8  0009               	tblrd		*+
  2171  007BDA  50F5               	movf	tablat,w,c
  2172  007BDC  596A               	subwfb	(sprintf@val+3)& (0+255),w,b
  2173  007BDE  A0D8               	btfss	status,0,c
  2174  007BE0  D002               	goto	u2900
  2175                           
  2176                           ; BSR set to: 0
  2177                           
  2178                           ; BSR set to: 0
  2179                           
  2180                           ; BSR set to: 0
  2181                           ;doprnt.c: 1138: break;
  2182  007BE2  2B76               	incf	sprintf@c& (0+255),f,b
  2183  007BE4  D7E4               	goto	l3102
  2184  007BE6                     u2900:
  2185                           
  2186                           ; BSR set to: 0
  2187                           ;doprnt.c: 1175: {
  2188                           ;doprnt.c: 1188: if(flag & 0x03)
  2189                           
  2190                           ; BSR set to: 0
  2191  007BE6  0E03               	movlw	3
  2192  007BE8  1565               	andwf	sprintf@flag& (0+255),w,b
  2193  007BEA  6E47               	movwf	??_sprintf& (0+255),c
  2194  007BEC  0E00               	movlw	0
  2195  007BEE  1566               	andwf	(sprintf@flag+1)& (0+255),w,b
  2196  007BF0  6E48               	movwf	(??_sprintf+1)& (0+255),c
  2197  007BF2  5047               	movf	??_sprintf,w,c
  2198  007BF4  1048               	iorwf	??_sprintf+1,w,c
  2199  007BF6  B4D8               	btfsc	status,2,c
  2200  007BF8  D050               	goto	l270
  2201                           
  2202                           ; BSR set to: 0
  2203                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  2204  007BFA  C040  FFD9         	movff	sprintf@sp,fsr2l
  2205  007BFE  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2206  007C02  0E2D               	movlw	45
  2207  007C04  D047               	goto	L2
  2208  007C06                     
  2209                           ; BSR set to: 0
  2210                           ;doprnt.c: 1200: {
  2211                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  2212                           
  2213                           ; BSR set to: 0
  2214  007C06  C067  F001         	movff	sprintf@val,___lldiv@dividend
  2215  007C0A  C068  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  2216  007C0E  C069  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  2217  007C12  C06A  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  2218  007C16  5176               	movf	sprintf@c& (0+255),w,b
  2219  007C18  0D04               	mullw	4
  2220  007C1A  0E01               	movlw	low _dpowers
  2221  007C1C  24F3               	addwf	prodl,w,c
  2222  007C1E  6EF6               	movwf	tblptrl,c
  2223  007C20  0E7F               	movlw	high _dpowers
  2224  007C22  20F4               	addwfc	prodh,w,c
  2225  007C24  6EF7               	movwf	tblptrh,c
  2226  007C26                     	if	0	;There are less than 3 active tblptr bytes
  2227  007C26                     	endif
  2228  007C26  0009               	tblrd		*+
  2229  007C28  CFF5 F005          	movff	tablat,___lldiv@divisor
  2230  007C2C  0009               	tblrd		*+
  2231  007C2E  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  2232  007C32  0009               	tblrd		*+
  2233  007C34  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  2234  007C38  000A               	tblrd		*-
  2235  007C3A  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  2236  007C3E  ECBE  F031         	call	___lldiv	;wreg free
  2237  007C42  C001  F06D         	movff	?___lldiv,sprintf@tmpval
  2238  007C46  C002  F06E         	movff	?___lldiv+1,sprintf@tmpval+1
  2239  007C4A  C003  F06F         	movff	?___lldiv+2,sprintf@tmpval+2
  2240  007C4E  C004  F070         	movff	?___lldiv+3,sprintf@tmpval+3
  2241                           
  2242                           ;doprnt.c: 1202: tmpval.vd %= 10;
  2243  007C52  C06D  F001         	movff	sprintf@tmpval,___llmod@dividend
  2244  007C56  C06E  F002         	movff	sprintf@tmpval+1,___llmod@dividend+1
  2245  007C5A  C06F  F003         	movff	sprintf@tmpval+2,___llmod@dividend+2
  2246  007C5E  C070  F004         	movff	sprintf@tmpval+3,___llmod@dividend+3
  2247  007C62  0E0A               	movlw	10
  2248  007C64  6E05               	movwf	___llmod@divisor,c
  2249  007C66  0E00               	movlw	0
  2250  007C68  6E06               	movwf	___llmod@divisor+1,c
  2251  007C6A  0E00               	movlw	0
  2252  007C6C  6E07               	movwf	___llmod@divisor+2,c
  2253  007C6E  0E00               	movlw	0
  2254  007C70  6E08               	movwf	___llmod@divisor+3,c
  2255  007C72  EC53  F031         	call	___llmod	;wreg free
  2256  007C76  C001  F06D         	movff	?___llmod,sprintf@tmpval
  2257  007C7A  C002  F06E         	movff	?___llmod+1,sprintf@tmpval+1
  2258  007C7E  C003  F06F         	movff	?___llmod+2,sprintf@tmpval+2
  2259  007C82  C004  F070         	movff	?___llmod+3,sprintf@tmpval+3
  2260                           
  2261                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  2262  007C86  0100               	movlb	0	; () banked
  2263  007C88  516D               	movf	sprintf@tmpval& (0+255),w,b
  2264  007C8A  0F30               	addlw	48
  2265  007C8C  C040  FFD9         	movff	sprintf@sp,fsr2l
  2266  007C90  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2267  007C94                     L2:
  2268  007C94  6EDF               	movwf	indf2,c
  2269                           
  2270                           ; BSR set to: 0
  2271  007C96  4A40               	infsnz	sprintf@sp,f,c
  2272  007C98  2A41               	incf	sprintf@sp+1,f,c
  2273  007C9A                     l270:
  2274                           
  2275                           ; BSR set to: 0
  2276                           
  2277                           ; BSR set to: 0
  2278  007C9A  0776               	decf	sprintf@c& (0+255),f,b
  2279  007C9C  2976               	incf	sprintf@c& (0+255),w,b
  2280  007C9E  B4D8               	btfsc	status,2,c
  2281  007CA0  D00C               	goto	l273
  2282  007CA2  D7B1               	goto	l271
  2283  007CA4                     l3130:
  2284                           
  2285                           ; BSR set to: 0
  2286                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  2287  007CA4  C040  FFD9         	movff	sprintf@sp,fsr2l
  2288  007CA8  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2289  007CAC  0E30               	movlw	48
  2290  007CAE  6EDF               	movwf	indf2,c
  2291                           
  2292                           ; BSR set to: 0
  2293  007CB0  4A40               	infsnz	sprintf@sp,f,c
  2294  007CB2  2A41               	incf	sprintf@sp+1,f,c
  2295                           
  2296                           ; BSR set to: 0
  2297                           ;doprnt.c: 1209: exp--;
  2298  007CB4  076B               	decf	sprintf@exp& (0+255),f,b
  2299  007CB6  A0D8               	btfss	status,0,c
  2300  007CB8  076C               	decf	(sprintf@exp+1)& (0+255),f,b
  2301  007CBA                     l273:
  2302                           
  2303                           ; BSR set to: 0
  2304                           
  2305                           ; BSR set to: 0
  2306  007CBA  BF6C               	btfsc	(sprintf@exp+1)& (0+255),7,b
  2307  007CBC  D005               	goto	u2930
  2308  007CBE  516C               	movf	(sprintf@exp+1)& (0+255),w,b
  2309  007CC0  E1F1               	bnz	l3130
  2310  007CC2  056B               	decf	sprintf@exp& (0+255),w,b
  2311  007CC4  B0D8               	btfsc	status,0,c
  2312  007CC6  D7EE               	goto	l274
  2313  007CC8                     u2930:
  2314                           
  2315                           ; BSR set to: 0
  2316                           ;doprnt.c: 1210: }
  2317                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  2318                           
  2319                           ; BSR set to: 0
  2320  007CC8  BF72               	btfsc	(sprintf@prec+1)& (0+255),7,b
  2321  007CCA  D009               	goto	l276
  2322  007CCC  5172               	movf	(sprintf@prec+1)& (0+255),w,b
  2323  007CCE  E104               	bnz	u2940
  2324  007CD0  0E09               	movlw	9
  2325  007CD2  5D71               	subwf	sprintf@prec& (0+255),w,b
  2326  007CD4  A0D8               	btfss	status,0,c
  2327  007CD6  D003               	goto	l276
  2328  007CD8                     u2940:
  2329                           
  2330                           ; BSR set to: 0
  2331                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  2332  007CD8  0E08               	movlw	8
  2333  007CDA  6F76               	movwf	sprintf@c& (0+255),b
  2334  007CDC  D002               	goto	l277
  2335  007CDE                     l276:
  2336                           
  2337                           ; BSR set to: 0
  2338                           ;doprnt.c: 1213: else
  2339                           ;doprnt.c: 1214: c = prec;
  2340  007CDE  C071  F076         	movff	sprintf@prec,sprintf@c
  2341  007CE2                     l277:
  2342                           
  2343                           ; BSR set to: 0
  2344                           ;doprnt.c: 1215: prec -= c;
  2345                           
  2346                           ; BSR set to: 0
  2347  007CE2  5176               	movf	sprintf@c& (0+255),w,b
  2348  007CE4  5F71               	subwf	sprintf@prec& (0+255),f,b
  2349  007CE6  0E00               	movlw	0
  2350  007CE8  BF76               	btfsc	sprintf@c& (0+255),7,b
  2351  007CEA  0EFF               	movlw	255
  2352  007CEC  5B72               	subwfb	(sprintf@prec+1)& (0+255),f,b
  2353                           
  2354                           ; BSR set to: 0
  2355                           ;doprnt.c: 1219: if(c)
  2356  007CEE  5176               	movf	sprintf@c& (0+255),w,b
  2357  007CF0  B4D8               	btfsc	status,2,c
  2358  007CF2  D008               	goto	l278
  2359                           
  2360                           ; BSR set to: 0
  2361                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  2362  007CF4  C040  FFD9         	movff	sprintf@sp,fsr2l
  2363  007CF8  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2364  007CFC  0E2E               	movlw	46
  2365  007CFE  6EDF               	movwf	indf2,c
  2366                           
  2367                           ; BSR set to: 0
  2368  007D00  4A40               	infsnz	sprintf@sp,f,c
  2369  007D02  2A41               	incf	sprintf@sp+1,f,c
  2370  007D04                     l278:
  2371                           
  2372                           ; BSR set to: 0
  2373                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2374                           
  2375                           ; BSR set to: 0
  2376  007D04  5176               	movf	sprintf@c& (0+255),w,b
  2377  007D06  ECC5  F037         	call	_scale
  2378  007D0A  C024  F060         	movff	?_scale,_sprintf$1174
  2379  007D0E  C025  F061         	movff	?_scale+1,_sprintf$1174+1
  2380  007D12  C026  F062         	movff	?_scale+2,_sprintf$1174+2
  2381                           
  2382                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2383  007D16  C073  F018         	movff	sprintf@fval,___ftmul@f2
  2384  007D1A  C074  F019         	movff	sprintf@fval+1,___ftmul@f2+1
  2385  007D1E  C075  F01A         	movff	sprintf@fval+2,___ftmul@f2+2
  2386  007D22  C060  F015         	movff	_sprintf$1174,___ftmul@f1
  2387  007D26  C061  F016         	movff	_sprintf$1174+1,___ftmul@f1+1
  2388  007D2A  C062  F017         	movff	_sprintf$1174+2,___ftmul@f1+2
  2389  007D2E  EC1F  F034         	call	___ftmul	;wreg free
  2390  007D32  C015  F02B         	movff	?___ftmul,___fttol@f1
  2391  007D36  C016  F02C         	movff	?___ftmul+1,___fttol@f1+1
  2392  007D3A  C017  F02D         	movff	?___ftmul+2,___fttol@f1+2
  2393  007D3E  ECA5  F033         	call	___fttol	;wreg free
  2394  007D42  C02B  F067         	movff	?___fttol,sprintf@val
  2395  007D46  C02C  F068         	movff	?___fttol+1,sprintf@val+1
  2396  007D4A  C02D  F069         	movff	?___fttol+2,sprintf@val+2
  2397  007D4E  C02E  F06A         	movff	?___fttol+3,sprintf@val+3
  2398                           
  2399                           ;doprnt.c: 1228: while(c--) {
  2400  007D52  D071               	goto	l279
  2401  007D54                     
  2402                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  2403  007D54  C067  F001         	movff	sprintf@val,___lldiv@dividend
  2404  007D58  C068  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  2405  007D5C  C069  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  2406  007D60  C06A  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  2407  007D64  0100               	movlb	0	; () banked
  2408  007D66  5176               	movf	sprintf@c& (0+255),w,b
  2409  007D68  0D04               	mullw	4
  2410  007D6A  0E01               	movlw	low _dpowers
  2411  007D6C  24F3               	addwf	prodl,w,c
  2412  007D6E  6EF6               	movwf	tblptrl,c
  2413  007D70  0E7F               	movlw	high _dpowers
  2414  007D72  20F4               	addwfc	prodh,w,c
  2415  007D74  6EF7               	movwf	tblptrh,c
  2416  007D76                     	if	0	;There are less than 3 active tblptr bytes
  2417  007D76                     	endif
  2418  007D76  0009               	tblrd		*+
  2419  007D78  CFF5 F005          	movff	tablat,___lldiv@divisor
  2420  007D7C  0009               	tblrd		*+
  2421  007D7E  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  2422  007D82  0009               	tblrd		*+
  2423  007D84  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  2424  007D88  000A               	tblrd		*-
  2425  007D8A  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  2426  007D8E  ECBE  F031         	call	___lldiv	;wreg free
  2427  007D92  C001  F06D         	movff	?___lldiv,sprintf@tmpval
  2428  007D96  C002  F06E         	movff	?___lldiv+1,sprintf@tmpval+1
  2429  007D9A  C003  F06F         	movff	?___lldiv+2,sprintf@tmpval+2
  2430  007D9E  C004  F070         	movff	?___lldiv+3,sprintf@tmpval+3
  2431                           
  2432                           ;doprnt.c: 1230: tmpval.vd %= 10;
  2433  007DA2  C06D  F001         	movff	sprintf@tmpval,___llmod@dividend
  2434  007DA6  C06E  F002         	movff	sprintf@tmpval+1,___llmod@dividend+1
  2435  007DAA  C06F  F003         	movff	sprintf@tmpval+2,___llmod@dividend+2
  2436  007DAE  C070  F004         	movff	sprintf@tmpval+3,___llmod@dividend+3
  2437  007DB2  0E0A               	movlw	10
  2438  007DB4  6E05               	movwf	___llmod@divisor,c
  2439  007DB6  0E00               	movlw	0
  2440  007DB8  6E06               	movwf	___llmod@divisor+1,c
  2441  007DBA  0E00               	movlw	0
  2442  007DBC  6E07               	movwf	___llmod@divisor+2,c
  2443  007DBE  0E00               	movlw	0
  2444  007DC0  6E08               	movwf	___llmod@divisor+3,c
  2445  007DC2  EC53  F031         	call	___llmod	;wreg free
  2446  007DC6  C001  F06D         	movff	?___llmod,sprintf@tmpval
  2447  007DCA  C002  F06E         	movff	?___llmod+1,sprintf@tmpval+1
  2448  007DCE  C003  F06F         	movff	?___llmod+2,sprintf@tmpval+2
  2449  007DD2  C004  F070         	movff	?___llmod+3,sprintf@tmpval+3
  2450                           
  2451                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  2452  007DD6  0100               	movlb	0	; () banked
  2453  007DD8  516D               	movf	sprintf@tmpval& (0+255),w,b
  2454  007DDA  0F30               	addlw	48
  2455  007DDC  C040  FFD9         	movff	sprintf@sp,fsr2l
  2456  007DE0  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2457  007DE4  6EDF               	movwf	indf2,c
  2458                           
  2459                           ; BSR set to: 0
  2460  007DE6  4A40               	infsnz	sprintf@sp,f,c
  2461  007DE8  2A41               	incf	sprintf@sp+1,f,c
  2462                           
  2463                           ; BSR set to: 0
  2464                           ;doprnt.c: 1232: val %= dpowers[c];
  2465  007DEA  C067  F001         	movff	sprintf@val,___llmod@dividend
  2466  007DEE  C068  F002         	movff	sprintf@val+1,___llmod@dividend+1
  2467  007DF2  C069  F003         	movff	sprintf@val+2,___llmod@dividend+2
  2468  007DF6  C06A  F004         	movff	sprintf@val+3,___llmod@dividend+3
  2469  007DFA  5176               	movf	sprintf@c& (0+255),w,b
  2470  007DFC  0D04               	mullw	4
  2471  007DFE  0E01               	movlw	low _dpowers
  2472  007E00  24F3               	addwf	prodl,w,c
  2473  007E02  6EF6               	movwf	tblptrl,c
  2474  007E04  0E7F               	movlw	high _dpowers
  2475  007E06  20F4               	addwfc	prodh,w,c
  2476  007E08  6EF7               	movwf	tblptrh,c
  2477  007E0A                     	if	0	;There are less than 3 active tblptr bytes
  2478  007E0A                     	endif
  2479  007E0A  0009               	tblrd		*+
  2480  007E0C  CFF5 F005          	movff	tablat,___llmod@divisor
  2481  007E10  0009               	tblrd		*+
  2482  007E12  CFF5 F006          	movff	tablat,___llmod@divisor+1
  2483  007E16  0009               	tblrd		*+
  2484  007E18  CFF5 F007          	movff	tablat,___llmod@divisor+2
  2485  007E1C  000A               	tblrd		*-
  2486  007E1E  CFF5 F008          	movff	tablat,___llmod@divisor+3
  2487  007E22  EC53  F031         	call	___llmod	;wreg free
  2488  007E26  C001  F067         	movff	?___llmod,sprintf@val
  2489  007E2A  C002  F068         	movff	?___llmod+1,sprintf@val+1
  2490  007E2E  C003  F069         	movff	?___llmod+2,sprintf@val+2
  2491  007E32  C004  F06A         	movff	?___llmod+3,sprintf@val+3
  2492  007E36                     l279:
  2493  007E36  0100               	movlb	0	; () banked
  2494  007E38  0776               	decf	sprintf@c& (0+255),f,b
  2495  007E3A  2976               	incf	sprintf@c& (0+255),w,b
  2496  007E3C  B4D8               	btfsc	status,2,c
  2497  007E3E  D00C               	goto	l282
  2498  007E40  D789               	goto	l280
  2499  007E42                     
  2500                           ; BSR set to: 0
  2501                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  2502                           
  2503                           ; BSR set to: 0
  2504  007E42  C040  FFD9         	movff	sprintf@sp,fsr2l
  2505  007E46  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2506  007E4A  0E30               	movlw	48
  2507  007E4C  6EDF               	movwf	indf2,c
  2508                           
  2509                           ; BSR set to: 0
  2510  007E4E  4A40               	infsnz	sprintf@sp,f,c
  2511  007E50  2A41               	incf	sprintf@sp+1,f,c
  2512                           
  2513                           ; BSR set to: 0
  2514                           ;doprnt.c: 1237: prec--;
  2515  007E52  0771               	decf	sprintf@prec& (0+255),f,b
  2516  007E54  A0D8               	btfss	status,0,c
  2517  007E56  0772               	decf	(sprintf@prec+1)& (0+255),f,b
  2518  007E58                     l282:
  2519                           
  2520                           ; BSR set to: 0
  2521                           
  2522                           ; BSR set to: 0
  2523  007E58  5171               	movf	sprintf@prec& (0+255),w,b
  2524  007E5A  1172               	iorwf	(sprintf@prec+1)& (0+255),w,b
  2525  007E5C  B4D8               	btfsc	status,2,c
  2526  007E5E  D03D               	goto	l289
  2527  007E60  D7F0               	goto	l283
  2528  007E62                     l247:
  2529                           
  2530                           ; BSR set to: 0
  2531                           ;doprnt.c: 1246: }
  2532                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  2533                           
  2534                           ; BSR set to: 0
  2535  007E62  5171               	movf	sprintf@prec& (0+255),w,b
  2536  007E64  1172               	iorwf	(sprintf@prec+1)& (0+255),w,b
  2537  007E66  A4D8               	btfss	status,2,c
  2538  007E68  D008               	goto	l285
  2539                           
  2540                           ; BSR set to: 0
  2541  007E6A  5167               	movf	sprintf@val& (0+255),w,b
  2542  007E6C  1168               	iorwf	(sprintf@val+1)& (0+255),w,b
  2543  007E6E  1169               	iorwf	(sprintf@val+2)& (0+255),w,b
  2544  007E70  116A               	iorwf	(sprintf@val+3)& (0+255),w,b
  2545  007E72  A4D8               	btfss	status,2,c
  2546  007E74  D002               	goto	l285
  2547                           
  2548                           ; BSR set to: 0
  2549                           ;doprnt.c: 1291: prec++;
  2550  007E76  4B71               	infsnz	sprintf@prec& (0+255),f,b
  2551  007E78  2B72               	incf	(sprintf@prec+1)& (0+255),f,b
  2552  007E7A                     l285:
  2553                           
  2554                           ; BSR set to: 0
  2555                           ;doprnt.c: 1339: if(c < prec)
  2556                           
  2557                           ; BSR set to: 0
  2558  007E7A  0E80               	movlw	128
  2559  007E7C  BF76               	btfsc	sprintf@c& (0+255),7,b
  2560  007E7E  0E7F               	movlw	127
  2561  007E80  6E47               	movwf	??_sprintf& (0+255),c
  2562  007E82  5171               	movf	sprintf@prec& (0+255),w,b
  2563  007E84  5D76               	subwf	sprintf@c& (0+255),w,b
  2564  007E86  5172               	movf	(sprintf@prec+1)& (0+255),w,b
  2565  007E88  0A80               	xorlw	128
  2566  007E8A  5847               	subwfb	??_sprintf& (0+255),w,c
  2567  007E8C  B0D8               	btfsc	status,0,c
  2568  007E8E  D003               	goto	l286
  2569                           
  2570                           ; BSR set to: 0
  2571                           ;doprnt.c: 1340: c = prec;
  2572  007E90  C071  F076         	movff	sprintf@prec,sprintf@c
  2573  007E94  D010               	goto	l288
  2574  007E96                     l286:
  2575                           
  2576                           ; BSR set to: 0
  2577                           ;doprnt.c: 1341: else if(prec < c)
  2578                           
  2579                           ; BSR set to: 0
  2580  007E96  5172               	movf	(sprintf@prec+1)& (0+255),w,b
  2581  007E98  0A80               	xorlw	128
  2582  007E9A  6E47               	movwf	??_sprintf& (0+255),c
  2583  007E9C  5176               	movf	sprintf@c& (0+255),w,b
  2584  007E9E  5D71               	subwf	sprintf@prec& (0+255),w,b
  2585  007EA0  0E80               	movlw	128
  2586  007EA2  BF76               	btfsc	sprintf@c& (0+255),7,b
  2587  007EA4  0E7F               	movlw	127
  2588  007EA6  5847               	subwfb	??_sprintf& (0+255),w,c
  2589  007EA8  B0D8               	btfsc	status,0,c
  2590  007EAA  D005               	goto	l288
  2591                           
  2592                           ; BSR set to: 0
  2593                           ;doprnt.c: 1342: prec = c;
  2594  007EAC  5176               	movf	sprintf@c& (0+255),w,b
  2595  007EAE  6F71               	movwf	sprintf@prec& (0+255),b
  2596  007EB0  6B72               	clrf	(sprintf@prec+1)& (0+255),b
  2597  007EB2  BF71               	btfsc	sprintf@prec& (0+255),7,b
  2598  007EB4  0772               	decf	(sprintf@prec+1)& (0+255),f,b
  2599  007EB6                     l288:
  2600                           
  2601                           ; BSR set to: 0
  2602                           ;doprnt.c: 1422: {
  2603                           ;doprnt.c: 1438: if(flag & 0x03)
  2604                           
  2605                           ; BSR set to: 0
  2606                           
  2607                           ; BSR set to: 0
  2608  007EB6  0E03               	movlw	3
  2609  007EB8  1565               	andwf	sprintf@flag& (0+255),w,b
  2610  007EBA  6E47               	movwf	??_sprintf& (0+255),c
  2611  007EBC  0E00               	movlw	0
  2612  007EBE  1566               	andwf	(sprintf@flag+1)& (0+255),w,b
  2613  007EC0  6E48               	movwf	(??_sprintf+1)& (0+255),c
  2614  007EC2  5047               	movf	??_sprintf,w,c
  2615  007EC4  1048               	iorwf	??_sprintf+1,w,c
  2616  007EC6  B4D8               	btfsc	status,2,c
  2617  007EC8  D008               	goto	l289
  2618                           
  2619                           ; BSR set to: 0
  2620                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  2621  007ECA  C040  FFD9         	movff	sprintf@sp,fsr2l
  2622  007ECE  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2623  007ED2  0E2D               	movlw	45
  2624  007ED4  6EDF               	movwf	indf2,c
  2625  007ED6                     l3192:
  2626                           
  2627                           ; BSR set to: 0
  2628  007ED6  4A40               	infsnz	sprintf@sp,f,c
  2629  007ED8  2A41               	incf	sprintf@sp+1,f,c
  2630  007EDA                     l289:
  2631                           
  2632                           ; BSR set to: 0
  2633                           
  2634                           ; BSR set to: 0
  2635                           
  2636                           ; BSR set to: 0
  2637  007EDA  C042  FFF6         	movff	sprintf@f,tblptrl
  2638  007EDE  C043  FFF7         	movff	sprintf@f+1,tblptrh
  2639  007EE2  4A42               	infsnz	sprintf@f,f,c
  2640  007EE4  2A43               	incf	sprintf@f+1,f,c
  2641  007EE6                     	if	0	;tblptru may be non-zero
  2642  007EE6                     	endif
  2643  007EE6                     	if	0	;tblptru may be non-zero
  2644  007EE6                     	endif
  2645  007EE6  0008               	tblrd		*
  2646  007EE8  CFF5 F076          	movff	tablat,sprintf@c
  2647  007EEC  5176               	movf	sprintf@c& (0+255),w,b
  2648  007EEE  A4D8               	btfss	status,2,c
  2649  007EF0  D489               	goto	l234
  2650  007EF2                     u3030:
  2651                           
  2652                           ; BSR set to: 0
  2653                           ;doprnt.c: 1538: *sp = 0;
  2654                           
  2655                           ; BSR set to: 0
  2656                           
  2657                           ;doprnt.c: 1469: }
  2658                           ;doprnt.c: 1533: }
  2659                           ;doprnt.c: 1535: alldone:
  2660                           
  2661                           ; BSR set to: 0
  2662  007EF2  C040  FFD9         	movff	sprintf@sp,fsr2l
  2663  007EF6  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2664  007EFA  0E00               	movlw	0
  2665  007EFC  6EDF               	movwf	indf2,c
  2666  007EFE  0012               	return	
  2667  007F00                     __end_of_sprintf:
  2668                           	opt stack 0
  2669                           tblptru	equ	0xFF8
  2670                           tblptrh	equ	0xFF7
  2671                           tblptrl	equ	0xFF6
  2672                           tablat	equ	0xFF5
  2673                           prodh	equ	0xFF4
  2674                           prodl	equ	0xFF3
  2675                           postinc0	equ	0xFEE
  2676                           wreg	equ	0xFE8
  2677                           indf2	equ	0xFDF
  2678                           postinc2	equ	0xFDE
  2679                           postdec2	equ	0xFDD
  2680                           fsr2h	equ	0xFDA
  2681                           fsr2l	equ	0xFD9
  2682                           status	equ	0xFD8
  2683                           
  2684 ;; *************** function _scale *****************
  2685 ;; Defined at:
  2686 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  2687 ;; Parameters:    Size  Location     Type
  2688 ;;  scl             1    wreg     char 
  2689 ;; Auto vars:     Size  Location     Type
  2690 ;;  scl             1   41[COMRAM] char 
  2691 ;; Return value:  Size  Location     Type
  2692 ;;                  3   35[COMRAM] char 
  2693 ;; Registers used:
  2694 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2695 ;; Tracked objects:
  2696 ;;		On entry : 0/0
  2697 ;;		On exit  : 0/0
  2698 ;;		Unchanged: 0/0
  2699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2700 ;;      Params:         3       0       0       0       0       0       0       0       0
  2701 ;;      Locals:         4       0       0       0       0       0       0       0       0
  2702 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2703 ;;      Totals:         7       0       0       0       0       0       0       0       0
  2704 ;;Total ram usage:        7 bytes
  2705 ;; Hardware stack levels used:    1
  2706 ;; Hardware stack levels required when called:    2
  2707 ;; This function calls:
  2708 ;;		___awdiv
  2709 ;;		___awmod
  2710 ;;		___ftmul
  2711 ;;		___wmul
  2712 ;; This function is called by:
  2713 ;;		_sprintf
  2714 ;; This function uses a non-reentrant model
  2715 ;;
  2716                           
  2717                           	psect	text2
  2718  006F8A                     __ptext2:
  2719                           	opt stack 0
  2720  006F8A                     _scale:
  2721                           	opt stack 27
  2722                           
  2723                           ; BSR set to: 0
  2724                           ;incstack = 0
  2725                           ;scale@scl stored from wreg
  2726  006F8A  6E2A               	movwf	scale@scl,c
  2727                           
  2728                           ;doprnt.c: 428: if(scl < 0) {
  2729  006F8C  AE2A               	btfss	scale@scl,7,c
  2730  006F8E  D101               	goto	l223
  2731                           
  2732                           ;doprnt.c: 429: scl = -scl;
  2733  006F90  6C2A               	negf	scale@scl,c
  2734                           
  2735                           ;doprnt.c: 430: if(scl>=110)
  2736  006F92  502A               	movf	scale@scl,w,c
  2737  006F94  0A80               	xorlw	128
  2738  006F96  0F12               	addlw	-238
  2739  006F98  A0D8               	btfss	status,0,c
  2740  006F9A  D091               	goto	l224
  2741                           
  2742                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2743  006F9C  0E00               	movlw	0
  2744  006F9E  6E12               	movwf	___wmul@multiplicand+1,c
  2745  006FA0  0E03               	movlw	3
  2746  006FA2  6E11               	movwf	___wmul@multiplicand,c
  2747  006FA4  0E00               	movlw	0
  2748  006FA6  6E0A               	movwf	___awdiv@divisor+1,c
  2749  006FA8  0E0A               	movlw	10
  2750  006FAA  6E09               	movwf	___awdiv@divisor,c
  2751  006FAC  0E00               	movlw	0
  2752  006FAE  6E04               	movwf	___awmod@divisor+1,c
  2753  006FB0  0E64               	movlw	100
  2754  006FB2  6E03               	movwf	___awmod@divisor,c
  2755  006FB4  502A               	movf	scale@scl,w,c
  2756  006FB6  6E01               	movwf	___awmod@dividend,c
  2757  006FB8  6A02               	clrf	___awmod@dividend+1,c
  2758  006FBA  BE01               	btfsc	___awmod@dividend,7,c
  2759  006FBC  0602               	decf	___awmod@dividend+1,f,c
  2760  006FBE  EC86  F031         	call	___awmod	;wreg free
  2761  006FC2  C001  F007         	movff	?___awmod,___awdiv@dividend
  2762  006FC6  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  2763  006FCA  ECFF  F031         	call	___awdiv	;wreg free
  2764  006FCE  0E09               	movlw	9
  2765  006FD0  2407               	addwf	?___awdiv,w,c
  2766  006FD2  6E0F               	movwf	___wmul@multiplier,c
  2767  006FD4  0E00               	movlw	0
  2768  006FD6  2008               	addwfc	?___awdiv+1,w,c
  2769  006FD8  6E10               	movwf	___wmul@multiplier+1,c
  2770  006FDA  EC22  F030         	call	___wmul	;wreg free
  2771  006FDE  0E50               	movlw	low __npowers_
  2772  006FE0  240F               	addwf	?___wmul,w,c
  2773  006FE2  6EF6               	movwf	tblptrl,c
  2774  006FE4  0E7F               	movlw	high __npowers_
  2775  006FE6  2010               	addwfc	?___wmul+1,w,c
  2776  006FE8  6EF7               	movwf	tblptrh,c
  2777  006FEA                     	if	0	;There are less than 3 active tblptr bytes
  2778  006FEA                     	endif
  2779  006FEA  0009               	tblrd		*+
  2780  006FEC  CFF5 F018          	movff	tablat,___ftmul@f2
  2781  006FF0  0009               	tblrd		*+
  2782  006FF2  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2783  006FF6  000A               	tblrd		*-
  2784  006FF8  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2785  006FFC  0E00               	movlw	0
  2786  006FFE  6E0A               	movwf	___awdiv@divisor+1,c
  2787  007000  0E64               	movlw	100
  2788  007002  6E09               	movwf	___awdiv@divisor,c
  2789  007004  502A               	movf	scale@scl,w,c
  2790  007006  6E07               	movwf	___awdiv@dividend,c
  2791  007008  6A08               	clrf	___awdiv@dividend+1,c
  2792  00700A  BE07               	btfsc	___awdiv@dividend,7,c
  2793  00700C  0608               	decf	___awdiv@dividend+1,f,c
  2794  00700E  ECFF  F031         	call	___awdiv	;wreg free
  2795  007012  0E12               	movlw	18
  2796  007014  2407               	addwf	?___awdiv,w,c
  2797  007016  6E0F               	movwf	___wmul@multiplier,c
  2798  007018  0E00               	movlw	0
  2799  00701A  2008               	addwfc	?___awdiv+1,w,c
  2800  00701C  6E10               	movwf	___wmul@multiplier+1,c
  2801  00701E  0E00               	movlw	0
  2802  007020  6E12               	movwf	___wmul@multiplicand+1,c
  2803  007022  0E03               	movlw	3
  2804  007024  6E11               	movwf	___wmul@multiplicand,c
  2805  007026  EC22  F030         	call	___wmul	;wreg free
  2806  00702A  0E50               	movlw	low __npowers_
  2807  00702C  240F               	addwf	?___wmul,w,c
  2808  00702E  6EF6               	movwf	tblptrl,c
  2809  007030  0E7F               	movlw	high __npowers_
  2810  007032  2010               	addwfc	?___wmul+1,w,c
  2811  007034  6EF7               	movwf	tblptrh,c
  2812  007036                     	if	0	;There are less than 3 active tblptr bytes
  2813  007036                     	endif
  2814  007036  0009               	tblrd		*+
  2815  007038  CFF5 F015          	movff	tablat,___ftmul@f1
  2816  00703C  0009               	tblrd		*+
  2817  00703E  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2818  007042  000A               	tblrd		*-
  2819  007044  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2820  007048  EC1F  F034         	call	___ftmul	;wreg free
  2821  00704C  C015  F027         	movff	?___ftmul,_scale$1173
  2822  007050  C016  F028         	movff	?___ftmul+1,_scale$1173+1
  2823  007054  C017  F029         	movff	?___ftmul+2,_scale$1173+2
  2824                           
  2825                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2826  007058  C027  F015         	movff	_scale$1173,___ftmul@f1
  2827  00705C  C028  F016         	movff	_scale$1173+1,___ftmul@f1+1
  2828  007060  C029  F017         	movff	_scale$1173+2,___ftmul@f1+2
  2829  007064  0E00               	movlw	0
  2830  007066  6E12               	movwf	___wmul@multiplicand+1,c
  2831  007068  0E03               	movlw	3
  2832  00706A  6E11               	movwf	___wmul@multiplicand,c
  2833  00706C  0E00               	movlw	0
  2834  00706E  6E04               	movwf	___awmod@divisor+1,c
  2835  007070  0E0A               	movlw	10
  2836  007072  6E03               	movwf	___awmod@divisor,c
  2837  007074  502A               	movf	scale@scl,w,c
  2838  007076  6E01               	movwf	___awmod@dividend,c
  2839  007078  6A02               	clrf	___awmod@dividend+1,c
  2840  00707A  BE01               	btfsc	___awmod@dividend,7,c
  2841  00707C  0602               	decf	___awmod@dividend+1,f,c
  2842  00707E  EC86  F031         	call	___awmod	;wreg free
  2843  007082  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2844  007086  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2845  00708A  EC22  F030         	call	___wmul	;wreg free
  2846  00708E  0E50               	movlw	low __npowers_
  2847  007090  240F               	addwf	?___wmul,w,c
  2848  007092  6EF6               	movwf	tblptrl,c
  2849  007094  0E7F               	movlw	high __npowers_
  2850  007096  2010               	addwfc	?___wmul+1,w,c
  2851  007098  6EF7               	movwf	tblptrh,c
  2852  00709A                     	if	0	;There are less than 3 active tblptr bytes
  2853  00709A                     	endif
  2854  00709A  0009               	tblrd		*+
  2855  00709C  CFF5 F018          	movff	tablat,___ftmul@f2
  2856  0070A0  0009               	tblrd		*+
  2857  0070A2  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2858  0070A6  000A               	tblrd		*-
  2859  0070A8  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2860  0070AC  EC1F  F034         	call	___ftmul	;wreg free
  2861  0070B0  C015  F024         	movff	?___ftmul,?_scale
  2862  0070B4  C016  F025         	movff	?___ftmul+1,?_scale+1
  2863  0070B8  C017  F026         	movff	?___ftmul+2,?_scale+2
  2864  0070BC  0012               	return	
  2865  0070BE                     l224:
  2866                           
  2867                           ;doprnt.c: 432: else if(scl > 10)
  2868  0070BE  502A               	movf	scale@scl,w,c
  2869  0070C0  0A80               	xorlw	128
  2870  0070C2  0F75               	addlw	-139
  2871  0070C4  A0D8               	btfss	status,0,c
  2872  0070C6  D053               	goto	l227
  2873                           
  2874                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  2875  0070C8  0E00               	movlw	0
  2876  0070CA  6E0A               	movwf	___awdiv@divisor+1,c
  2877  0070CC  0E0A               	movlw	10
  2878  0070CE  6E09               	movwf	___awdiv@divisor,c
  2879  0070D0  502A               	movf	scale@scl,w,c
  2880  0070D2  6E07               	movwf	___awdiv@dividend,c
  2881  0070D4  6A08               	clrf	___awdiv@dividend+1,c
  2882  0070D6  BE07               	btfsc	___awdiv@dividend,7,c
  2883  0070D8  0608               	decf	___awdiv@dividend+1,f,c
  2884  0070DA  ECFF  F031         	call	___awdiv	;wreg free
  2885  0070DE  0E09               	movlw	9
  2886  0070E0  2407               	addwf	?___awdiv,w,c
  2887  0070E2  6E0F               	movwf	___wmul@multiplier,c
  2888  0070E4  0E00               	movlw	0
  2889  0070E6  2008               	addwfc	?___awdiv+1,w,c
  2890  0070E8  6E10               	movwf	___wmul@multiplier+1,c
  2891  0070EA  0E00               	movlw	0
  2892  0070EC  6E12               	movwf	___wmul@multiplicand+1,c
  2893  0070EE  0E03               	movlw	3
  2894  0070F0  6E11               	movwf	___wmul@multiplicand,c
  2895  0070F2  EC22  F030         	call	___wmul	;wreg free
  2896  0070F6  0E50               	movlw	low __npowers_
  2897  0070F8  240F               	addwf	?___wmul,w,c
  2898  0070FA  6EF6               	movwf	tblptrl,c
  2899  0070FC  0E7F               	movlw	high __npowers_
  2900  0070FE  2010               	addwfc	?___wmul+1,w,c
  2901  007100  6EF7               	movwf	tblptrh,c
  2902  007102                     	if	0	;There are less than 3 active tblptr bytes
  2903  007102                     	endif
  2904  007102  0009               	tblrd		*+
  2905  007104  CFF5 F015          	movff	tablat,___ftmul@f1
  2906  007108  0009               	tblrd		*+
  2907  00710A  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2908  00710E  000A               	tblrd		*-
  2909  007110  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2910  007114  0E00               	movlw	0
  2911  007116  6E12               	movwf	___wmul@multiplicand+1,c
  2912  007118  0E03               	movlw	3
  2913  00711A  6E11               	movwf	___wmul@multiplicand,c
  2914  00711C  0E00               	movlw	0
  2915  00711E  6E04               	movwf	___awmod@divisor+1,c
  2916  007120  0E0A               	movlw	10
  2917  007122  6E03               	movwf	___awmod@divisor,c
  2918  007124  502A               	movf	scale@scl,w,c
  2919  007126  6E01               	movwf	___awmod@dividend,c
  2920  007128  6A02               	clrf	___awmod@dividend+1,c
  2921  00712A  BE01               	btfsc	___awmod@dividend,7,c
  2922  00712C  0602               	decf	___awmod@dividend+1,f,c
  2923  00712E  EC86  F031         	call	___awmod	;wreg free
  2924  007132  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2925  007136  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2926  00713A  EC22  F030         	call	___wmul	;wreg free
  2927  00713E  0E50               	movlw	low __npowers_
  2928  007140  240F               	addwf	?___wmul,w,c
  2929  007142  6EF6               	movwf	tblptrl,c
  2930  007144  0E7F               	movlw	high __npowers_
  2931  007146  2010               	addwfc	?___wmul+1,w,c
  2932  007148  6EF7               	movwf	tblptrh,c
  2933  00714A                     	if	0	;There are less than 3 active tblptr bytes
  2934  00714A                     	endif
  2935  00714A  0009               	tblrd		*+
  2936  00714C  CFF5 F018          	movff	tablat,___ftmul@f2
  2937  007150  0009               	tblrd		*+
  2938  007152  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2939  007156  000A               	tblrd		*-
  2940  007158  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2941  00715C  EC1F  F034         	call	___ftmul	;wreg free
  2942  007160  C015  F024         	movff	?___ftmul,?_scale
  2943  007164  C016  F025         	movff	?___ftmul+1,?_scale+1
  2944  007168  C017  F026         	movff	?___ftmul+2,?_scale+2
  2945  00716C  0012               	return	
  2946  00716E                     l227:
  2947                           
  2948                           ;doprnt.c: 434: return _npowers_[scl];
  2949  00716E  502A               	movf	scale@scl,w,c
  2950  007170  0D03               	mullw	3
  2951  007172  0E50               	movlw	low __npowers_
  2952  007174  24F3               	addwf	prodl,w,c
  2953  007176  6EF6               	movwf	tblptrl,c
  2954  007178  0E7F               	movlw	high __npowers_
  2955  00717A  20F4               	addwfc	prodh,w,c
  2956  00717C  6EF7               	movwf	tblptrh,c
  2957  00717E                     	if	0	;There are less than 3 active tblptr bytes
  2958  00717E                     	endif
  2959  00717E  0009               	tblrd		*+
  2960  007180  CFF5 F024          	movff	tablat,?_scale
  2961  007184  0009               	tblrd		*+
  2962  007186  CFF5 F025          	movff	tablat,?_scale+1
  2963  00718A  000A               	tblrd		*-
  2964  00718C  CFF5 F026          	movff	tablat,?_scale+2
  2965  007190  0012               	return	
  2966  007192                     l223:
  2967                           
  2968                           ;doprnt.c: 435: }
  2969                           ;doprnt.c: 436: if(scl>=110)
  2970  007192  502A               	movf	scale@scl,w,c
  2971  007194  0A80               	xorlw	128
  2972  007196  0F12               	addlw	-238
  2973  007198  A0D8               	btfss	status,0,c
  2974  00719A  D091               	goto	l228
  2975                           
  2976                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  2977  00719C  0E00               	movlw	0
  2978  00719E  6E12               	movwf	___wmul@multiplicand+1,c
  2979  0071A0  0E03               	movlw	3
  2980  0071A2  6E11               	movwf	___wmul@multiplicand,c
  2981  0071A4  0E00               	movlw	0
  2982  0071A6  6E0A               	movwf	___awdiv@divisor+1,c
  2983  0071A8  0E0A               	movlw	10
  2984  0071AA  6E09               	movwf	___awdiv@divisor,c
  2985  0071AC  0E00               	movlw	0
  2986  0071AE  6E04               	movwf	___awmod@divisor+1,c
  2987  0071B0  0E64               	movlw	100
  2988  0071B2  6E03               	movwf	___awmod@divisor,c
  2989  0071B4  502A               	movf	scale@scl,w,c
  2990  0071B6  6E01               	movwf	___awmod@dividend,c
  2991  0071B8  6A02               	clrf	___awmod@dividend+1,c
  2992  0071BA  BE01               	btfsc	___awmod@dividend,7,c
  2993  0071BC  0602               	decf	___awmod@dividend+1,f,c
  2994  0071BE  EC86  F031         	call	___awmod	;wreg free
  2995  0071C2  C001  F007         	movff	?___awmod,___awdiv@dividend
  2996  0071C6  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  2997  0071CA  ECFF  F031         	call	___awdiv	;wreg free
  2998  0071CE  0E09               	movlw	9
  2999  0071D0  2407               	addwf	?___awdiv,w,c
  3000  0071D2  6E0F               	movwf	___wmul@multiplier,c
  3001  0071D4  0E00               	movlw	0
  3002  0071D6  2008               	addwfc	?___awdiv+1,w,c
  3003  0071D8  6E10               	movwf	___wmul@multiplier+1,c
  3004  0071DA  EC22  F030         	call	___wmul	;wreg free
  3005  0071DE  0E29               	movlw	low __powers_
  3006  0071E0  240F               	addwf	?___wmul,w,c
  3007  0071E2  6EF6               	movwf	tblptrl,c
  3008  0071E4  0E7F               	movlw	high __powers_
  3009  0071E6  2010               	addwfc	?___wmul+1,w,c
  3010  0071E8  6EF7               	movwf	tblptrh,c
  3011  0071EA                     	if	0	;There are less than 3 active tblptr bytes
  3012  0071EA                     	endif
  3013  0071EA  0009               	tblrd		*+
  3014  0071EC  CFF5 F018          	movff	tablat,___ftmul@f2
  3015  0071F0  0009               	tblrd		*+
  3016  0071F2  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3017  0071F6  000A               	tblrd		*-
  3018  0071F8  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3019  0071FC  0E00               	movlw	0
  3020  0071FE  6E0A               	movwf	___awdiv@divisor+1,c
  3021  007200  0E64               	movlw	100
  3022  007202  6E09               	movwf	___awdiv@divisor,c
  3023  007204  502A               	movf	scale@scl,w,c
  3024  007206  6E07               	movwf	___awdiv@dividend,c
  3025  007208  6A08               	clrf	___awdiv@dividend+1,c
  3026  00720A  BE07               	btfsc	___awdiv@dividend,7,c
  3027  00720C  0608               	decf	___awdiv@dividend+1,f,c
  3028  00720E  ECFF  F031         	call	___awdiv	;wreg free
  3029  007212  0E12               	movlw	18
  3030  007214  2407               	addwf	?___awdiv,w,c
  3031  007216  6E0F               	movwf	___wmul@multiplier,c
  3032  007218  0E00               	movlw	0
  3033  00721A  2008               	addwfc	?___awdiv+1,w,c
  3034  00721C  6E10               	movwf	___wmul@multiplier+1,c
  3035  00721E  0E00               	movlw	0
  3036  007220  6E12               	movwf	___wmul@multiplicand+1,c
  3037  007222  0E03               	movlw	3
  3038  007224  6E11               	movwf	___wmul@multiplicand,c
  3039  007226  EC22  F030         	call	___wmul	;wreg free
  3040  00722A  0E29               	movlw	low __powers_
  3041  00722C  240F               	addwf	?___wmul,w,c
  3042  00722E  6EF6               	movwf	tblptrl,c
  3043  007230  0E7F               	movlw	high __powers_
  3044  007232  2010               	addwfc	?___wmul+1,w,c
  3045  007234  6EF7               	movwf	tblptrh,c
  3046  007236                     	if	0	;There are less than 3 active tblptr bytes
  3047  007236                     	endif
  3048  007236  0009               	tblrd		*+
  3049  007238  CFF5 F015          	movff	tablat,___ftmul@f1
  3050  00723C  0009               	tblrd		*+
  3051  00723E  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3052  007242  000A               	tblrd		*-
  3053  007244  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3054  007248  EC1F  F034         	call	___ftmul	;wreg free
  3055  00724C  C015  F027         	movff	?___ftmul,_scale$1173
  3056  007250  C016  F028         	movff	?___ftmul+1,_scale$1173+1
  3057  007254  C017  F029         	movff	?___ftmul+2,_scale$1173+2
  3058                           
  3059                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3060  007258  C027  F015         	movff	_scale$1173,___ftmul@f1
  3061  00725C  C028  F016         	movff	_scale$1173+1,___ftmul@f1+1
  3062  007260  C029  F017         	movff	_scale$1173+2,___ftmul@f1+2
  3063  007264  0E00               	movlw	0
  3064  007266  6E12               	movwf	___wmul@multiplicand+1,c
  3065  007268  0E03               	movlw	3
  3066  00726A  6E11               	movwf	___wmul@multiplicand,c
  3067  00726C  0E00               	movlw	0
  3068  00726E  6E04               	movwf	___awmod@divisor+1,c
  3069  007270  0E0A               	movlw	10
  3070  007272  6E03               	movwf	___awmod@divisor,c
  3071  007274  502A               	movf	scale@scl,w,c
  3072  007276  6E01               	movwf	___awmod@dividend,c
  3073  007278  6A02               	clrf	___awmod@dividend+1,c
  3074  00727A  BE01               	btfsc	___awmod@dividend,7,c
  3075  00727C  0602               	decf	___awmod@dividend+1,f,c
  3076  00727E  EC86  F031         	call	___awmod	;wreg free
  3077  007282  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3078  007286  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3079  00728A  EC22  F030         	call	___wmul	;wreg free
  3080  00728E  0E29               	movlw	low __powers_
  3081  007290  240F               	addwf	?___wmul,w,c
  3082  007292  6EF6               	movwf	tblptrl,c
  3083  007294  0E7F               	movlw	high __powers_
  3084  007296  2010               	addwfc	?___wmul+1,w,c
  3085  007298  6EF7               	movwf	tblptrh,c
  3086  00729A                     	if	0	;There are less than 3 active tblptr bytes
  3087  00729A                     	endif
  3088  00729A  0009               	tblrd		*+
  3089  00729C  CFF5 F018          	movff	tablat,___ftmul@f2
  3090  0072A0  0009               	tblrd		*+
  3091  0072A2  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3092  0072A6  000A               	tblrd		*-
  3093  0072A8  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3094  0072AC  EC1F  F034         	call	___ftmul	;wreg free
  3095  0072B0  C015  F024         	movff	?___ftmul,?_scale
  3096  0072B4  C016  F025         	movff	?___ftmul+1,?_scale+1
  3097  0072B8  C017  F026         	movff	?___ftmul+2,?_scale+2
  3098  0072BC  0012               	return	
  3099  0072BE                     l228:
  3100                           
  3101                           ;doprnt.c: 438: else if(scl > 10)
  3102  0072BE  502A               	movf	scale@scl,w,c
  3103  0072C0  0A80               	xorlw	128
  3104  0072C2  0F75               	addlw	-139
  3105  0072C4  A0D8               	btfss	status,0,c
  3106  0072C6  D053               	goto	l230
  3107                           
  3108                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  3109  0072C8  0E00               	movlw	0
  3110  0072CA  6E0A               	movwf	___awdiv@divisor+1,c
  3111  0072CC  0E0A               	movlw	10
  3112  0072CE  6E09               	movwf	___awdiv@divisor,c
  3113  0072D0  502A               	movf	scale@scl,w,c
  3114  0072D2  6E07               	movwf	___awdiv@dividend,c
  3115  0072D4  6A08               	clrf	___awdiv@dividend+1,c
  3116  0072D6  BE07               	btfsc	___awdiv@dividend,7,c
  3117  0072D8  0608               	decf	___awdiv@dividend+1,f,c
  3118  0072DA  ECFF  F031         	call	___awdiv	;wreg free
  3119  0072DE  0E09               	movlw	9
  3120  0072E0  2407               	addwf	?___awdiv,w,c
  3121  0072E2  6E0F               	movwf	___wmul@multiplier,c
  3122  0072E4  0E00               	movlw	0
  3123  0072E6  2008               	addwfc	?___awdiv+1,w,c
  3124  0072E8  6E10               	movwf	___wmul@multiplier+1,c
  3125  0072EA  0E00               	movlw	0
  3126  0072EC  6E12               	movwf	___wmul@multiplicand+1,c
  3127  0072EE  0E03               	movlw	3
  3128  0072F0  6E11               	movwf	___wmul@multiplicand,c
  3129  0072F2  EC22  F030         	call	___wmul	;wreg free
  3130  0072F6  0E29               	movlw	low __powers_
  3131  0072F8  240F               	addwf	?___wmul,w,c
  3132  0072FA  6EF6               	movwf	tblptrl,c
  3133  0072FC  0E7F               	movlw	high __powers_
  3134  0072FE  2010               	addwfc	?___wmul+1,w,c
  3135  007300  6EF7               	movwf	tblptrh,c
  3136  007302                     	if	0	;There are less than 3 active tblptr bytes
  3137  007302                     	endif
  3138  007302  0009               	tblrd		*+
  3139  007304  CFF5 F015          	movff	tablat,___ftmul@f1
  3140  007308  0009               	tblrd		*+
  3141  00730A  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3142  00730E  000A               	tblrd		*-
  3143  007310  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3144  007314  0E00               	movlw	0
  3145  007316  6E12               	movwf	___wmul@multiplicand+1,c
  3146  007318  0E03               	movlw	3
  3147  00731A  6E11               	movwf	___wmul@multiplicand,c
  3148  00731C  0E00               	movlw	0
  3149  00731E  6E04               	movwf	___awmod@divisor+1,c
  3150  007320  0E0A               	movlw	10
  3151  007322  6E03               	movwf	___awmod@divisor,c
  3152  007324  502A               	movf	scale@scl,w,c
  3153  007326  6E01               	movwf	___awmod@dividend,c
  3154  007328  6A02               	clrf	___awmod@dividend+1,c
  3155  00732A  BE01               	btfsc	___awmod@dividend,7,c
  3156  00732C  0602               	decf	___awmod@dividend+1,f,c
  3157  00732E  EC86  F031         	call	___awmod	;wreg free
  3158  007332  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3159  007336  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3160  00733A  EC22  F030         	call	___wmul	;wreg free
  3161  00733E  0E29               	movlw	low __powers_
  3162  007340  240F               	addwf	?___wmul,w,c
  3163  007342  6EF6               	movwf	tblptrl,c
  3164  007344  0E7F               	movlw	high __powers_
  3165  007346  2010               	addwfc	?___wmul+1,w,c
  3166  007348  6EF7               	movwf	tblptrh,c
  3167  00734A                     	if	0	;There are less than 3 active tblptr bytes
  3168  00734A                     	endif
  3169  00734A  0009               	tblrd		*+
  3170  00734C  CFF5 F018          	movff	tablat,___ftmul@f2
  3171  007350  0009               	tblrd		*+
  3172  007352  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3173  007356  000A               	tblrd		*-
  3174  007358  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3175  00735C  EC1F  F034         	call	___ftmul	;wreg free
  3176  007360  C015  F024         	movff	?___ftmul,?_scale
  3177  007364  C016  F025         	movff	?___ftmul+1,?_scale+1
  3178  007368  C017  F026         	movff	?___ftmul+2,?_scale+2
  3179  00736C  0012               	return	
  3180  00736E                     l230:
  3181                           
  3182                           ;doprnt.c: 440: return _powers_[scl];
  3183  00736E  502A               	movf	scale@scl,w,c
  3184  007370  0D03               	mullw	3
  3185  007372  0E29               	movlw	low __powers_
  3186  007374  24F3               	addwf	prodl,w,c
  3187  007376  6EF6               	movwf	tblptrl,c
  3188  007378  0E7F               	movlw	high __powers_
  3189  00737A  20F4               	addwfc	prodh,w,c
  3190  00737C  6EF7               	movwf	tblptrh,c
  3191  00737E                     	if	0	;There are less than 3 active tblptr bytes
  3192  00737E                     	endif
  3193  00737E  0009               	tblrd		*+
  3194  007380  CFF5 F024          	movff	tablat,?_scale
  3195  007384  0009               	tblrd		*+
  3196  007386  CFF5 F025          	movff	tablat,?_scale+1
  3197  00738A  000A               	tblrd		*-
  3198  00738C  CFF5 F026          	movff	tablat,?_scale+2
  3199  007390  0012               	return	
  3200  007392                     __end_of_scale:
  3201                           	opt stack 0
  3202                           tblptru	equ	0xFF8
  3203                           tblptrh	equ	0xFF7
  3204                           tblptrl	equ	0xFF6
  3205                           tablat	equ	0xFF5
  3206                           prodh	equ	0xFF4
  3207                           prodl	equ	0xFF3
  3208                           postinc0	equ	0xFEE
  3209                           wreg	equ	0xFE8
  3210                           indf2	equ	0xFDF
  3211                           postinc2	equ	0xFDE
  3212                           postdec2	equ	0xFDD
  3213                           fsr2h	equ	0xFDA
  3214                           fsr2l	equ	0xFD9
  3215                           status	equ	0xFD8
  3216                           
  3217 ;; *************** function _isdigit *****************
  3218 ;; Defined at:
  3219 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  3220 ;; Parameters:    Size  Location     Type
  3221 ;;  c               1    wreg     unsigned char 
  3222 ;; Auto vars:     Size  Location     Type
  3223 ;;  c               1    2[COMRAM] unsigned char 
  3224 ;; Return value:  Size  Location     Type
  3225 ;;		None               void
  3226 ;; Registers used:
  3227 ;;		wreg, status,2, status,0
  3228 ;; Tracked objects:
  3229 ;;		On entry : 0/0
  3230 ;;		On exit  : 0/0
  3231 ;;		Unchanged: 0/0
  3232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3233 ;;      Params:         0       0       0       0       0       0       0       0       0
  3234 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3235 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3236 ;;      Totals:         3       0       0       0       0       0       0       0       0
  3237 ;;Total ram usage:        3 bytes
  3238 ;; Hardware stack levels used:    1
  3239 ;; This function calls:
  3240 ;;		Nothing
  3241 ;; This function is called by:
  3242 ;;		_sprintf
  3243 ;; This function uses a non-reentrant model
  3244 ;;
  3245                           
  3246                           	psect	text3
  3247  005F78                     __ptext3:
  3248                           	opt stack 0
  3249  005F78                     _isdigit:
  3250                           	opt stack 29
  3251                           
  3252                           ;incstack = 0
  3253                           ;isdigit@c stored from wreg
  3254  005F78  6E03               	movwf	isdigit@c,c
  3255  005F7A  0E00               	movlw	0
  3256  005F7C  6E02               	movwf	_isdigit$823,c
  3257  005F7E  0E3A               	movlw	58
  3258  005F80  6003               	cpfslt	isdigit@c,c
  3259  005F82  D005               	goto	l655
  3260  005F84  0E2F               	movlw	47
  3261  005F86  6403               	cpfsgt	isdigit@c,c
  3262  005F88  D002               	goto	l655
  3263  005F8A  0E01               	movlw	1
  3264  005F8C  6E02               	movwf	_isdigit$823,c
  3265  005F8E                     l655:
  3266  005F8E  C002  F001         	movff	_isdigit$823,??_isdigit
  3267  005F92  3001               	rrcf	??_isdigit,w,c
  3268  005F94  0012               	return	
  3269  005F96                     __end_of_isdigit:
  3270                           	opt stack 0
  3271                           tblptru	equ	0xFF8
  3272                           tblptrh	equ	0xFF7
  3273                           tblptrl	equ	0xFF6
  3274                           tablat	equ	0xFF5
  3275                           prodh	equ	0xFF4
  3276                           prodl	equ	0xFF3
  3277                           postinc0	equ	0xFEE
  3278                           wreg	equ	0xFE8
  3279                           indf2	equ	0xFDF
  3280                           postinc2	equ	0xFDE
  3281                           postdec2	equ	0xFDD
  3282                           fsr2h	equ	0xFDA
  3283                           fsr2l	equ	0xFD9
  3284                           status	equ	0xFD8
  3285                           
  3286 ;; *************** function _fround *****************
  3287 ;; Defined at:
  3288 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  3289 ;; Parameters:    Size  Location     Type
  3290 ;;  prec            1    wreg     unsigned char 
  3291 ;; Auto vars:     Size  Location     Type
  3292 ;;  prec            1   44[COMRAM] unsigned char 
  3293 ;; Return value:  Size  Location     Type
  3294 ;;                  3   35[COMRAM] unsigned char 
  3295 ;; Registers used:
  3296 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3297 ;; Tracked objects:
  3298 ;;		On entry : 0/0
  3299 ;;		On exit  : 0/0
  3300 ;;		Unchanged: 0/0
  3301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3302 ;;      Params:         3       0       0       0       0       0       0       0       0
  3303 ;;      Locals:         7       0       0       0       0       0       0       0       0
  3304 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3305 ;;      Totals:        10       0       0       0       0       0       0       0       0
  3306 ;;Total ram usage:       10 bytes
  3307 ;; Hardware stack levels used:    1
  3308 ;; Hardware stack levels required when called:    2
  3309 ;; This function calls:
  3310 ;;		___awdiv
  3311 ;;		___awmod
  3312 ;;		___ftmul
  3313 ;;		___wmul
  3314 ;; This function is called by:
  3315 ;;		_sprintf
  3316 ;; This function uses a non-reentrant model
  3317 ;;
  3318                           
  3319                           	psect	text4
  3320  006D38                     __ptext4:
  3321                           	opt stack 0
  3322  006D38                     _fround:
  3323                           	opt stack 27
  3324                           
  3325                           ;incstack = 0
  3326                           ;fround@prec stored from wreg
  3327  006D38  6E2D               	movwf	fround@prec,c
  3328                           
  3329                           ;doprnt.c: 413: if(prec>=110)
  3330  006D3A  0E6D               	movlw	109
  3331  006D3C  642D               	cpfsgt	fround@prec,c
  3332  006D3E  D09F               	goto	l217
  3333                           
  3334                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3335  006D40  0E00               	movlw	0
  3336  006D42  6E12               	movwf	___wmul@multiplicand+1,c
  3337  006D44  0E03               	movlw	3
  3338  006D46  6E11               	movwf	___wmul@multiplicand,c
  3339  006D48  0E00               	movlw	0
  3340  006D4A  6E0A               	movwf	___awdiv@divisor+1,c
  3341  006D4C  0E0A               	movlw	10
  3342  006D4E  6E09               	movwf	___awdiv@divisor,c
  3343  006D50  0E00               	movlw	0
  3344  006D52  6E04               	movwf	___awmod@divisor+1,c
  3345  006D54  0E64               	movlw	100
  3346  006D56  6E03               	movwf	___awmod@divisor,c
  3347  006D58  C02D  F001         	movff	fround@prec,___awmod@dividend
  3348  006D5C  6A02               	clrf	___awmod@dividend+1,c
  3349  006D5E  EC86  F031         	call	___awmod	;wreg free
  3350  006D62  C001  F007         	movff	?___awmod,___awdiv@dividend
  3351  006D66  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  3352  006D6A  ECFF  F031         	call	___awdiv	;wreg free
  3353  006D6E  0E09               	movlw	9
  3354  006D70  2407               	addwf	?___awdiv,w,c
  3355  006D72  6E0F               	movwf	___wmul@multiplier,c
  3356  006D74  0E00               	movlw	0
  3357  006D76  2008               	addwfc	?___awdiv+1,w,c
  3358  006D78  6E10               	movwf	___wmul@multiplier+1,c
  3359  006D7A  EC22  F030         	call	___wmul	;wreg free
  3360  006D7E  0E50               	movlw	low __npowers_
  3361  006D80  240F               	addwf	?___wmul,w,c
  3362  006D82  6EF6               	movwf	tblptrl,c
  3363  006D84  0E7F               	movlw	high __npowers_
  3364  006D86  2010               	addwfc	?___wmul+1,w,c
  3365  006D88  6EF7               	movwf	tblptrh,c
  3366  006D8A                     	if	0	;There are less than 3 active tblptr bytes
  3367  006D8A                     	endif
  3368  006D8A  0009               	tblrd		*+
  3369  006D8C  CFF5 F018          	movff	tablat,___ftmul@f2
  3370  006D90  0009               	tblrd		*+
  3371  006D92  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3372  006D96  000A               	tblrd		*-
  3373  006D98  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3374  006D9C  0E00               	movlw	0
  3375  006D9E  6E0A               	movwf	___awdiv@divisor+1,c
  3376  006DA0  0E64               	movlw	100
  3377  006DA2  6E09               	movwf	___awdiv@divisor,c
  3378  006DA4  C02D  F007         	movff	fround@prec,___awdiv@dividend
  3379  006DA8  6A08               	clrf	___awdiv@dividend+1,c
  3380  006DAA  ECFF  F031         	call	___awdiv	;wreg free
  3381  006DAE  0E12               	movlw	18
  3382  006DB0  2407               	addwf	?___awdiv,w,c
  3383  006DB2  6E0F               	movwf	___wmul@multiplier,c
  3384  006DB4  0E00               	movlw	0
  3385  006DB6  2008               	addwfc	?___awdiv+1,w,c
  3386  006DB8  6E10               	movwf	___wmul@multiplier+1,c
  3387  006DBA  0E00               	movlw	0
  3388  006DBC  6E12               	movwf	___wmul@multiplicand+1,c
  3389  006DBE  0E03               	movlw	3
  3390  006DC0  6E11               	movwf	___wmul@multiplicand,c
  3391  006DC2  EC22  F030         	call	___wmul	;wreg free
  3392  006DC6  0E50               	movlw	low __npowers_
  3393  006DC8  240F               	addwf	?___wmul,w,c
  3394  006DCA  6EF6               	movwf	tblptrl,c
  3395  006DCC  0E7F               	movlw	high __npowers_
  3396  006DCE  2010               	addwfc	?___wmul+1,w,c
  3397  006DD0  6EF7               	movwf	tblptrh,c
  3398  006DD2                     	if	0	;There are less than 3 active tblptr bytes
  3399  006DD2                     	endif
  3400  006DD2  0009               	tblrd		*+
  3401  006DD4  CFF5 F015          	movff	tablat,___ftmul@f1
  3402  006DD8  0009               	tblrd		*+
  3403  006DDA  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3404  006DDE  000A               	tblrd		*-
  3405  006DE0  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3406  006DE4  EC1F  F034         	call	___ftmul	;wreg free
  3407  006DE8  C015  F02A         	movff	?___ftmul,_fround$1171
  3408  006DEC  C016  F02B         	movff	?___ftmul+1,_fround$1171+1
  3409  006DF0  C017  F02C         	movff	?___ftmul+2,_fround$1171+2
  3410                           
  3411                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3412  006DF4  0E00               	movlw	0
  3413  006DF6  6E12               	movwf	___wmul@multiplicand+1,c
  3414  006DF8  0E03               	movlw	3
  3415  006DFA  6E11               	movwf	___wmul@multiplicand,c
  3416  006DFC  0E00               	movlw	0
  3417  006DFE  6E04               	movwf	___awmod@divisor+1,c
  3418  006E00  0E0A               	movlw	10
  3419  006E02  6E03               	movwf	___awmod@divisor,c
  3420  006E04  C02D  F001         	movff	fround@prec,___awmod@dividend
  3421  006E08  6A02               	clrf	___awmod@dividend+1,c
  3422  006E0A  EC86  F031         	call	___awmod	;wreg free
  3423  006E0E  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3424  006E12  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3425  006E16  EC22  F030         	call	___wmul	;wreg free
  3426  006E1A  0E50               	movlw	low __npowers_
  3427  006E1C  240F               	addwf	?___wmul,w,c
  3428  006E1E  6EF6               	movwf	tblptrl,c
  3429  006E20  0E7F               	movlw	high __npowers_
  3430  006E22  2010               	addwfc	?___wmul+1,w,c
  3431  006E24  6EF7               	movwf	tblptrh,c
  3432  006E26                     	if	0	;There are less than 3 active tblptr bytes
  3433  006E26                     	endif
  3434  006E26  0009               	tblrd		*+
  3435  006E28  CFF5 F018          	movff	tablat,___ftmul@f2
  3436  006E2C  0009               	tblrd		*+
  3437  006E2E  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3438  006E32  000A               	tblrd		*-
  3439  006E34  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3440  006E38  C02A  F015         	movff	_fround$1171,___ftmul@f1
  3441  006E3C  C02B  F016         	movff	_fround$1171+1,___ftmul@f1+1
  3442  006E40  C02C  F017         	movff	_fround$1171+2,___ftmul@f1+2
  3443  006E44  EC1F  F034         	call	___ftmul	;wreg free
  3444  006E48  C015  F027         	movff	?___ftmul,_fround$1172
  3445  006E4C  C016  F028         	movff	?___ftmul+1,_fround$1172+1
  3446  006E50  C017  F029         	movff	?___ftmul+2,_fround$1172+2
  3447                           
  3448                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3449  006E54  C027  F015         	movff	_fround$1172,___ftmul@f1
  3450  006E58  C028  F016         	movff	_fround$1172+1,___ftmul@f1+1
  3451  006E5C  C029  F017         	movff	_fround$1172+2,___ftmul@f1+2
  3452  006E60  0E00               	movlw	0
  3453  006E62  6E18               	movwf	___ftmul@f2,c
  3454  006E64  0E00               	movlw	0
  3455  006E66  6E19               	movwf	___ftmul@f2+1,c
  3456  006E68  0E3F               	movlw	63
  3457  006E6A  6E1A               	movwf	___ftmul@f2+2,c
  3458  006E6C  EC1F  F034         	call	___ftmul	;wreg free
  3459  006E70  C015  F024         	movff	?___ftmul,?_fround
  3460  006E74  C016  F025         	movff	?___ftmul+1,?_fround+1
  3461  006E78  C017  F026         	movff	?___ftmul+2,?_fround+2
  3462  006E7C  0012               	return	
  3463  006E7E                     l217:
  3464                           
  3465                           ;doprnt.c: 415: else if(prec > 10)
  3466  006E7E  0E0A               	movlw	10
  3467  006E80  642D               	cpfsgt	fround@prec,c
  3468  006E82  D063               	goto	l220
  3469                           
  3470                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3471  006E84  0E00               	movlw	0
  3472  006E86  6E12               	movwf	___wmul@multiplicand+1,c
  3473  006E88  0E03               	movlw	3
  3474  006E8A  6E11               	movwf	___wmul@multiplicand,c
  3475  006E8C  0E00               	movlw	0
  3476  006E8E  6E04               	movwf	___awmod@divisor+1,c
  3477  006E90  0E0A               	movlw	10
  3478  006E92  6E03               	movwf	___awmod@divisor,c
  3479  006E94  C02D  F001         	movff	fround@prec,___awmod@dividend
  3480  006E98  6A02               	clrf	___awmod@dividend+1,c
  3481  006E9A  EC86  F031         	call	___awmod	;wreg free
  3482  006E9E  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3483  006EA2  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3484  006EA6  EC22  F030         	call	___wmul	;wreg free
  3485  006EAA  0E50               	movlw	low __npowers_
  3486  006EAC  240F               	addwf	?___wmul,w,c
  3487  006EAE  6EF6               	movwf	tblptrl,c
  3488  006EB0  0E7F               	movlw	high __npowers_
  3489  006EB2  2010               	addwfc	?___wmul+1,w,c
  3490  006EB4  6EF7               	movwf	tblptrh,c
  3491  006EB6                     	if	0	;There are less than 3 active tblptr bytes
  3492  006EB6                     	endif
  3493  006EB6  0009               	tblrd		*+
  3494  006EB8  CFF5 F018          	movff	tablat,___ftmul@f2
  3495  006EBC  0009               	tblrd		*+
  3496  006EBE  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3497  006EC2  000A               	tblrd		*-
  3498  006EC4  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3499  006EC8  0E00               	movlw	0
  3500  006ECA  6E0A               	movwf	___awdiv@divisor+1,c
  3501  006ECC  0E0A               	movlw	10
  3502  006ECE  6E09               	movwf	___awdiv@divisor,c
  3503  006ED0  C02D  F007         	movff	fround@prec,___awdiv@dividend
  3504  006ED4  6A08               	clrf	___awdiv@dividend+1,c
  3505  006ED6  ECFF  F031         	call	___awdiv	;wreg free
  3506  006EDA  0E09               	movlw	9
  3507  006EDC  2407               	addwf	?___awdiv,w,c
  3508  006EDE  6E0F               	movwf	___wmul@multiplier,c
  3509  006EE0  0E00               	movlw	0
  3510  006EE2  2008               	addwfc	?___awdiv+1,w,c
  3511  006EE4  6E10               	movwf	___wmul@multiplier+1,c
  3512  006EE6  0E00               	movlw	0
  3513  006EE8  6E12               	movwf	___wmul@multiplicand+1,c
  3514  006EEA  0E03               	movlw	3
  3515  006EEC  6E11               	movwf	___wmul@multiplicand,c
  3516  006EEE  EC22  F030         	call	___wmul	;wreg free
  3517  006EF2  0E50               	movlw	low __npowers_
  3518  006EF4  240F               	addwf	?___wmul,w,c
  3519  006EF6  6EF6               	movwf	tblptrl,c
  3520  006EF8  0E7F               	movlw	high __npowers_
  3521  006EFA  2010               	addwfc	?___wmul+1,w,c
  3522  006EFC  6EF7               	movwf	tblptrh,c
  3523  006EFE                     	if	0	;There are less than 3 active tblptr bytes
  3524  006EFE                     	endif
  3525  006EFE  0009               	tblrd		*+
  3526  006F00  CFF5 F015          	movff	tablat,___ftmul@f1
  3527  006F04  0009               	tblrd		*+
  3528  006F06  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3529  006F0A  000A               	tblrd		*-
  3530  006F0C  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3531  006F10  EC1F  F034         	call	___ftmul	;wreg free
  3532  006F14  C015  F02A         	movff	?___ftmul,_fround$1171
  3533  006F18  C016  F02B         	movff	?___ftmul+1,_fround$1171+1
  3534  006F1C  C017  F02C         	movff	?___ftmul+2,_fround$1171+2
  3535                           
  3536                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3537  006F20  C02A  F015         	movff	_fround$1171,___ftmul@f1
  3538  006F24  C02B  F016         	movff	_fround$1171+1,___ftmul@f1+1
  3539  006F28  C02C  F017         	movff	_fround$1171+2,___ftmul@f1+2
  3540  006F2C  0E00               	movlw	0
  3541  006F2E  6E18               	movwf	___ftmul@f2,c
  3542  006F30  0E00               	movlw	0
  3543  006F32  6E19               	movwf	___ftmul@f2+1,c
  3544  006F34  0E3F               	movlw	63
  3545  006F36  6E1A               	movwf	___ftmul@f2+2,c
  3546  006F38  EC1F  F034         	call	___ftmul	;wreg free
  3547  006F3C  C015  F024         	movff	?___ftmul,?_fround
  3548  006F40  C016  F025         	movff	?___ftmul+1,?_fround+1
  3549  006F44  C017  F026         	movff	?___ftmul+2,?_fround+2
  3550  006F48  0012               	return	
  3551  006F4A                     l220:
  3552                           
  3553                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  3554  006F4A  502D               	movf	fround@prec,w,c
  3555  006F4C  0D03               	mullw	3
  3556  006F4E  0E50               	movlw	low __npowers_
  3557  006F50  24F3               	addwf	prodl,w,c
  3558  006F52  6EF6               	movwf	tblptrl,c
  3559  006F54  0E7F               	movlw	high __npowers_
  3560  006F56  20F4               	addwfc	prodh,w,c
  3561  006F58  6EF7               	movwf	tblptrh,c
  3562  006F5A                     	if	0	;There are less than 3 active tblptr bytes
  3563  006F5A                     	endif
  3564  006F5A  0009               	tblrd		*+
  3565  006F5C  CFF5 F015          	movff	tablat,___ftmul@f1
  3566  006F60  0009               	tblrd		*+
  3567  006F62  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3568  006F66  000A               	tblrd		*-
  3569  006F68  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3570  006F6C  0E00               	movlw	0
  3571  006F6E  6E18               	movwf	___ftmul@f2,c
  3572  006F70  0E00               	movlw	0
  3573  006F72  6E19               	movwf	___ftmul@f2+1,c
  3574  006F74  0E3F               	movlw	63
  3575  006F76  6E1A               	movwf	___ftmul@f2+2,c
  3576  006F78  EC1F  F034         	call	___ftmul	;wreg free
  3577  006F7C  C015  F024         	movff	?___ftmul,?_fround
  3578  006F80  C016  F025         	movff	?___ftmul+1,?_fround+1
  3579  006F84  C017  F026         	movff	?___ftmul+2,?_fround+2
  3580  006F88  0012               	return	
  3581  006F8A                     __end_of_fround:
  3582                           	opt stack 0
  3583                           tblptru	equ	0xFF8
  3584                           tblptrh	equ	0xFF7
  3585                           tblptrl	equ	0xFF6
  3586                           tablat	equ	0xFF5
  3587                           prodh	equ	0xFF4
  3588                           prodl	equ	0xFF3
  3589                           postinc0	equ	0xFEE
  3590                           wreg	equ	0xFE8
  3591                           indf2	equ	0xFDF
  3592                           postinc2	equ	0xFDE
  3593                           postdec2	equ	0xFDD
  3594                           fsr2h	equ	0xFDA
  3595                           fsr2l	equ	0xFD9
  3596                           status	equ	0xFD8
  3597                           
  3598 ;; *************** function ___wmul *****************
  3599 ;; Defined at:
  3600 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  3601 ;; Parameters:    Size  Location     Type
  3602 ;;  multiplier      2   14[COMRAM] unsigned int 
  3603 ;;  multiplicand    2   16[COMRAM] unsigned int 
  3604 ;; Auto vars:     Size  Location     Type
  3605 ;;  product         2   18[COMRAM] unsigned int 
  3606 ;; Return value:  Size  Location     Type
  3607 ;;                  2   14[COMRAM] unsigned int 
  3608 ;; Registers used:
  3609 ;;		wreg, status,2, status,0, prodl, prodh
  3610 ;; Tracked objects:
  3611 ;;		On entry : 0/0
  3612 ;;		On exit  : 0/0
  3613 ;;		Unchanged: 0/0
  3614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3615 ;;      Params:         4       0       0       0       0       0       0       0       0
  3616 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3617 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3618 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3619 ;;Total ram usage:        6 bytes
  3620 ;; Hardware stack levels used:    1
  3621 ;; This function calls:
  3622 ;;		Nothing
  3623 ;; This function is called by:
  3624 ;;		_fround
  3625 ;;		_scale
  3626 ;;		_sprintf
  3627 ;; This function uses a non-reentrant model
  3628 ;;
  3629                           
  3630                           	psect	text5
  3631  006044                     __ptext5:
  3632                           	opt stack 0
  3633  006044                     ___wmul:
  3634                           	opt stack 28
  3635                           
  3636                           ;incstack = 0
  3637  006044  500F               	movf	___wmul@multiplier,w,c
  3638  006046  0211               	mulwf	___wmul@multiplicand,c
  3639  006048  CFF3 F013          	movff	prodl,___wmul@product
  3640  00604C  CFF4 F014          	movff	prodh,___wmul@product+1
  3641  006050  500F               	movf	___wmul@multiplier,w,c
  3642  006052  0212               	mulwf	___wmul@multiplicand+1,c
  3643  006054  50F3               	movf	prodl,w,c
  3644  006056  2614               	addwf	___wmul@product+1,f,c
  3645  006058  5010               	movf	___wmul@multiplier+1,w,c
  3646  00605A  0211               	mulwf	___wmul@multiplicand,c
  3647  00605C  50F3               	movf	prodl,w,c
  3648  00605E  2614               	addwf	___wmul@product+1,f,c
  3649  006060  C013  F00F         	movff	___wmul@product,?___wmul
  3650  006064  C014  F010         	movff	___wmul@product+1,?___wmul+1
  3651  006068  0012               	return	
  3652  00606A                     __end_of___wmul:
  3653                           	opt stack 0
  3654                           tblptru	equ	0xFF8
  3655                           tblptrh	equ	0xFF7
  3656                           tblptrl	equ	0xFF6
  3657                           tablat	equ	0xFF5
  3658                           prodh	equ	0xFF4
  3659                           prodl	equ	0xFF3
  3660                           postinc0	equ	0xFEE
  3661                           wreg	equ	0xFE8
  3662                           indf2	equ	0xFDF
  3663                           postinc2	equ	0xFDE
  3664                           postdec2	equ	0xFDD
  3665                           fsr2h	equ	0xFDA
  3666                           fsr2l	equ	0xFD9
  3667                           status	equ	0xFD8
  3668                           
  3669 ;; *************** function ___ftmul *****************
  3670 ;; Defined at:
  3671 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
  3672 ;; Parameters:    Size  Location     Type
  3673 ;;  f1              3   20[COMRAM] float 
  3674 ;;  f2              3   23[COMRAM] float 
  3675 ;; Auto vars:     Size  Location     Type
  3676 ;;  f3_as_produc    3   30[COMRAM] unsigned um
  3677 ;;  sign            1   34[COMRAM] unsigned char 
  3678 ;;  cntr            1   33[COMRAM] unsigned char 
  3679 ;;  exp             1   29[COMRAM] unsigned char 
  3680 ;; Return value:  Size  Location     Type
  3681 ;;                  3   20[COMRAM] float 
  3682 ;; Registers used:
  3683 ;;		wreg, status,2, status,0, cstack
  3684 ;; Tracked objects:
  3685 ;;		On entry : 0/0
  3686 ;;		On exit  : 0/0
  3687 ;;		Unchanged: 0/0
  3688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3689 ;;      Params:         6       0       0       0       0       0       0       0       0
  3690 ;;      Locals:         6       0       0       0       0       0       0       0       0
  3691 ;;      Temps:          3       0       0       0       0       0       0       0       0
  3692 ;;      Totals:        15       0       0       0       0       0       0       0       0
  3693 ;;Total ram usage:       15 bytes
  3694 ;; Hardware stack levels used:    1
  3695 ;; Hardware stack levels required when called:    1
  3696 ;; This function calls:
  3697 ;;		___ftpack
  3698 ;; This function is called by:
  3699 ;;		_main
  3700 ;;		_fround
  3701 ;;		_scale
  3702 ;;		_sprintf
  3703 ;; This function uses a non-reentrant model
  3704 ;;
  3705                           
  3706                           	psect	text6
  3707  00683E                     __ptext6:
  3708                           	opt stack 0
  3709  00683E                     ___ftmul:
  3710                           	opt stack 27
  3711                           
  3712                           ;incstack = 0
  3713  00683E  C017  F01B         	movff	___ftmul@f1+2,??___ftmul
  3714  006842  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  3715  006844  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  3716  006846  3416               	rlcf	___ftmul@f1+1,w,c
  3717  006848  361B               	rlcf	??___ftmul& (0+255),f,c
  3718  00684A  E301               	bnc	u1921
  3719  00684C  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  3720  00684E                     u1921:
  3721  00684E  501B               	movf	??___ftmul,w,c
  3722  006850  6E1E               	movwf	___ftmul@exp,c
  3723  006852  501E               	movf	___ftmul@exp,w,c
  3724  006854  A4D8               	btfss	status,2,c
  3725  006856  D007               	goto	l619
  3726  006858  0E00               	movlw	0
  3727  00685A  6E15               	movwf	?___ftmul,c
  3728  00685C  0E00               	movlw	0
  3729  00685E  6E16               	movwf	?___ftmul+1,c
  3730  006860  0E00               	movlw	0
  3731  006862  6E17               	movwf	?___ftmul+2,c
  3732  006864  0012               	return	
  3733  006866                     l619:
  3734  006866  C01A  F01B         	movff	___ftmul@f2+2,??___ftmul
  3735  00686A  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  3736  00686C  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  3737  00686E  3419               	rlcf	___ftmul@f2+1,w,c
  3738  006870  361B               	rlcf	??___ftmul& (0+255),f,c
  3739  006872  E301               	bnc	u1941
  3740  006874  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  3741  006876                     u1941:
  3742  006876  501B               	movf	??___ftmul,w,c
  3743  006878  6E23               	movwf	___ftmul@sign,c
  3744  00687A  5023               	movf	___ftmul@sign,w,c
  3745  00687C  A4D8               	btfss	status,2,c
  3746  00687E  D007               	goto	l621
  3747  006880  0E00               	movlw	0
  3748  006882  6E15               	movwf	?___ftmul,c
  3749  006884  0E00               	movlw	0
  3750  006886  6E16               	movwf	?___ftmul+1,c
  3751  006888  0E00               	movlw	0
  3752  00688A  6E17               	movwf	?___ftmul+2,c
  3753  00688C  0012               	return	
  3754  00688E                     l621:
  3755  00688E  5023               	movf	___ftmul@sign,w,c
  3756  006890  0F7B               	addlw	123
  3757  006892  261E               	addwf	___ftmul@exp,f,c
  3758  006894  C017  F023         	movff	___ftmul@f1+2,___ftmul@sign
  3759  006898  501A               	movf	___ftmul@f2+2,w,c
  3760  00689A  1A23               	xorwf	___ftmul@sign,f,c
  3761  00689C  0E80               	movlw	128
  3762  00689E  1623               	andwf	___ftmul@sign,f,c
  3763  0068A0  8E16               	bsf	___ftmul@f1+1,7,c
  3764  0068A2  8E19               	bsf	___ftmul@f2+1,7,c
  3765  0068A4  0EFF               	movlw	255
  3766  0068A6  1618               	andwf	___ftmul@f2,f,c
  3767  0068A8  0EFF               	movlw	255
  3768  0068AA  1619               	andwf	___ftmul@f2+1,f,c
  3769  0068AC  0E00               	movlw	0
  3770  0068AE  161A               	andwf	___ftmul@f2+2,f,c
  3771  0068B0  0E00               	movlw	0
  3772  0068B2  6E1F               	movwf	___ftmul@f3_as_product,c
  3773  0068B4  0E00               	movlw	0
  3774  0068B6  6E20               	movwf	___ftmul@f3_as_product+1,c
  3775  0068B8  0E00               	movlw	0
  3776  0068BA  6E21               	movwf	___ftmul@f3_as_product+2,c
  3777  0068BC  0E07               	movlw	7
  3778  0068BE  6E22               	movwf	___ftmul@cntr,c
  3779  0068C0  A015               	btfss	___ftmul@f1,0,c
  3780  0068C2  D006               	goto	l623
  3781  0068C4  5018               	movf	___ftmul@f2,w,c
  3782  0068C6  261F               	addwf	___ftmul@f3_as_product,f,c
  3783  0068C8  5019               	movf	___ftmul@f2+1,w,c
  3784  0068CA  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  3785  0068CC  501A               	movf	___ftmul@f2+2,w,c
  3786  0068CE  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  3787  0068D0                     l623:
  3788  0068D0  90D8               	bcf	status,0,c
  3789  0068D2  3217               	rrcf	___ftmul@f1+2,f,c
  3790  0068D4  3216               	rrcf	___ftmul@f1+1,f,c
  3791  0068D6  3215               	rrcf	___ftmul@f1,f,c
  3792  0068D8  90D8               	bcf	status,0,c
  3793  0068DA  3618               	rlcf	___ftmul@f2,f,c
  3794  0068DC  3619               	rlcf	___ftmul@f2+1,f,c
  3795  0068DE  361A               	rlcf	___ftmul@f2+2,f,c
  3796  0068E0  2E22               	decfsz	___ftmul@cntr,f,c
  3797  0068E2  D7EE               	goto	l622
  3798  0068E4  0E09               	movlw	9
  3799  0068E6  6E22               	movwf	___ftmul@cntr,c
  3800  0068E8  A015               	btfss	___ftmul@f1,0,c
  3801  0068EA  D006               	goto	l626
  3802  0068EC  5018               	movf	___ftmul@f2,w,c
  3803  0068EE  261F               	addwf	___ftmul@f3_as_product,f,c
  3804  0068F0  5019               	movf	___ftmul@f2+1,w,c
  3805  0068F2  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  3806  0068F4  501A               	movf	___ftmul@f2+2,w,c
  3807  0068F6  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  3808  0068F8                     l626:
  3809  0068F8  90D8               	bcf	status,0,c
  3810  0068FA  3217               	rrcf	___ftmul@f1+2,f,c
  3811  0068FC  3216               	rrcf	___ftmul@f1+1,f,c
  3812  0068FE  3215               	rrcf	___ftmul@f1,f,c
  3813  006900  90D8               	bcf	status,0,c
  3814  006902  3221               	rrcf	___ftmul@f3_as_product+2,f,c
  3815  006904  3220               	rrcf	___ftmul@f3_as_product+1,f,c
  3816  006906  321F               	rrcf	___ftmul@f3_as_product,f,c
  3817  006908  2E22               	decfsz	___ftmul@cntr,f,c
  3818  00690A  D7EE               	goto	l625
  3819  00690C  C01F  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  3820  006910  C020  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  3821  006914  C021  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  3822  006918  C01E  F004         	movff	___ftmul@exp,___ftpack@exp
  3823  00691C  C023  F005         	movff	___ftmul@sign,___ftpack@sign
  3824  006920  ECDB  F032         	call	___ftpack	;wreg free
  3825  006924  C001  F015         	movff	?___ftpack,?___ftmul
  3826  006928  C002  F016         	movff	?___ftpack+1,?___ftmul+1
  3827  00692C  C003  F017         	movff	?___ftpack+2,?___ftmul+2
  3828  006930  0012               	return	
  3829  006932                     __end_of___ftmul:
  3830                           	opt stack 0
  3831                           tblptru	equ	0xFF8
  3832                           tblptrh	equ	0xFF7
  3833                           tblptrl	equ	0xFF6
  3834                           tablat	equ	0xFF5
  3835                           prodh	equ	0xFF4
  3836                           prodl	equ	0xFF3
  3837                           postinc0	equ	0xFEE
  3838                           wreg	equ	0xFE8
  3839                           indf2	equ	0xFDF
  3840                           postinc2	equ	0xFDE
  3841                           postdec2	equ	0xFDD
  3842                           fsr2h	equ	0xFDA
  3843                           fsr2l	equ	0xFD9
  3844                           status	equ	0xFD8
  3845                           
  3846 ;; *************** function ___awmod *****************
  3847 ;; Defined at:
  3848 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
  3849 ;; Parameters:    Size  Location     Type
  3850 ;;  dividend        2    0[COMRAM] int 
  3851 ;;  divisor         2    2[COMRAM] int 
  3852 ;; Auto vars:     Size  Location     Type
  3853 ;;  sign            1    5[COMRAM] unsigned char 
  3854 ;;  counter         1    4[COMRAM] unsigned char 
  3855 ;; Return value:  Size  Location     Type
  3856 ;;                  2    0[COMRAM] int 
  3857 ;; Registers used:
  3858 ;;		wreg, status,2, status,0
  3859 ;; Tracked objects:
  3860 ;;		On entry : 0/0
  3861 ;;		On exit  : 0/0
  3862 ;;		Unchanged: 0/0
  3863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3864 ;;      Params:         4       0       0       0       0       0       0       0       0
  3865 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3866 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3867 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3868 ;;Total ram usage:        6 bytes
  3869 ;; Hardware stack levels used:    1
  3870 ;; This function calls:
  3871 ;;		Nothing
  3872 ;; This function is called by:
  3873 ;;		_fround
  3874 ;;		_scale
  3875 ;; This function uses a non-reentrant model
  3876 ;;
  3877                           
  3878                           	psect	text7
  3879  00630C                     __ptext7:
  3880                           	opt stack 0
  3881  00630C                     ___awmod:
  3882                           	opt stack 28
  3883                           
  3884                           ;incstack = 0
  3885  00630C  0E00               	movlw	0
  3886  00630E  6E06               	movwf	___awmod@sign,c
  3887  006310  AE02               	btfss	___awmod@dividend+1,7,c
  3888  006312  D006               	goto	l472
  3889  006314  6C01               	negf	___awmod@dividend,c
  3890  006316  1E02               	comf	___awmod@dividend+1,f,c
  3891  006318  B0D8               	btfsc	status,0,c
  3892  00631A  2A02               	incf	___awmod@dividend+1,f,c
  3893  00631C  0E01               	movlw	1
  3894  00631E  6E06               	movwf	___awmod@sign,c
  3895  006320                     l472:
  3896  006320  AE04               	btfss	___awmod@divisor+1,7,c
  3897  006322  D004               	goto	l473
  3898  006324  6C03               	negf	___awmod@divisor,c
  3899  006326  1E04               	comf	___awmod@divisor+1,f,c
  3900  006328  B0D8               	btfsc	status,0,c
  3901  00632A  2A04               	incf	___awmod@divisor+1,f,c
  3902  00632C                     l473:
  3903  00632C  5003               	movf	___awmod@divisor,w,c
  3904  00632E  1004               	iorwf	___awmod@divisor+1,w,c
  3905  006330  B4D8               	btfsc	status,2,c
  3906  006332  D018               	goto	l480
  3907  006334  0E01               	movlw	1
  3908  006336  6E05               	movwf	___awmod@counter,c
  3909  006338  D004               	goto	l475
  3910  00633A  90D8               	bcf	status,0,c
  3911  00633C  3603               	rlcf	___awmod@divisor,f,c
  3912  00633E  3604               	rlcf	___awmod@divisor+1,f,c
  3913  006340  2A05               	incf	___awmod@counter,f,c
  3914  006342                     l475:
  3915  006342  AE04               	btfss	___awmod@divisor+1,7,c
  3916  006344  D7FA               	goto	l476
  3917  006346                     u2070:
  3918  006346  5003               	movf	___awmod@divisor,w,c
  3919  006348  5C01               	subwf	___awmod@dividend,w,c
  3920  00634A  5004               	movf	___awmod@divisor+1,w,c
  3921  00634C  5802               	subwfb	___awmod@dividend+1,w,c
  3922  00634E  A0D8               	btfss	status,0,c
  3923  006350  D004               	goto	l479
  3924  006352  5003               	movf	___awmod@divisor,w,c
  3925  006354  5E01               	subwf	___awmod@dividend,f,c
  3926  006356  5004               	movf	___awmod@divisor+1,w,c
  3927  006358  5A02               	subwfb	___awmod@dividend+1,f,c
  3928  00635A                     l479:
  3929  00635A  90D8               	bcf	status,0,c
  3930  00635C  3204               	rrcf	___awmod@divisor+1,f,c
  3931  00635E  3203               	rrcf	___awmod@divisor,f,c
  3932  006360  2E05               	decfsz	___awmod@counter,f,c
  3933  006362  D7F1               	goto	u2070
  3934  006364                     l480:
  3935  006364  5006               	movf	___awmod@sign,w,c
  3936  006366  B4D8               	btfsc	status,2,c
  3937  006368  D004               	goto	l481
  3938  00636A  6C01               	negf	___awmod@dividend,c
  3939  00636C  1E02               	comf	___awmod@dividend+1,f,c
  3940  00636E  B0D8               	btfsc	status,0,c
  3941  006370  2A02               	incf	___awmod@dividend+1,f,c
  3942  006372                     l481:
  3943  006372  C001  F001         	movff	___awmod@dividend,?___awmod
  3944  006376  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  3945  00637A  0012               	return	
  3946  00637C                     __end_of___awmod:
  3947                           	opt stack 0
  3948                           tblptru	equ	0xFF8
  3949                           tblptrh	equ	0xFF7
  3950                           tblptrl	equ	0xFF6
  3951                           tablat	equ	0xFF5
  3952                           prodh	equ	0xFF4
  3953                           prodl	equ	0xFF3
  3954                           postinc0	equ	0xFEE
  3955                           wreg	equ	0xFE8
  3956                           indf2	equ	0xFDF
  3957                           postinc2	equ	0xFDE
  3958                           postdec2	equ	0xFDD
  3959                           fsr2h	equ	0xFDA
  3960                           fsr2l	equ	0xFD9
  3961                           status	equ	0xFD8
  3962                           
  3963 ;; *************** function ___awdiv *****************
  3964 ;; Defined at:
  3965 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
  3966 ;; Parameters:    Size  Location     Type
  3967 ;;  dividend        2    6[COMRAM] int 
  3968 ;;  divisor         2    8[COMRAM] int 
  3969 ;; Auto vars:     Size  Location     Type
  3970 ;;  quotient        2   12[COMRAM] int 
  3971 ;;  sign            1   11[COMRAM] unsigned char 
  3972 ;;  counter         1   10[COMRAM] unsigned char 
  3973 ;; Return value:  Size  Location     Type
  3974 ;;                  2    6[COMRAM] int 
  3975 ;; Registers used:
  3976 ;;		wreg, status,2, status,0
  3977 ;; Tracked objects:
  3978 ;;		On entry : 0/0
  3979 ;;		On exit  : 0/0
  3980 ;;		Unchanged: 0/0
  3981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3982 ;;      Params:         4       0       0       0       0       0       0       0       0
  3983 ;;      Locals:         4       0       0       0       0       0       0       0       0
  3984 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3985 ;;      Totals:         8       0       0       0       0       0       0       0       0
  3986 ;;Total ram usage:        8 bytes
  3987 ;; Hardware stack levels used:    1
  3988 ;; This function calls:
  3989 ;;		Nothing
  3990 ;; This function is called by:
  3991 ;;		_fround
  3992 ;;		_scale
  3993 ;;		_sprintf
  3994 ;; This function uses a non-reentrant model
  3995 ;;
  3996                           
  3997                           	psect	text8
  3998  0063FE                     __ptext8:
  3999                           	opt stack 0
  4000  0063FE                     ___awdiv:
  4001                           	opt stack 28
  4002                           
  4003                           ;incstack = 0
  4004  0063FE  0E00               	movlw	0
  4005  006400  6E0C               	movwf	___awdiv@sign,c
  4006  006402  AE0A               	btfss	___awdiv@divisor+1,7,c
  4007  006404  D006               	goto	l459
  4008  006406  6C09               	negf	___awdiv@divisor,c
  4009  006408  1E0A               	comf	___awdiv@divisor+1,f,c
  4010  00640A  B0D8               	btfsc	status,0,c
  4011  00640C  2A0A               	incf	___awdiv@divisor+1,f,c
  4012  00640E  0E01               	movlw	1
  4013  006410  6E0C               	movwf	___awdiv@sign,c
  4014  006412                     l459:
  4015  006412  AE08               	btfss	___awdiv@dividend+1,7,c
  4016  006414  D006               	goto	l460
  4017  006416  6C07               	negf	___awdiv@dividend,c
  4018  006418  1E08               	comf	___awdiv@dividend+1,f,c
  4019  00641A  B0D8               	btfsc	status,0,c
  4020  00641C  2A08               	incf	___awdiv@dividend+1,f,c
  4021  00641E  0E01               	movlw	1
  4022  006420  1A0C               	xorwf	___awdiv@sign,f,c
  4023  006422                     l460:
  4024  006422  0E00               	movlw	0
  4025  006424  6E0E               	movwf	___awdiv@quotient+1,c
  4026  006426  0E00               	movlw	0
  4027  006428  6E0D               	movwf	___awdiv@quotient,c
  4028  00642A  5009               	movf	___awdiv@divisor,w,c
  4029  00642C  100A               	iorwf	___awdiv@divisor+1,w,c
  4030  00642E  B4D8               	btfsc	status,2,c
  4031  006430  D01C               	goto	l467
  4032  006432  0E01               	movlw	1
  4033  006434  6E0B               	movwf	___awdiv@counter,c
  4034  006436  D004               	goto	l462
  4035  006438  90D8               	bcf	status,0,c
  4036  00643A  3609               	rlcf	___awdiv@divisor,f,c
  4037  00643C  360A               	rlcf	___awdiv@divisor+1,f,c
  4038  00643E  2A0B               	incf	___awdiv@counter,f,c
  4039  006440                     l462:
  4040  006440  AE0A               	btfss	___awdiv@divisor+1,7,c
  4041  006442  D7FA               	goto	l463
  4042  006444                     u2010:
  4043  006444  90D8               	bcf	status,0,c
  4044  006446  360D               	rlcf	___awdiv@quotient,f,c
  4045  006448  360E               	rlcf	___awdiv@quotient+1,f,c
  4046  00644A  5009               	movf	___awdiv@divisor,w,c
  4047  00644C  5C07               	subwf	___awdiv@dividend,w,c
  4048  00644E  500A               	movf	___awdiv@divisor+1,w,c
  4049  006450  5808               	subwfb	___awdiv@dividend+1,w,c
  4050  006452  A0D8               	btfss	status,0,c
  4051  006454  D005               	goto	l466
  4052  006456  5009               	movf	___awdiv@divisor,w,c
  4053  006458  5E07               	subwf	___awdiv@dividend,f,c
  4054  00645A  500A               	movf	___awdiv@divisor+1,w,c
  4055  00645C  5A08               	subwfb	___awdiv@dividend+1,f,c
  4056  00645E  800D               	bsf	___awdiv@quotient,0,c
  4057  006460                     l466:
  4058  006460  90D8               	bcf	status,0,c
  4059  006462  320A               	rrcf	___awdiv@divisor+1,f,c
  4060  006464  3209               	rrcf	___awdiv@divisor,f,c
  4061  006466  2E0B               	decfsz	___awdiv@counter,f,c
  4062  006468  D7ED               	goto	u2010
  4063  00646A                     l467:
  4064  00646A  500C               	movf	___awdiv@sign,w,c
  4065  00646C  B4D8               	btfsc	status,2,c
  4066  00646E  D004               	goto	l468
  4067  006470  6C0D               	negf	___awdiv@quotient,c
  4068  006472  1E0E               	comf	___awdiv@quotient+1,f,c
  4069  006474  B0D8               	btfsc	status,0,c
  4070  006476  2A0E               	incf	___awdiv@quotient+1,f,c
  4071  006478                     l468:
  4072  006478  C00D  F007         	movff	___awdiv@quotient,?___awdiv
  4073  00647C  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
  4074  006480  0012               	return	
  4075  006482                     __end_of___awdiv:
  4076                           	opt stack 0
  4077                           tblptru	equ	0xFF8
  4078                           tblptrh	equ	0xFF7
  4079                           tblptrl	equ	0xFF6
  4080                           tablat	equ	0xFF5
  4081                           prodh	equ	0xFF4
  4082                           prodl	equ	0xFF3
  4083                           postinc0	equ	0xFEE
  4084                           wreg	equ	0xFE8
  4085                           indf2	equ	0xFDF
  4086                           postinc2	equ	0xFDE
  4087                           postdec2	equ	0xFDD
  4088                           fsr2h	equ	0xFDA
  4089                           fsr2l	equ	0xFD9
  4090                           status	equ	0xFD8
  4091                           
  4092 ;; *************** function __tdiv_to_l_ *****************
  4093 ;; Defined at:
  4094 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdivl.c"
  4095 ;; Parameters:    Size  Location     Type
  4096 ;;  f1              3    0[COMRAM] float 
  4097 ;;  f2              3    3[COMRAM] float 
  4098 ;; Auto vars:     Size  Location     Type
  4099 ;;  quot            4    9[COMRAM] unsigned long 
  4100 ;;  exp1            1   14[COMRAM] unsigned char 
  4101 ;;  cntr            1   13[COMRAM] unsigned char 
  4102 ;; Return value:  Size  Location     Type
  4103 ;;                  4    0[COMRAM] unsigned long 
  4104 ;; Registers used:
  4105 ;;		wreg, status,2, status,0
  4106 ;; Tracked objects:
  4107 ;;		On entry : 0/0
  4108 ;;		On exit  : 0/0
  4109 ;;		Unchanged: 0/0
  4110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4111 ;;      Params:         6       0       0       0       0       0       0       0       0
  4112 ;;      Locals:         6       0       0       0       0       0       0       0       0
  4113 ;;      Temps:          3       0       0       0       0       0       0       0       0
  4114 ;;      Totals:        15       0       0       0       0       0       0       0       0
  4115 ;;Total ram usage:       15 bytes
  4116 ;; Hardware stack levels used:    1
  4117 ;; This function calls:
  4118 ;;		Nothing
  4119 ;; This function is called by:
  4120 ;;		_sprintf
  4121 ;; This function uses a non-reentrant model
  4122 ;;
  4123                           
  4124                           	psect	text9
  4125  006A5A                     __ptext9:
  4126                           	opt stack 0
  4127  006A5A                     __tdiv_to_l_:
  4128                           	opt stack 29
  4129                           
  4130                           ;incstack = 0
  4131  006A5A  C003  F007         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  4132  006A5E  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4133  006A60  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4134  006A62  3402               	rlcf	__tdiv_to_l_@f1+1,w,c
  4135  006A64  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4136  006A66  E301               	bnc	u2271
  4137  006A68  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4138  006A6A                     u2271:
  4139  006A6A  5007               	movf	??__tdiv_to_l_,w,c
  4140  006A6C  6E0F               	movwf	__tdiv_to_l_@exp1,c
  4141  006A6E  500F               	movf	__tdiv_to_l_@exp1,w,c
  4142  006A70  A4D8               	btfss	status,2,c
  4143  006A72  D009               	goto	l595
  4144  006A74  0E00               	movlw	0
  4145  006A76  6E01               	movwf	?__tdiv_to_l_,c
  4146  006A78  0E00               	movlw	0
  4147  006A7A  6E02               	movwf	?__tdiv_to_l_+1,c
  4148  006A7C  0E00               	movlw	0
  4149  006A7E  6E03               	movwf	?__tdiv_to_l_+2,c
  4150  006A80  0E00               	movlw	0
  4151  006A82  6E04               	movwf	?__tdiv_to_l_+3,c
  4152  006A84  0012               	return	
  4153  006A86                     l595:
  4154  006A86  C006  F007         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  4155  006A8A  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4156  006A8C  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4157  006A8E  3405               	rlcf	__tdiv_to_l_@f2+1,w,c
  4158  006A90  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4159  006A92  E301               	bnc	u2291
  4160  006A94  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4161  006A96                     u2291:
  4162  006A96  5007               	movf	??__tdiv_to_l_,w,c
  4163  006A98  6E0E               	movwf	__tdiv_to_l_@cntr,c
  4164  006A9A  500E               	movf	__tdiv_to_l_@cntr,w,c
  4165  006A9C  A4D8               	btfss	status,2,c
  4166  006A9E  D009               	goto	l597
  4167  006AA0  0E00               	movlw	0
  4168  006AA2  6E01               	movwf	?__tdiv_to_l_,c
  4169  006AA4  0E00               	movlw	0
  4170  006AA6  6E02               	movwf	?__tdiv_to_l_+1,c
  4171  006AA8  0E00               	movlw	0
  4172  006AAA  6E03               	movwf	?__tdiv_to_l_+2,c
  4173  006AAC  0E00               	movlw	0
  4174  006AAE  6E04               	movwf	?__tdiv_to_l_+3,c
  4175  006AB0  0012               	return	
  4176  006AB2                     l597:
  4177  006AB2  8E02               	bsf	__tdiv_to_l_@f1+1,7,c
  4178  006AB4  0EFF               	movlw	255
  4179  006AB6  1601               	andwf	__tdiv_to_l_@f1,f,c
  4180  006AB8  0EFF               	movlw	255
  4181  006ABA  1602               	andwf	__tdiv_to_l_@f1+1,f,c
  4182  006ABC  0E00               	movlw	0
  4183  006ABE  1603               	andwf	__tdiv_to_l_@f1+2,f,c
  4184  006AC0  8E05               	bsf	__tdiv_to_l_@f2+1,7,c
  4185  006AC2  0EFF               	movlw	255
  4186  006AC4  1604               	andwf	__tdiv_to_l_@f2,f,c
  4187  006AC6  0EFF               	movlw	255
  4188  006AC8  1605               	andwf	__tdiv_to_l_@f2+1,f,c
  4189  006ACA  0E00               	movlw	0
  4190  006ACC  1606               	andwf	__tdiv_to_l_@f2+2,f,c
  4191  006ACE  0E00               	movlw	0
  4192  006AD0  6E0A               	movwf	__tdiv_to_l_@quot,c
  4193  006AD2  0E00               	movlw	0
  4194  006AD4  6E0B               	movwf	__tdiv_to_l_@quot+1,c
  4195  006AD6  0E00               	movlw	0
  4196  006AD8  6E0C               	movwf	__tdiv_to_l_@quot+2,c
  4197  006ADA  0E00               	movlw	0
  4198  006ADC  6E0D               	movwf	__tdiv_to_l_@quot+3,c
  4199  006ADE  0E7F               	movlw	127
  4200  006AE0  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  4201  006AE2  500E               	movf	__tdiv_to_l_@cntr,w,c
  4202  006AE4  0F98               	addlw	152
  4203  006AE6  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  4204  006AE8  0E18               	movlw	24
  4205  006AEA  6E0E               	movwf	__tdiv_to_l_@cntr,c
  4206  006AEC                     l598:
  4207  006AEC  90D8               	bcf	status,0,c
  4208  006AEE  360A               	rlcf	__tdiv_to_l_@quot,f,c
  4209  006AF0  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  4210  006AF2  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  4211  006AF4  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  4212  006AF6  5004               	movf	__tdiv_to_l_@f2,w,c
  4213  006AF8  5C01               	subwf	__tdiv_to_l_@f1,w,c
  4214  006AFA  5005               	movf	__tdiv_to_l_@f2+1,w,c
  4215  006AFC  5802               	subwfb	__tdiv_to_l_@f1+1,w,c
  4216  006AFE  5006               	movf	__tdiv_to_l_@f2+2,w,c
  4217  006B00  5803               	subwfb	__tdiv_to_l_@f1+2,w,c
  4218  006B02  A0D8               	btfss	status,0,c
  4219  006B04  D007               	goto	l599
  4220  006B06  5004               	movf	__tdiv_to_l_@f2,w,c
  4221  006B08  5E01               	subwf	__tdiv_to_l_@f1,f,c
  4222  006B0A  5005               	movf	__tdiv_to_l_@f2+1,w,c
  4223  006B0C  5A02               	subwfb	__tdiv_to_l_@f1+1,f,c
  4224  006B0E  5006               	movf	__tdiv_to_l_@f2+2,w,c
  4225  006B10  5A03               	subwfb	__tdiv_to_l_@f1+2,f,c
  4226  006B12  800A               	bsf	__tdiv_to_l_@quot,0,c
  4227  006B14                     l599:
  4228  006B14  90D8               	bcf	status,0,c
  4229  006B16  3601               	rlcf	__tdiv_to_l_@f1,f,c
  4230  006B18  3602               	rlcf	__tdiv_to_l_@f1+1,f,c
  4231  006B1A  3603               	rlcf	__tdiv_to_l_@f1+2,f,c
  4232  006B1C  2E0E               	decfsz	__tdiv_to_l_@cntr,f,c
  4233  006B1E  D7E6               	goto	l598
  4234  006B20  AE0F               	btfss	__tdiv_to_l_@exp1,7,c
  4235  006B22  D016               	goto	l601
  4236  006B24  500F               	movf	__tdiv_to_l_@exp1,w,c
  4237  006B26  0A80               	xorlw	128
  4238  006B28  0F97               	addlw	151
  4239  006B2A  B0D8               	btfsc	status,0,c
  4240  006B2C  D009               	goto	l602
  4241  006B2E  0E00               	movlw	0
  4242  006B30  6E01               	movwf	?__tdiv_to_l_,c
  4243  006B32  0E00               	movlw	0
  4244  006B34  6E02               	movwf	?__tdiv_to_l_+1,c
  4245  006B36  0E00               	movlw	0
  4246  006B38  6E03               	movwf	?__tdiv_to_l_+2,c
  4247  006B3A  0E00               	movlw	0
  4248  006B3C  6E04               	movwf	?__tdiv_to_l_+3,c
  4249  006B3E  0012               	return	
  4250  006B40                     l602:
  4251  006B40  90D8               	bcf	status,0,c
  4252  006B42  320D               	rrcf	__tdiv_to_l_@quot+3,f,c
  4253  006B44  320C               	rrcf	__tdiv_to_l_@quot+2,f,c
  4254  006B46  320B               	rrcf	__tdiv_to_l_@quot+1,f,c
  4255  006B48  320A               	rrcf	__tdiv_to_l_@quot,f,c
  4256  006B4A  3E0F               	incfsz	__tdiv_to_l_@exp1,f,c
  4257  006B4C  D7F9               	goto	l602
  4258  006B4E  D015               	goto	u2350
  4259  006B50                     l601:
  4260  006B50  0E17               	movlw	23
  4261  006B52  640F               	cpfsgt	__tdiv_to_l_@exp1,c
  4262  006B54  D00F               	goto	l607
  4263  006B56  0E00               	movlw	0
  4264  006B58  6E01               	movwf	?__tdiv_to_l_,c
  4265  006B5A  0E00               	movlw	0
  4266  006B5C  6E02               	movwf	?__tdiv_to_l_+1,c
  4267  006B5E  0E00               	movlw	0
  4268  006B60  6E03               	movwf	?__tdiv_to_l_+2,c
  4269  006B62  0E00               	movlw	0
  4270  006B64  6E04               	movwf	?__tdiv_to_l_+3,c
  4271  006B66  0012               	return	
  4272  006B68  90D8               	bcf	status,0,c
  4273  006B6A  360A               	rlcf	__tdiv_to_l_@quot,f,c
  4274  006B6C  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  4275  006B6E  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  4276  006B70  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  4277  006B72  060F               	decf	__tdiv_to_l_@exp1,f,c
  4278  006B74                     l607:
  4279  006B74  500F               	movf	__tdiv_to_l_@exp1,w,c
  4280  006B76  A4D8               	btfss	status,2,c
  4281  006B78  D7F7               	goto	l608
  4282  006B7A                     u2350:
  4283  006B7A  C00A  F001         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  4284  006B7E  C00B  F002         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  4285  006B82  C00C  F003         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  4286  006B86  C00D  F004         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  4287  006B8A  0012               	return		;funcret
  4288  006B8C                     __end_of__tdiv_to_l_:
  4289                           	opt stack 0
  4290                           tblptru	equ	0xFF8
  4291                           tblptrh	equ	0xFF7
  4292                           tblptrl	equ	0xFF6
  4293                           tablat	equ	0xFF5
  4294                           prodh	equ	0xFF4
  4295                           prodl	equ	0xFF3
  4296                           postinc0	equ	0xFEE
  4297                           wreg	equ	0xFE8
  4298                           indf2	equ	0xFDF
  4299                           postinc2	equ	0xFDE
  4300                           postdec2	equ	0xFDD
  4301                           fsr2h	equ	0xFDA
  4302                           fsr2l	equ	0xFD9
  4303                           status	equ	0xFD8
  4304                           
  4305 ;; *************** function __div_to_l_ *****************
  4306 ;; Defined at:
  4307 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fldivl.c"
  4308 ;; Parameters:    Size  Location     Type
  4309 ;;  f1              3    0[COMRAM] unsigned long 
  4310 ;;  f2              3    3[COMRAM] unsigned long 
  4311 ;; Auto vars:     Size  Location     Type
  4312 ;;  quot            4    6[COMRAM] unsigned long 
  4313 ;;  exp1            1   11[COMRAM] unsigned char 
  4314 ;;  cntr            1   10[COMRAM] unsigned char 
  4315 ;; Return value:  Size  Location     Type
  4316 ;;                  4    0[COMRAM] unsigned long 
  4317 ;; Registers used:
  4318 ;;		wreg, status,2, status,0
  4319 ;; Tracked objects:
  4320 ;;		On entry : 0/0
  4321 ;;		On exit  : 0/0
  4322 ;;		Unchanged: 0/0
  4323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4324 ;;      Params:         6       0       0       0       0       0       0       0       0
  4325 ;;      Locals:         6       0       0       0       0       0       0       0       0
  4326 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4327 ;;      Totals:        12       0       0       0       0       0       0       0       0
  4328 ;;Total ram usage:       12 bytes
  4329 ;; Hardware stack levels used:    1
  4330 ;; This function calls:
  4331 ;;		Nothing
  4332 ;; This function is called by:
  4333 ;;		_sprintf
  4334 ;; This function uses a non-reentrant model
  4335 ;;
  4336                           
  4337                           	psect	text10
  4338  006932                     __ptext10:
  4339                           	opt stack 0
  4340  006932                     __div_to_l_:
  4341                           	opt stack 29
  4342                           
  4343                           ;incstack = 0
  4344  006932  3403               	rlcf	__div_to_l_@f1+2,w,c
  4345  006934  3404               	rlcf	__div_to_l_@f1+3,w,c
  4346  006936  6E0C               	movwf	__div_to_l_@exp1,c
  4347  006938  500C               	movf	__div_to_l_@exp1,w,c
  4348  00693A  A4D8               	btfss	status,2,c
  4349  00693C  D009               	goto	l491
  4350  00693E  0E00               	movlw	0
  4351  006940  6E01               	movwf	?__div_to_l_,c
  4352  006942  0E00               	movlw	0
  4353  006944  6E02               	movwf	?__div_to_l_+1,c
  4354  006946  0E00               	movlw	0
  4355  006948  6E03               	movwf	?__div_to_l_+2,c
  4356  00694A  0E00               	movlw	0
  4357  00694C  6E04               	movwf	?__div_to_l_+3,c
  4358  00694E  0012               	return	
  4359  006950                     l491:
  4360  006950  3406               	rlcf	__div_to_l_@f2+2,w,c
  4361  006952  3407               	rlcf	__div_to_l_@f2+3,w,c
  4362  006954  6E0B               	movwf	__div_to_l_@cntr,c
  4363  006956  500B               	movf	__div_to_l_@cntr,w,c
  4364  006958  A4D8               	btfss	status,2,c
  4365  00695A  D009               	goto	l493
  4366  00695C  0E00               	movlw	0
  4367  00695E  6E01               	movwf	?__div_to_l_,c
  4368  006960  0E00               	movlw	0
  4369  006962  6E02               	movwf	?__div_to_l_+1,c
  4370  006964  0E00               	movlw	0
  4371  006966  6E03               	movwf	?__div_to_l_+2,c
  4372  006968  0E00               	movlw	0
  4373  00696A  6E04               	movwf	?__div_to_l_+3,c
  4374  00696C  0012               	return	
  4375  00696E                     l493:
  4376  00696E  8E03               	bsf	__div_to_l_@f1+2,7,c
  4377  006970  0EFF               	movlw	255
  4378  006972  1601               	andwf	__div_to_l_@f1,f,c
  4379  006974  0EFF               	movlw	255
  4380  006976  1602               	andwf	__div_to_l_@f1+1,f,c
  4381  006978  0EFF               	movlw	255
  4382  00697A  1603               	andwf	__div_to_l_@f1+2,f,c
  4383  00697C  0E00               	movlw	0
  4384  00697E  1604               	andwf	__div_to_l_@f1+3,f,c
  4385  006980  8E06               	bsf	__div_to_l_@f2+2,7,c
  4386  006982  0EFF               	movlw	255
  4387  006984  1604               	andwf	__div_to_l_@f2,f,c
  4388  006986  0EFF               	movlw	255
  4389  006988  1605               	andwf	__div_to_l_@f2+1,f,c
  4390  00698A  0EFF               	movlw	255
  4391  00698C  1606               	andwf	__div_to_l_@f2+2,f,c
  4392  00698E  0E00               	movlw	0
  4393  006990  1607               	andwf	__div_to_l_@f2+3,f,c
  4394  006992  0E00               	movlw	0
  4395  006994  6E07               	movwf	__div_to_l_@quot,c
  4396  006996  0E00               	movlw	0
  4397  006998  6E08               	movwf	__div_to_l_@quot+1,c
  4398  00699A  0E00               	movlw	0
  4399  00699C  6E09               	movwf	__div_to_l_@quot+2,c
  4400  00699E  0E00               	movlw	0
  4401  0069A0  6E0A               	movwf	__div_to_l_@quot+3,c
  4402  0069A2  0E7F               	movlw	127
  4403  0069A4  5E0C               	subwf	__div_to_l_@exp1,f,c
  4404  0069A6  500B               	movf	__div_to_l_@cntr,w,c
  4405  0069A8  0FA0               	addlw	160
  4406  0069AA  5E0C               	subwf	__div_to_l_@exp1,f,c
  4407  0069AC  0E20               	movlw	32
  4408  0069AE  6E0B               	movwf	__div_to_l_@cntr,c
  4409  0069B0  90D8               	bcf	status,0,c
  4410  0069B2  3607               	rlcf	__div_to_l_@quot,f,c
  4411  0069B4  3608               	rlcf	__div_to_l_@quot+1,f,c
  4412  0069B6  3609               	rlcf	__div_to_l_@quot+2,f,c
  4413  0069B8  360A               	rlcf	__div_to_l_@quot+3,f,c
  4414  0069BA  5004               	movf	__div_to_l_@f2,w,c
  4415  0069BC  5C01               	subwf	__div_to_l_@f1,w,c
  4416  0069BE  5005               	movf	__div_to_l_@f2+1,w,c
  4417  0069C0  5802               	subwfb	__div_to_l_@f1+1,w,c
  4418  0069C2  5006               	movf	__div_to_l_@f2+2,w,c
  4419  0069C4  5803               	subwfb	__div_to_l_@f1+2,w,c
  4420  0069C6  5007               	movf	__div_to_l_@f2+3,w,c
  4421  0069C8  5804               	subwfb	__div_to_l_@f1+3,w,c
  4422  0069CA  A0D8               	btfss	status,0,c
  4423  0069CC  D009               	goto	l495
  4424  0069CE  5004               	movf	__div_to_l_@f2,w,c
  4425  0069D0  5E01               	subwf	__div_to_l_@f1,f,c
  4426  0069D2  5005               	movf	__div_to_l_@f2+1,w,c
  4427  0069D4  5A02               	subwfb	__div_to_l_@f1+1,f,c
  4428  0069D6  5006               	movf	__div_to_l_@f2+2,w,c
  4429  0069D8  5A03               	subwfb	__div_to_l_@f1+2,f,c
  4430  0069DA  5007               	movf	__div_to_l_@f2+3,w,c
  4431  0069DC  5A04               	subwfb	__div_to_l_@f1+3,f,c
  4432  0069DE  8007               	bsf	__div_to_l_@quot,0,c
  4433  0069E0                     l495:
  4434  0069E0  90D8               	bcf	status,0,c
  4435  0069E2  3601               	rlcf	__div_to_l_@f1,f,c
  4436  0069E4  3602               	rlcf	__div_to_l_@f1+1,f,c
  4437  0069E6  3603               	rlcf	__div_to_l_@f1+2,f,c
  4438  0069E8  3604               	rlcf	__div_to_l_@f1+3,f,c
  4439  0069EA  2E0B               	decfsz	__div_to_l_@cntr,f,c
  4440  0069EC  D7E1               	goto	l494
  4441  0069EE  AE0C               	btfss	__div_to_l_@exp1,7,c
  4442  0069F0  D016               	goto	l497
  4443  0069F2  500C               	movf	__div_to_l_@exp1,w,c
  4444  0069F4  0A80               	xorlw	128
  4445  0069F6  0F9F               	addlw	159
  4446  0069F8  B0D8               	btfsc	status,0,c
  4447  0069FA  D009               	goto	l498
  4448  0069FC  0E00               	movlw	0
  4449  0069FE  6E01               	movwf	?__div_to_l_,c
  4450  006A00  0E00               	movlw	0
  4451  006A02  6E02               	movwf	?__div_to_l_+1,c
  4452  006A04  0E00               	movlw	0
  4453  006A06  6E03               	movwf	?__div_to_l_+2,c
  4454  006A08  0E00               	movlw	0
  4455  006A0A  6E04               	movwf	?__div_to_l_+3,c
  4456  006A0C  0012               	return	
  4457  006A0E                     l498:
  4458  006A0E  90D8               	bcf	status,0,c
  4459  006A10  320A               	rrcf	__div_to_l_@quot+3,f,c
  4460  006A12  3209               	rrcf	__div_to_l_@quot+2,f,c
  4461  006A14  3208               	rrcf	__div_to_l_@quot+1,f,c
  4462  006A16  3207               	rrcf	__div_to_l_@quot,f,c
  4463  006A18  3E0C               	incfsz	__div_to_l_@exp1,f,c
  4464  006A1A  D7F9               	goto	l498
  4465  006A1C  D015               	goto	u2420
  4466  006A1E                     l497:
  4467  006A1E  0E1F               	movlw	31
  4468  006A20  640C               	cpfsgt	__div_to_l_@exp1,c
  4469  006A22  D00F               	goto	l503
  4470  006A24  0E00               	movlw	0
  4471  006A26  6E01               	movwf	?__div_to_l_,c
  4472  006A28  0E00               	movlw	0
  4473  006A2A  6E02               	movwf	?__div_to_l_+1,c
  4474  006A2C  0E00               	movlw	0
  4475  006A2E  6E03               	movwf	?__div_to_l_+2,c
  4476  006A30  0E00               	movlw	0
  4477  006A32  6E04               	movwf	?__div_to_l_+3,c
  4478  006A34  0012               	return	
  4479  006A36  90D8               	bcf	status,0,c
  4480  006A38  3607               	rlcf	__div_to_l_@quot,f,c
  4481  006A3A  3608               	rlcf	__div_to_l_@quot+1,f,c
  4482  006A3C  3609               	rlcf	__div_to_l_@quot+2,f,c
  4483  006A3E  360A               	rlcf	__div_to_l_@quot+3,f,c
  4484  006A40  060C               	decf	__div_to_l_@exp1,f,c
  4485  006A42                     l503:
  4486  006A42  500C               	movf	__div_to_l_@exp1,w,c
  4487  006A44  A4D8               	btfss	status,2,c
  4488  006A46  D7F7               	goto	l504
  4489  006A48                     u2420:
  4490  006A48  C007  F001         	movff	__div_to_l_@quot,?__div_to_l_
  4491  006A4C  C008  F002         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  4492  006A50  C009  F003         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  4493  006A54  C00A  F004         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  4494  006A58  0012               	return		;funcret
  4495  006A5A                     __end_of__div_to_l_:
  4496                           	opt stack 0
  4497                           tblptru	equ	0xFF8
  4498                           tblptrh	equ	0xFF7
  4499                           tblptrl	equ	0xFF6
  4500                           tablat	equ	0xFF5
  4501                           prodh	equ	0xFF4
  4502                           prodl	equ	0xFF3
  4503                           postinc0	equ	0xFEE
  4504                           wreg	equ	0xFE8
  4505                           indf2	equ	0xFDF
  4506                           postinc2	equ	0xFDE
  4507                           postdec2	equ	0xFDD
  4508                           fsr2h	equ	0xFDA
  4509                           fsr2l	equ	0xFD9
  4510                           status	equ	0xFD8
  4511                           
  4512 ;; *************** function ___lltoft *****************
  4513 ;; Defined at:
  4514 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lltoft.c"
  4515 ;; Parameters:    Size  Location     Type
  4516 ;;  c               4    8[COMRAM] unsigned long 
  4517 ;; Auto vars:     Size  Location     Type
  4518 ;;  exp             1   16[COMRAM] unsigned char 
  4519 ;; Return value:  Size  Location     Type
  4520 ;;                  3    8[COMRAM] float 
  4521 ;; Registers used:
  4522 ;;		wreg, status,2, status,0, cstack
  4523 ;; Tracked objects:
  4524 ;;		On entry : 0/0
  4525 ;;		On exit  : 0/0
  4526 ;;		Unchanged: 0/0
  4527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4528 ;;      Params:         4       0       0       0       0       0       0       0       0
  4529 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4530 ;;      Temps:          4       0       0       0       0       0       0       0       0
  4531 ;;      Totals:         9       0       0       0       0       0       0       0       0
  4532 ;;Total ram usage:        9 bytes
  4533 ;; Hardware stack levels used:    1
  4534 ;; Hardware stack levels required when called:    1
  4535 ;; This function calls:
  4536 ;;		___ftpack
  4537 ;; This function is called by:
  4538 ;;		_sprintf
  4539 ;; This function uses a non-reentrant model
  4540 ;;
  4541                           
  4542                           	psect	text11
  4543  00624A                     __ptext11:
  4544                           	opt stack 0
  4545  00624A                     ___lltoft:
  4546                           	opt stack 28
  4547                           
  4548                           ;incstack = 0
  4549  00624A  0E8E               	movlw	142
  4550  00624C  6E11               	movwf	___lltoft@exp,c
  4551  00624E  D006               	goto	l702
  4552  006250  90D8               	bcf	status,0,c
  4553  006252  320C               	rrcf	___lltoft@c+3,f,c
  4554  006254  320B               	rrcf	___lltoft@c+2,f,c
  4555  006256  320A               	rrcf	___lltoft@c+1,f,c
  4556  006258  3209               	rrcf	___lltoft@c,f,c
  4557  00625A  2A11               	incf	___lltoft@exp,f,c
  4558  00625C                     l702:
  4559  00625C  0E00               	movlw	0
  4560  00625E  1409               	andwf	___lltoft@c,w,c
  4561  006260  6E0D               	movwf	??___lltoft& (0+255),c
  4562  006262  0E00               	movlw	0
  4563  006264  140A               	andwf	___lltoft@c+1,w,c
  4564  006266  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  4565  006268  0E00               	movlw	0
  4566  00626A  140B               	andwf	___lltoft@c+2,w,c
  4567  00626C  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  4568  00626E  0EFF               	movlw	255
  4569  006270  140C               	andwf	___lltoft@c+3,w,c
  4570  006272  6E10               	movwf	(??___lltoft+3)& (0+255),c
  4571  006274  500D               	movf	??___lltoft,w,c
  4572  006276  100E               	iorwf	??___lltoft+1,w,c
  4573  006278  100F               	iorwf	??___lltoft+2,w,c
  4574  00627A  1010               	iorwf	??___lltoft+3,w,c
  4575  00627C  A4D8               	btfss	status,2,c
  4576  00627E  D7E8               	goto	l703
  4577  006280  C009  F001         	movff	___lltoft@c,___ftpack@arg
  4578  006284  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  4579  006288  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  4580  00628C  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  4581  006290  0E00               	movlw	0
  4582  006292  6E05               	movwf	___ftpack@sign,c
  4583  006294  ECDB  F032         	call	___ftpack	;wreg free
  4584  006298  C001  F009         	movff	?___ftpack,?___lltoft
  4585  00629C  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  4586  0062A0  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  4587  0062A4  0012               	return	
  4588  0062A6                     __end_of___lltoft:
  4589                           	opt stack 0
  4590                           tblptru	equ	0xFF8
  4591                           tblptrh	equ	0xFF7
  4592                           tblptrl	equ	0xFF6
  4593                           tablat	equ	0xFF5
  4594                           prodh	equ	0xFF4
  4595                           prodl	equ	0xFF3
  4596                           postinc0	equ	0xFEE
  4597                           wreg	equ	0xFE8
  4598                           indf2	equ	0xFDF
  4599                           postinc2	equ	0xFDE
  4600                           postdec2	equ	0xFDD
  4601                           fsr2h	equ	0xFDA
  4602                           fsr2l	equ	0xFD9
  4603                           status	equ	0xFD8
  4604                           
  4605 ;; *************** function ___llmod *****************
  4606 ;; Defined at:
  4607 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
  4608 ;; Parameters:    Size  Location     Type
  4609 ;;  dividend        4    0[COMRAM] unsigned long 
  4610 ;;  divisor         4    4[COMRAM] unsigned long 
  4611 ;; Auto vars:     Size  Location     Type
  4612 ;;  counter         1    8[COMRAM] unsigned char 
  4613 ;; Return value:  Size  Location     Type
  4614 ;;                  4    0[COMRAM] unsigned long 
  4615 ;; Registers used:
  4616 ;;		wreg, status,2, status,0
  4617 ;; Tracked objects:
  4618 ;;		On entry : 0/0
  4619 ;;		On exit  : 0/0
  4620 ;;		Unchanged: 0/0
  4621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4622 ;;      Params:         8       0       0       0       0       0       0       0       0
  4623 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4624 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4625 ;;      Totals:         9       0       0       0       0       0       0       0       0
  4626 ;;Total ram usage:        9 bytes
  4627 ;; Hardware stack levels used:    1
  4628 ;; This function calls:
  4629 ;;		Nothing
  4630 ;; This function is called by:
  4631 ;;		_sprintf
  4632 ;; This function uses a non-reentrant model
  4633 ;;
  4634                           
  4635                           	psect	text12
  4636  0062A6                     __ptext12:
  4637                           	opt stack 0
  4638  0062A6                     ___llmod:
  4639                           	opt stack 29
  4640                           
  4641                           ;incstack = 0
  4642  0062A6  5005               	movf	___llmod@divisor,w,c
  4643  0062A8  1006               	iorwf	___llmod@divisor+1,w,c
  4644  0062AA  1007               	iorwf	___llmod@divisor+2,w,c
  4645  0062AC  1008               	iorwf	___llmod@divisor+3,w,c
  4646  0062AE  B4D8               	btfsc	status,2,c
  4647  0062B0  D024               	goto	l696
  4648  0062B2  0E01               	movlw	1
  4649  0062B4  6E09               	movwf	___llmod@counter,c
  4650  0062B6  D006               	goto	l691
  4651  0062B8  90D8               	bcf	status,0,c
  4652  0062BA  3605               	rlcf	___llmod@divisor,f,c
  4653  0062BC  3606               	rlcf	___llmod@divisor+1,f,c
  4654  0062BE  3607               	rlcf	___llmod@divisor+2,f,c
  4655  0062C0  3608               	rlcf	___llmod@divisor+3,f,c
  4656  0062C2  2A09               	incf	___llmod@counter,f,c
  4657  0062C4                     l691:
  4658  0062C4  AE08               	btfss	___llmod@divisor+3,7,c
  4659  0062C6  D7F8               	goto	l692
  4660  0062C8                     u2600:
  4661  0062C8  5005               	movf	___llmod@divisor,w,c
  4662  0062CA  5C01               	subwf	___llmod@dividend,w,c
  4663  0062CC  5006               	movf	___llmod@divisor+1,w,c
  4664  0062CE  5802               	subwfb	___llmod@dividend+1,w,c
  4665  0062D0  5007               	movf	___llmod@divisor+2,w,c
  4666  0062D2  5803               	subwfb	___llmod@dividend+2,w,c
  4667  0062D4  5008               	movf	___llmod@divisor+3,w,c
  4668  0062D6  5804               	subwfb	___llmod@dividend+3,w,c
  4669  0062D8  A0D8               	btfss	status,0,c
  4670  0062DA  D008               	goto	l695
  4671  0062DC  5005               	movf	___llmod@divisor,w,c
  4672  0062DE  5E01               	subwf	___llmod@dividend,f,c
  4673  0062E0  5006               	movf	___llmod@divisor+1,w,c
  4674  0062E2  5A02               	subwfb	___llmod@dividend+1,f,c
  4675  0062E4  5007               	movf	___llmod@divisor+2,w,c
  4676  0062E6  5A03               	subwfb	___llmod@dividend+2,f,c
  4677  0062E8  5008               	movf	___llmod@divisor+3,w,c
  4678  0062EA  5A04               	subwfb	___llmod@dividend+3,f,c
  4679  0062EC                     l695:
  4680  0062EC  90D8               	bcf	status,0,c
  4681  0062EE  3208               	rrcf	___llmod@divisor+3,f,c
  4682  0062F0  3207               	rrcf	___llmod@divisor+2,f,c
  4683  0062F2  3206               	rrcf	___llmod@divisor+1,f,c
  4684  0062F4  3205               	rrcf	___llmod@divisor,f,c
  4685  0062F6  2E09               	decfsz	___llmod@counter,f,c
  4686  0062F8  D7E7               	goto	u2600
  4687  0062FA                     l696:
  4688  0062FA  C001  F001         	movff	___llmod@dividend,?___llmod
  4689  0062FE  C002  F002         	movff	___llmod@dividend+1,?___llmod+1
  4690  006302  C003  F003         	movff	___llmod@dividend+2,?___llmod+2
  4691  006306  C004  F004         	movff	___llmod@dividend+3,?___llmod+3
  4692  00630A  0012               	return		;funcret
  4693  00630C                     __end_of___llmod:
  4694                           	opt stack 0
  4695                           tblptru	equ	0xFF8
  4696                           tblptrh	equ	0xFF7
  4697                           tblptrl	equ	0xFF6
  4698                           tablat	equ	0xFF5
  4699                           prodh	equ	0xFF4
  4700                           prodl	equ	0xFF3
  4701                           postinc0	equ	0xFEE
  4702                           wreg	equ	0xFE8
  4703                           indf2	equ	0xFDF
  4704                           postinc2	equ	0xFDE
  4705                           postdec2	equ	0xFDD
  4706                           fsr2h	equ	0xFDA
  4707                           fsr2l	equ	0xFD9
  4708                           status	equ	0xFD8
  4709                           
  4710 ;; *************** function ___lldiv *****************
  4711 ;; Defined at:
  4712 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  4713 ;; Parameters:    Size  Location     Type
  4714 ;;  dividend        4    0[COMRAM] unsigned long 
  4715 ;;  divisor         4    4[COMRAM] unsigned long 
  4716 ;; Auto vars:     Size  Location     Type
  4717 ;;  quotient        4    8[COMRAM] unsigned long 
  4718 ;;  counter         1   12[COMRAM] unsigned char 
  4719 ;; Return value:  Size  Location     Type
  4720 ;;                  4    0[COMRAM] unsigned long 
  4721 ;; Registers used:
  4722 ;;		wreg, status,2, status,0
  4723 ;; Tracked objects:
  4724 ;;		On entry : 0/0
  4725 ;;		On exit  : 0/0
  4726 ;;		Unchanged: 0/0
  4727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4728 ;;      Params:         8       0       0       0       0       0       0       0       0
  4729 ;;      Locals:         5       0       0       0       0       0       0       0       0
  4730 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4731 ;;      Totals:        13       0       0       0       0       0       0       0       0
  4732 ;;Total ram usage:       13 bytes
  4733 ;; Hardware stack levels used:    1
  4734 ;; This function calls:
  4735 ;;		Nothing
  4736 ;; This function is called by:
  4737 ;;		_sprintf
  4738 ;; This function uses a non-reentrant model
  4739 ;;
  4740                           
  4741                           	psect	text13
  4742  00637C                     __ptext13:
  4743                           	opt stack 0
  4744  00637C                     ___lldiv:
  4745                           	opt stack 29
  4746                           
  4747                           ;incstack = 0
  4748  00637C  0E00               	movlw	0
  4749  00637E  6E09               	movwf	___lldiv@quotient,c
  4750  006380  0E00               	movlw	0
  4751  006382  6E0A               	movwf	___lldiv@quotient+1,c
  4752  006384  0E00               	movlw	0
  4753  006386  6E0B               	movwf	___lldiv@quotient+2,c
  4754  006388  0E00               	movlw	0
  4755  00638A  6E0C               	movwf	___lldiv@quotient+3,c
  4756  00638C  5005               	movf	___lldiv@divisor,w,c
  4757  00638E  1006               	iorwf	___lldiv@divisor+1,w,c
  4758  006390  1007               	iorwf	___lldiv@divisor+2,w,c
  4759  006392  1008               	iorwf	___lldiv@divisor+3,w,c
  4760  006394  B4D8               	btfsc	status,2,c
  4761  006396  D02A               	goto	l686
  4762  006398  0E01               	movlw	1
  4763  00639A  6E0D               	movwf	___lldiv@counter,c
  4764  00639C  D006               	goto	l681
  4765  00639E  90D8               	bcf	status,0,c
  4766  0063A0  3605               	rlcf	___lldiv@divisor,f,c
  4767  0063A2  3606               	rlcf	___lldiv@divisor+1,f,c
  4768  0063A4  3607               	rlcf	___lldiv@divisor+2,f,c
  4769  0063A6  3608               	rlcf	___lldiv@divisor+3,f,c
  4770  0063A8  2A0D               	incf	___lldiv@counter,f,c
  4771  0063AA                     l681:
  4772  0063AA  AE08               	btfss	___lldiv@divisor+3,7,c
  4773  0063AC  D7F8               	goto	l682
  4774  0063AE                     u2570:
  4775  0063AE  90D8               	bcf	status,0,c
  4776  0063B0  3609               	rlcf	___lldiv@quotient,f,c
  4777  0063B2  360A               	rlcf	___lldiv@quotient+1,f,c
  4778  0063B4  360B               	rlcf	___lldiv@quotient+2,f,c
  4779  0063B6  360C               	rlcf	___lldiv@quotient+3,f,c
  4780  0063B8  5005               	movf	___lldiv@divisor,w,c
  4781  0063BA  5C01               	subwf	___lldiv@dividend,w,c
  4782  0063BC  5006               	movf	___lldiv@divisor+1,w,c
  4783  0063BE  5802               	subwfb	___lldiv@dividend+1,w,c
  4784  0063C0  5007               	movf	___lldiv@divisor+2,w,c
  4785  0063C2  5803               	subwfb	___lldiv@dividend+2,w,c
  4786  0063C4  5008               	movf	___lldiv@divisor+3,w,c
  4787  0063C6  5804               	subwfb	___lldiv@dividend+3,w,c
  4788  0063C8  A0D8               	btfss	status,0,c
  4789  0063CA  D009               	goto	l685
  4790  0063CC  5005               	movf	___lldiv@divisor,w,c
  4791  0063CE  5E01               	subwf	___lldiv@dividend,f,c
  4792  0063D0  5006               	movf	___lldiv@divisor+1,w,c
  4793  0063D2  5A02               	subwfb	___lldiv@dividend+1,f,c
  4794  0063D4  5007               	movf	___lldiv@divisor+2,w,c
  4795  0063D6  5A03               	subwfb	___lldiv@dividend+2,f,c
  4796  0063D8  5008               	movf	___lldiv@divisor+3,w,c
  4797  0063DA  5A04               	subwfb	___lldiv@dividend+3,f,c
  4798  0063DC  8009               	bsf	___lldiv@quotient,0,c
  4799  0063DE                     l685:
  4800  0063DE  90D8               	bcf	status,0,c
  4801  0063E0  3208               	rrcf	___lldiv@divisor+3,f,c
  4802  0063E2  3207               	rrcf	___lldiv@divisor+2,f,c
  4803  0063E4  3206               	rrcf	___lldiv@divisor+1,f,c
  4804  0063E6  3205               	rrcf	___lldiv@divisor,f,c
  4805  0063E8  2E0D               	decfsz	___lldiv@counter,f,c
  4806  0063EA  D7E1               	goto	u2570
  4807  0063EC                     l686:
  4808  0063EC  C009  F001         	movff	___lldiv@quotient,?___lldiv
  4809  0063F0  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  4810  0063F4  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  4811  0063F8  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  4812  0063FC  0012               	return		;funcret
  4813  0063FE                     __end_of___lldiv:
  4814                           	opt stack 0
  4815                           tblptru	equ	0xFF8
  4816                           tblptrh	equ	0xFF7
  4817                           tblptrl	equ	0xFF6
  4818                           tablat	equ	0xFF5
  4819                           prodh	equ	0xFF4
  4820                           prodl	equ	0xFF3
  4821                           postinc0	equ	0xFEE
  4822                           wreg	equ	0xFE8
  4823                           indf2	equ	0xFDF
  4824                           postinc2	equ	0xFDE
  4825                           postdec2	equ	0xFDD
  4826                           fsr2h	equ	0xFDA
  4827                           fsr2l	equ	0xFD9
  4828                           status	equ	0xFD8
  4829                           
  4830 ;; *************** function ___fttol *****************
  4831 ;; Defined at:
  4832 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
  4833 ;; Parameters:    Size  Location     Type
  4834 ;;  f1              3   42[COMRAM] float 
  4835 ;; Auto vars:     Size  Location     Type
  4836 ;;  lval            4   52[COMRAM] unsigned long 
  4837 ;;  exp1            1   56[COMRAM] unsigned char 
  4838 ;;  sign1           1   51[COMRAM] unsigned char 
  4839 ;; Return value:  Size  Location     Type
  4840 ;;                  4   42[COMRAM] long 
  4841 ;; Registers used:
  4842 ;;		wreg, status,2, status,0
  4843 ;; Tracked objects:
  4844 ;;		On entry : 0/0
  4845 ;;		On exit  : 0/0
  4846 ;;		Unchanged: 0/0
  4847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4848 ;;      Params:         4       0       0       0       0       0       0       0       0
  4849 ;;      Locals:         6       0       0       0       0       0       0       0       0
  4850 ;;      Temps:          5       0       0       0       0       0       0       0       0
  4851 ;;      Totals:        15       0       0       0       0       0       0       0       0
  4852 ;;Total ram usage:       15 bytes
  4853 ;; Hardware stack levels used:    1
  4854 ;; This function calls:
  4855 ;;		Nothing
  4856 ;; This function is called by:
  4857 ;;		_sprintf
  4858 ;; This function uses a non-reentrant model
  4859 ;;
  4860                           
  4861                           	psect	text14
  4862  00674A                     __ptext14:
  4863                           	opt stack 0
  4864  00674A                     ___fttol:
  4865                           	opt stack 29
  4866                           
  4867                           ;incstack = 0
  4868  00674A  C02D  F02F         	movff	___fttol@f1+2,??___fttol
  4869  00674E  6A30               	clrf	(??___fttol+1)& (0+255),c
  4870  006750  6A31               	clrf	(??___fttol+2)& (0+255),c
  4871  006752  342C               	rlcf	___fttol@f1+1,w,c
  4872  006754  362F               	rlcf	??___fttol& (0+255),f,c
  4873  006756  E301               	bnc	u2481
  4874  006758  8030               	bsf	(??___fttol+1)& (0+255),0,c
  4875  00675A                     u2481:
  4876  00675A  502F               	movf	??___fttol,w,c
  4877  00675C  6E39               	movwf	___fttol@exp1,c
  4878  00675E  5039               	movf	___fttol@exp1,w,c
  4879  006760  A4D8               	btfss	status,2,c
  4880  006762  D009               	goto	l640
  4881  006764  0E00               	movlw	0
  4882  006766  6E2B               	movwf	?___fttol,c
  4883  006768  0E00               	movlw	0
  4884  00676A  6E2C               	movwf	?___fttol+1,c
  4885  00676C  0E00               	movlw	0
  4886  00676E  6E2D               	movwf	?___fttol+2,c
  4887  006770  0E00               	movlw	0
  4888  006772  6E2E               	movwf	?___fttol+3,c
  4889  006774  0012               	return	
  4890  006776                     l640:
  4891  006776  0E17               	movlw	23
  4892  006778  6E2F               	movwf	??___fttol& (0+255),c
  4893  00677A  C02B  F030         	movff	___fttol@f1,??___fttol+1
  4894  00677E  C02C  F031         	movff	___fttol@f1+1,??___fttol+2
  4895  006782  C02D  F032         	movff	___fttol@f1+2,??___fttol+3
  4896  006786  282F               	incf	??___fttol,w,c
  4897  006788  6E33               	movwf	(??___fttol+4)& (0+255),c
  4898  00678A  D004               	goto	u2500
  4899  00678C                     u2505:
  4900  00678C  90D8               	bcf	status,0,c
  4901  00678E  3232               	rrcf	??___fttol+3,f,c
  4902  006790  3231               	rrcf	??___fttol+2,f,c
  4903  006792  3230               	rrcf	??___fttol+1,f,c
  4904  006794                     u2500:
  4905  006794  2E33               	decfsz	(??___fttol+4)& (0+255),f,c
  4906  006796  D7FA               	goto	u2505
  4907  006798  5030               	movf	??___fttol+1,w,c
  4908  00679A  6E34               	movwf	___fttol@sign1,c
  4909  00679C  8E2C               	bsf	___fttol@f1+1,7,c
  4910  00679E  0EFF               	movlw	255
  4911  0067A0  162B               	andwf	___fttol@f1,f,c
  4912  0067A2  0EFF               	movlw	255
  4913  0067A4  162C               	andwf	___fttol@f1+1,f,c
  4914  0067A6  0E00               	movlw	0
  4915  0067A8  162D               	andwf	___fttol@f1+2,f,c
  4916  0067AA  502B               	movf	___fttol@f1,w,c
  4917  0067AC  6E35               	movwf	___fttol@lval,c
  4918  0067AE  502C               	movf	___fttol@f1+1,w,c
  4919  0067B0  6E36               	movwf	___fttol@lval+1,c
  4920  0067B2  502D               	movf	___fttol@f1+2,w,c
  4921  0067B4  6E37               	movwf	___fttol@lval+2,c
  4922  0067B6  6A38               	clrf	___fttol@lval+3,c
  4923  0067B8  0E8E               	movlw	142
  4924  0067BA  5E39               	subwf	___fttol@exp1,f,c
  4925  0067BC  AE39               	btfss	___fttol@exp1,7,c
  4926  0067BE  D016               	goto	l642
  4927  0067C0  5039               	movf	___fttol@exp1,w,c
  4928  0067C2  0A80               	xorlw	128
  4929  0067C4  0F8F               	addlw	143
  4930  0067C6  B0D8               	btfsc	status,0,c
  4931  0067C8  D009               	goto	l643
  4932  0067CA  0E00               	movlw	0
  4933  0067CC  6E2B               	movwf	?___fttol,c
  4934  0067CE  0E00               	movlw	0
  4935  0067D0  6E2C               	movwf	?___fttol+1,c
  4936  0067D2  0E00               	movlw	0
  4937  0067D4  6E2D               	movwf	?___fttol+2,c
  4938  0067D6  0E00               	movlw	0
  4939  0067D8  6E2E               	movwf	?___fttol+3,c
  4940  0067DA  0012               	return	
  4941  0067DC                     l643:
  4942  0067DC  90D8               	bcf	status,0,c
  4943  0067DE  3238               	rrcf	___fttol@lval+3,f,c
  4944  0067E0  3237               	rrcf	___fttol@lval+2,f,c
  4945  0067E2  3236               	rrcf	___fttol@lval+1,f,c
  4946  0067E4  3235               	rrcf	___fttol@lval,f,c
  4947  0067E6  3E39               	incfsz	___fttol@exp1,f,c
  4948  0067E8  D7F9               	goto	l643
  4949  0067EA  D015               	goto	u2540
  4950  0067EC                     l642:
  4951  0067EC  0E17               	movlw	23
  4952  0067EE  6439               	cpfsgt	___fttol@exp1,c
  4953  0067F0  D00F               	goto	l648
  4954  0067F2  0E00               	movlw	0
  4955  0067F4  6E2B               	movwf	?___fttol,c
  4956  0067F6  0E00               	movlw	0
  4957  0067F8  6E2C               	movwf	?___fttol+1,c
  4958  0067FA  0E00               	movlw	0
  4959  0067FC  6E2D               	movwf	?___fttol+2,c
  4960  0067FE  0E00               	movlw	0
  4961  006800  6E2E               	movwf	?___fttol+3,c
  4962  006802  0012               	return	
  4963  006804  90D8               	bcf	status,0,c
  4964  006806  3635               	rlcf	___fttol@lval,f,c
  4965  006808  3636               	rlcf	___fttol@lval+1,f,c
  4966  00680A  3637               	rlcf	___fttol@lval+2,f,c
  4967  00680C  3638               	rlcf	___fttol@lval+3,f,c
  4968  00680E  0639               	decf	___fttol@exp1,f,c
  4969  006810                     l648:
  4970  006810  5039               	movf	___fttol@exp1,w,c
  4971  006812  A4D8               	btfss	status,2,c
  4972  006814  D7F7               	goto	l649
  4973  006816                     u2540:
  4974  006816  5034               	movf	___fttol@sign1,w,c
  4975  006818  B4D8               	btfsc	status,2,c
  4976  00681A  D008               	goto	l651
  4977  00681C  1E38               	comf	___fttol@lval+3,f,c
  4978  00681E  1E37               	comf	___fttol@lval+2,f,c
  4979  006820  1E36               	comf	___fttol@lval+1,f,c
  4980  006822  6C35               	negf	___fttol@lval,c
  4981  006824  0E00               	movlw	0
  4982  006826  2236               	addwfc	___fttol@lval+1,f,c
  4983  006828  2237               	addwfc	___fttol@lval+2,f,c
  4984  00682A  2238               	addwfc	___fttol@lval+3,f,c
  4985  00682C                     l651:
  4986  00682C  C035  F02B         	movff	___fttol@lval,?___fttol
  4987  006830  C036  F02C         	movff	___fttol@lval+1,?___fttol+1
  4988  006834  C037  F02D         	movff	___fttol@lval+2,?___fttol+2
  4989  006838  C038  F02E         	movff	___fttol@lval+3,?___fttol+3
  4990  00683C  0012               	return	
  4991  00683E                     __end_of___fttol:
  4992                           	opt stack 0
  4993                           tblptru	equ	0xFF8
  4994                           tblptrh	equ	0xFF7
  4995                           tblptrl	equ	0xFF6
  4996                           tablat	equ	0xFF5
  4997                           prodh	equ	0xFF4
  4998                           prodl	equ	0xFF3
  4999                           postinc0	equ	0xFEE
  5000                           wreg	equ	0xFE8
  5001                           indf2	equ	0xFDF
  5002                           postinc2	equ	0xFDE
  5003                           postdec2	equ	0xFDD
  5004                           fsr2h	equ	0xFDA
  5005                           fsr2l	equ	0xFD9
  5006                           status	equ	0xFD8
  5007                           
  5008 ;; *************** function ___ftsub *****************
  5009 ;; Defined at:
  5010 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftsub.c"
  5011 ;; Parameters:    Size  Location     Type
  5012 ;;  f1              3   57[COMRAM] float 
  5013 ;;  f2              3   60[COMRAM] float 
  5014 ;; Auto vars:     Size  Location     Type
  5015 ;;		None
  5016 ;; Return value:  Size  Location     Type
  5017 ;;                  3   57[COMRAM] float 
  5018 ;; Registers used:
  5019 ;;		wreg, status,2, status,0, cstack
  5020 ;; Tracked objects:
  5021 ;;		On entry : 0/0
  5022 ;;		On exit  : 0/0
  5023 ;;		Unchanged: 0/0
  5024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5025 ;;      Params:         6       0       0       0       0       0       0       0       0
  5026 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5027 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5028 ;;      Totals:         6       0       0       0       0       0       0       0       0
  5029 ;;Total ram usage:        6 bytes
  5030 ;; Hardware stack levels used:    1
  5031 ;; Hardware stack levels required when called:    2
  5032 ;; This function calls:
  5033 ;;		___ftadd
  5034 ;; This function is called by:
  5035 ;;		_sprintf
  5036 ;; This function uses a non-reentrant model
  5037 ;;
  5038                           
  5039                           	psect	text15
  5040  006114                     __ptext15:
  5041                           	opt stack 0
  5042  006114                     ___ftsub:
  5043                           	opt stack 27
  5044                           
  5045                           ;incstack = 0
  5046  006114  503D               	movf	___ftsub@f2,w,c
  5047  006116  103E               	iorwf	___ftsub@f2+1,w,c
  5048  006118  103F               	iorwf	___ftsub@f2+2,w,c
  5049  00611A  B4D8               	btfsc	status,2,c
  5050  00611C  D006               	goto	l636
  5051  00611E  0E00               	movlw	0
  5052  006120  1A3D               	xorwf	___ftsub@f2,f,c
  5053  006122  0E00               	movlw	0
  5054  006124  1A3E               	xorwf	___ftsub@f2+1,f,c
  5055  006126  0E80               	movlw	128
  5056  006128  1A3F               	xorwf	___ftsub@f2+2,f,c
  5057  00612A                     l636:
  5058  00612A  C03A  F02E         	movff	___ftsub@f1,___ftadd@f1
  5059  00612E  C03B  F02F         	movff	___ftsub@f1+1,___ftadd@f1+1
  5060  006132  C03C  F030         	movff	___ftsub@f1+2,___ftadd@f1+2
  5061  006136  C03D  F031         	movff	___ftsub@f2,___ftadd@f2
  5062  00613A  C03E  F032         	movff	___ftsub@f2+1,___ftadd@f2+1
  5063  00613E  C03F  F033         	movff	___ftsub@f2+2,___ftadd@f2+2
  5064  006142  ECC6  F035         	call	___ftadd	;wreg free
  5065  006146  C02E  F03A         	movff	?___ftadd,?___ftsub
  5066  00614A  C02F  F03B         	movff	?___ftadd+1,?___ftsub+1
  5067  00614E  C030  F03C         	movff	?___ftadd+2,?___ftsub+2
  5068  006152  0012               	return	
  5069  006154                     __end_of___ftsub:
  5070                           	opt stack 0
  5071                           tblptru	equ	0xFF8
  5072                           tblptrh	equ	0xFF7
  5073                           tblptrl	equ	0xFF6
  5074                           tablat	equ	0xFF5
  5075                           prodh	equ	0xFF4
  5076                           prodl	equ	0xFF3
  5077                           postinc0	equ	0xFEE
  5078                           wreg	equ	0xFE8
  5079                           indf2	equ	0xFDF
  5080                           postinc2	equ	0xFDE
  5081                           postdec2	equ	0xFDD
  5082                           fsr2h	equ	0xFDA
  5083                           fsr2l	equ	0xFD9
  5084                           status	equ	0xFD8
  5085                           
  5086 ;; *************** function ___ftadd *****************
  5087 ;; Defined at:
  5088 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
  5089 ;; Parameters:    Size  Location     Type
  5090 ;;  f1              3   45[COMRAM] float 
  5091 ;;  f2              3   48[COMRAM] float 
  5092 ;; Auto vars:     Size  Location     Type
  5093 ;;  exp1            1   56[COMRAM] unsigned char 
  5094 ;;  exp2            1   55[COMRAM] unsigned char 
  5095 ;;  sign            1   54[COMRAM] unsigned char 
  5096 ;; Return value:  Size  Location     Type
  5097 ;;                  3   45[COMRAM] float 
  5098 ;; Registers used:
  5099 ;;		wreg, status,2, status,0, cstack
  5100 ;; Tracked objects:
  5101 ;;		On entry : 0/0
  5102 ;;		On exit  : 0/0
  5103 ;;		Unchanged: 0/0
  5104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5105 ;;      Params:         6       0       0       0       0       0       0       0       0
  5106 ;;      Locals:         3       0       0       0       0       0       0       0       0
  5107 ;;      Temps:          3       0       0       0       0       0       0       0       0
  5108 ;;      Totals:        12       0       0       0       0       0       0       0       0
  5109 ;;Total ram usage:       12 bytes
  5110 ;; Hardware stack levels used:    1
  5111 ;; Hardware stack levels required when called:    1
  5112 ;; This function calls:
  5113 ;;		___ftpack
  5114 ;; This function is called by:
  5115 ;;		_sprintf
  5116 ;;		___ftsub
  5117 ;; This function uses a non-reentrant model
  5118 ;;
  5119                           
  5120                           	psect	text16
  5121  006B8C                     __ptext16:
  5122                           	opt stack 0
  5123  006B8C                     ___ftadd:
  5124                           	opt stack 27
  5125                           
  5126                           ;incstack = 0
  5127  006B8C  C030  F034         	movff	___ftadd@f1+2,??___ftadd
  5128  006B90  6A35               	clrf	(??___ftadd+1)& (0+255),c
  5129  006B92  6A36               	clrf	(??___ftadd+2)& (0+255),c
  5130  006B94  342F               	rlcf	___ftadd@f1+1,w,c
  5131  006B96  3634               	rlcf	??___ftadd& (0+255),f,c
  5132  006B98  E301               	bnc	u1711
  5133  006B9A  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  5134  006B9C                     u1711:
  5135  006B9C  5034               	movf	??___ftadd,w,c
  5136  006B9E  6E39               	movwf	___ftadd@exp1,c
  5137  006BA0  C033  F034         	movff	___ftadd@f2+2,??___ftadd
  5138  006BA4  6A35               	clrf	(??___ftadd+1)& (0+255),c
  5139  006BA6  6A36               	clrf	(??___ftadd+2)& (0+255),c
  5140  006BA8  3432               	rlcf	___ftadd@f2+1,w,c
  5141  006BAA  3634               	rlcf	??___ftadd& (0+255),f,c
  5142  006BAC  E301               	bnc	u1721
  5143  006BAE  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  5144  006BB0                     u1721:
  5145  006BB0  5034               	movf	??___ftadd,w,c
  5146  006BB2  6E38               	movwf	___ftadd@exp2,c
  5147  006BB4  5039               	movf	___ftadd@exp1,w,c
  5148  006BB6  B4D8               	btfsc	status,2,c
  5149  006BB8  D00B               	goto	u1750
  5150  006BBA  5038               	movf	___ftadd@exp2,w,c
  5151  006BBC  5C39               	subwf	___ftadd@exp1,w,c
  5152  006BBE  B0D8               	btfsc	status,0,c
  5153  006BC0  D00E               	goto	l554
  5154  006BC2  5039               	movf	___ftadd@exp1,w,c
  5155  006BC4  0800               	sublw	0
  5156  006BC6  2438               	addwf	___ftadd@exp2,w,c
  5157  006BC8  6E34               	movwf	??___ftadd& (0+255),c
  5158  006BCA  0E18               	movlw	24
  5159  006BCC  6434               	cpfsgt	??___ftadd,c
  5160  006BCE  D007               	goto	l554
  5161  006BD0                     u1750:
  5162  006BD0  C031  F02E         	movff	___ftadd@f2,?___ftadd
  5163  006BD4  C032  F02F         	movff	___ftadd@f2+1,?___ftadd+1
  5164  006BD8  C033  F030         	movff	___ftadd@f2+2,?___ftadd+2
  5165  006BDC  0012               	return	
  5166  006BDE                     l554:
  5167  006BDE  5038               	movf	___ftadd@exp2,w,c
  5168  006BE0  B4D8               	btfsc	status,2,c
  5169  006BE2  D00B               	goto	u1780
  5170  006BE4  5039               	movf	___ftadd@exp1,w,c
  5171  006BE6  5C38               	subwf	___ftadd@exp2,w,c
  5172  006BE8  B0D8               	btfsc	status,0,c
  5173  006BEA  D00E               	goto	l558
  5174  006BEC  5038               	movf	___ftadd@exp2,w,c
  5175  006BEE  0800               	sublw	0
  5176  006BF0  2439               	addwf	___ftadd@exp1,w,c
  5177  006BF2  6E34               	movwf	??___ftadd& (0+255),c
  5178  006BF4  0E18               	movlw	24
  5179  006BF6  6434               	cpfsgt	??___ftadd,c
  5180  006BF8  D007               	goto	l558
  5181  006BFA                     u1780:
  5182  006BFA  C02E  F02E         	movff	___ftadd@f1,?___ftadd
  5183  006BFE  C02F  F02F         	movff	___ftadd@f1+1,?___ftadd+1
  5184  006C02  C030  F030         	movff	___ftadd@f1+2,?___ftadd+2
  5185  006C06  0012               	return	
  5186  006C08                     l558:
  5187  006C08  0E06               	movlw	6
  5188  006C0A  6E37               	movwf	___ftadd@sign,c
  5189  006C0C  BE30               	btfsc	___ftadd@f1+2,7,c
  5190  006C0E  8E37               	bsf	___ftadd@sign,7,c
  5191  006C10  BE33               	btfsc	___ftadd@f2+2,7,c
  5192  006C12  8C37               	bsf	___ftadd@sign,6,c
  5193  006C14  8E2F               	bsf	___ftadd@f1+1,7,c
  5194  006C16  0EFF               	movlw	255
  5195  006C18  162E               	andwf	___ftadd@f1,f,c
  5196  006C1A  0EFF               	movlw	255
  5197  006C1C  162F               	andwf	___ftadd@f1+1,f,c
  5198  006C1E  0E00               	movlw	0
  5199  006C20  1630               	andwf	___ftadd@f1+2,f,c
  5200  006C22  8E32               	bsf	___ftadd@f2+1,7,c
  5201  006C24  0EFF               	movlw	255
  5202  006C26  1631               	andwf	___ftadd@f2,f,c
  5203  006C28  0EFF               	movlw	255
  5204  006C2A  1632               	andwf	___ftadd@f2+1,f,c
  5205  006C2C  0E00               	movlw	0
  5206  006C2E  1633               	andwf	___ftadd@f2+2,f,c
  5207  006C30  5038               	movf	___ftadd@exp2,w,c
  5208  006C32  5C39               	subwf	___ftadd@exp1,w,c
  5209  006C34  B0D8               	btfsc	status,0,c
  5210  006C36  D01B               	goto	l563
  5211  006C38                     u1810:
  5212  006C38  90D8               	bcf	status,0,c
  5213  006C3A  3631               	rlcf	___ftadd@f2,f,c
  5214  006C3C  3632               	rlcf	___ftadd@f2+1,f,c
  5215  006C3E  3633               	rlcf	___ftadd@f2+2,f,c
  5216  006C40  0638               	decf	___ftadd@exp2,f,c
  5217  006C42  5039               	movf	___ftadd@exp1,w,c
  5218  006C44  1838               	xorwf	___ftadd@exp2,w,c
  5219  006C46  B4D8               	btfsc	status,2,c
  5220  006C48  D00D               	goto	l568
  5221  006C4A  0637               	decf	___ftadd@sign,f,c
  5222  006C4C  C037  F034         	movff	___ftadd@sign,??___ftadd
  5223  006C50  0E07               	movlw	7
  5224  006C52  1634               	andwf	??___ftadd,f,c
  5225  006C54  B4D8               	btfsc	status,2,c
  5226  006C56  D006               	goto	l568
  5227  006C58  D7EF               	goto	u1810
  5228  006C5A  90D8               	bcf	status,0,c
  5229  006C5C  3230               	rrcf	___ftadd@f1+2,f,c
  5230  006C5E  322F               	rrcf	___ftadd@f1+1,f,c
  5231  006C60  322E               	rrcf	___ftadd@f1,f,c
  5232  006C62  2A39               	incf	___ftadd@exp1,f,c
  5233  006C64                     l568:
  5234  006C64  5038               	movf	___ftadd@exp2,w,c
  5235  006C66  1839               	xorwf	___ftadd@exp1,w,c
  5236  006C68  B4D8               	btfsc	status,2,c
  5237  006C6A  D01F               	goto	u1880
  5238  006C6C  D7F6               	goto	l569
  5239  006C6E                     l563:
  5240  006C6E  5039               	movf	___ftadd@exp1,w,c
  5241  006C70  5C38               	subwf	___ftadd@exp2,w,c
  5242  006C72  B0D8               	btfsc	status,0,c
  5243  006C74  D01A               	goto	u1880
  5244  006C76                     u1850:
  5245  006C76  90D8               	bcf	status,0,c
  5246  006C78  362E               	rlcf	___ftadd@f1,f,c
  5247  006C7A  362F               	rlcf	___ftadd@f1+1,f,c
  5248  006C7C  3630               	rlcf	___ftadd@f1+2,f,c
  5249  006C7E  0639               	decf	___ftadd@exp1,f,c
  5250  006C80  5039               	movf	___ftadd@exp1,w,c
  5251  006C82  1838               	xorwf	___ftadd@exp2,w,c
  5252  006C84  B4D8               	btfsc	status,2,c
  5253  006C86  D00D               	goto	l577
  5254  006C88  0637               	decf	___ftadd@sign,f,c
  5255  006C8A  C037  F034         	movff	___ftadd@sign,??___ftadd
  5256  006C8E  0E07               	movlw	7
  5257  006C90  1634               	andwf	??___ftadd,f,c
  5258  006C92  B4D8               	btfsc	status,2,c
  5259  006C94  D006               	goto	l577
  5260  006C96  D7EF               	goto	u1850
  5261  006C98  90D8               	bcf	status,0,c
  5262  006C9A  3233               	rrcf	___ftadd@f2+2,f,c
  5263  006C9C  3232               	rrcf	___ftadd@f2+1,f,c
  5264  006C9E  3231               	rrcf	___ftadd@f2,f,c
  5265  006CA0  2A38               	incf	___ftadd@exp2,f,c
  5266  006CA2                     l577:
  5267  006CA2  5038               	movf	___ftadd@exp2,w,c
  5268  006CA4  1839               	xorwf	___ftadd@exp1,w,c
  5269  006CA6  A4D8               	btfss	status,2,c
  5270  006CA8  D7F7               	goto	l578
  5271  006CAA                     u1880:
  5272  006CAA  AE37               	btfss	___ftadd@sign,7,c
  5273  006CAC  D00C               	goto	l580
  5274  006CAE  0EFF               	movlw	255
  5275  006CB0  1A2E               	xorwf	___ftadd@f1,f,c
  5276  006CB2  0EFF               	movlw	255
  5277  006CB4  1A2F               	xorwf	___ftadd@f1+1,f,c
  5278  006CB6  0EFF               	movlw	255
  5279  006CB8  1A30               	xorwf	___ftadd@f1+2,f,c
  5280  006CBA  0E01               	movlw	1
  5281  006CBC  262E               	addwf	___ftadd@f1,f,c
  5282  006CBE  0E00               	movlw	0
  5283  006CC0  222F               	addwfc	___ftadd@f1+1,f,c
  5284  006CC2  0E00               	movlw	0
  5285  006CC4  2230               	addwfc	___ftadd@f1+2,f,c
  5286  006CC6                     l580:
  5287  006CC6  AC37               	btfss	___ftadd@sign,6,c
  5288  006CC8  D00C               	goto	l581
  5289  006CCA  0EFF               	movlw	255
  5290  006CCC  1A31               	xorwf	___ftadd@f2,f,c
  5291  006CCE  0EFF               	movlw	255
  5292  006CD0  1A32               	xorwf	___ftadd@f2+1,f,c
  5293  006CD2  0EFF               	movlw	255
  5294  006CD4  1A33               	xorwf	___ftadd@f2+2,f,c
  5295  006CD6  0E01               	movlw	1
  5296  006CD8  2631               	addwf	___ftadd@f2,f,c
  5297  006CDA  0E00               	movlw	0
  5298  006CDC  2232               	addwfc	___ftadd@f2+1,f,c
  5299  006CDE  0E00               	movlw	0
  5300  006CE0  2233               	addwfc	___ftadd@f2+2,f,c
  5301  006CE2                     l581:
  5302  006CE2  0E00               	movlw	0
  5303  006CE4  6E37               	movwf	___ftadd@sign,c
  5304  006CE6  502E               	movf	___ftadd@f1,w,c
  5305  006CE8  2631               	addwf	___ftadd@f2,f,c
  5306  006CEA  502F               	movf	___ftadd@f1+1,w,c
  5307  006CEC  2232               	addwfc	___ftadd@f2+1,f,c
  5308  006CEE  5030               	movf	___ftadd@f1+2,w,c
  5309  006CF0  2233               	addwfc	___ftadd@f2+2,f,c
  5310  006CF2  AE33               	btfss	___ftadd@f2+2,7,c
  5311  006CF4  D00E               	goto	l582
  5312  006CF6  0EFF               	movlw	255
  5313  006CF8  1A31               	xorwf	___ftadd@f2,f,c
  5314  006CFA  0EFF               	movlw	255
  5315  006CFC  1A32               	xorwf	___ftadd@f2+1,f,c
  5316  006CFE  0EFF               	movlw	255
  5317  006D00  1A33               	xorwf	___ftadd@f2+2,f,c
  5318  006D02  0E01               	movlw	1
  5319  006D04  2631               	addwf	___ftadd@f2,f,c
  5320  006D06  0E00               	movlw	0
  5321  006D08  2232               	addwfc	___ftadd@f2+1,f,c
  5322  006D0A  0E00               	movlw	0
  5323  006D0C  2233               	addwfc	___ftadd@f2+2,f,c
  5324  006D0E  0E01               	movlw	1
  5325  006D10  6E37               	movwf	___ftadd@sign,c
  5326  006D12                     l582:
  5327  006D12  C031  F001         	movff	___ftadd@f2,___ftpack@arg
  5328  006D16  C032  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  5329  006D1A  C033  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  5330  006D1E  C039  F004         	movff	___ftadd@exp1,___ftpack@exp
  5331  006D22  C037  F005         	movff	___ftadd@sign,___ftpack@sign
  5332  006D26  ECDB  F032         	call	___ftpack	;wreg free
  5333  006D2A  C001  F02E         	movff	?___ftpack,?___ftadd
  5334  006D2E  C002  F02F         	movff	?___ftpack+1,?___ftadd+1
  5335  006D32  C003  F030         	movff	?___ftpack+2,?___ftadd+2
  5336  006D36  0012               	return	
  5337  006D38                     __end_of___ftadd:
  5338                           	opt stack 0
  5339                           tblptru	equ	0xFF8
  5340                           tblptrh	equ	0xFF7
  5341                           tblptrl	equ	0xFF6
  5342                           tablat	equ	0xFF5
  5343                           prodh	equ	0xFF4
  5344                           prodl	equ	0xFF3
  5345                           postinc0	equ	0xFEE
  5346                           wreg	equ	0xFE8
  5347                           indf2	equ	0xFDF
  5348                           postinc2	equ	0xFDE
  5349                           postdec2	equ	0xFDD
  5350                           fsr2h	equ	0xFDA
  5351                           fsr2l	equ	0xFD9
  5352                           status	equ	0xFD8
  5353                           
  5354 ;; *************** function ___ftneg *****************
  5355 ;; Defined at:
  5356 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftneg.c"
  5357 ;; Parameters:    Size  Location     Type
  5358 ;;  f1              3    0[COMRAM] float 
  5359 ;; Auto vars:     Size  Location     Type
  5360 ;;		None
  5361 ;; Return value:  Size  Location     Type
  5362 ;;                  3    0[COMRAM] float 
  5363 ;; Registers used:
  5364 ;;		wreg, status,2, status,0
  5365 ;; Tracked objects:
  5366 ;;		On entry : 0/0
  5367 ;;		On exit  : 0/0
  5368 ;;		Unchanged: 0/0
  5369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5370 ;;      Params:         3       0       0       0       0       0       0       0       0
  5371 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5372 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5373 ;;      Totals:         3       0       0       0       0       0       0       0       0
  5374 ;;Total ram usage:        3 bytes
  5375 ;; Hardware stack levels used:    1
  5376 ;; This function calls:
  5377 ;;		Nothing
  5378 ;; This function is called by:
  5379 ;;		_sprintf
  5380 ;; This function uses a non-reentrant model
  5381 ;;
  5382                           
  5383                           	psect	text17
  5384  006020                     __ptext17:
  5385                           	opt stack 0
  5386  006020                     ___ftneg:
  5387                           	opt stack 29
  5388                           
  5389                           ;incstack = 0
  5390  006020  5001               	movf	___ftneg@f1,w,c
  5391  006022  1002               	iorwf	___ftneg@f1+1,w,c
  5392  006024  1003               	iorwf	___ftneg@f1+2,w,c
  5393  006026  B4D8               	btfsc	status,2,c
  5394  006028  D006               	goto	l630
  5395  00602A  0E00               	movlw	0
  5396  00602C  1A01               	xorwf	___ftneg@f1,f,c
  5397  00602E  0E00               	movlw	0
  5398  006030  1A02               	xorwf	___ftneg@f1+1,f,c
  5399  006032  0E80               	movlw	128
  5400  006034  1A03               	xorwf	___ftneg@f1+2,f,c
  5401  006036                     l630:
  5402  006036  C001  F001         	movff	___ftneg@f1,?___ftneg
  5403  00603A  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  5404  00603E  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  5405  006042  0012               	return		;funcret
  5406  006044                     __end_of___ftneg:
  5407                           	opt stack 0
  5408                           tblptru	equ	0xFF8
  5409                           tblptrh	equ	0xFF7
  5410                           tblptrl	equ	0xFF6
  5411                           tablat	equ	0xFF5
  5412                           prodh	equ	0xFF4
  5413                           prodl	equ	0xFF3
  5414                           postinc0	equ	0xFEE
  5415                           wreg	equ	0xFE8
  5416                           indf2	equ	0xFDF
  5417                           postinc2	equ	0xFDE
  5418                           postdec2	equ	0xFDD
  5419                           fsr2h	equ	0xFDA
  5420                           fsr2l	equ	0xFD9
  5421                           status	equ	0xFD8
  5422                           
  5423 ;; *************** function ___ftge *****************
  5424 ;; Defined at:
  5425 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
  5426 ;; Parameters:    Size  Location     Type
  5427 ;;  ff1             3    0[COMRAM] float 
  5428 ;;  ff2             3    3[COMRAM] float 
  5429 ;; Auto vars:     Size  Location     Type
  5430 ;;		None
  5431 ;; Return value:  Size  Location     Type
  5432 ;;		None               void
  5433 ;; Registers used:
  5434 ;;		wreg, status,2, status,0
  5435 ;; Tracked objects:
  5436 ;;		On entry : 0/0
  5437 ;;		On exit  : 0/0
  5438 ;;		Unchanged: 0/0
  5439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5440 ;;      Params:         6       0       0       0       0       0       0       0       0
  5441 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5442 ;;      Temps:          3       0       0       0       0       0       0       0       0
  5443 ;;      Totals:         9       0       0       0       0       0       0       0       0
  5444 ;;Total ram usage:        9 bytes
  5445 ;; Hardware stack levels used:    1
  5446 ;; This function calls:
  5447 ;;		Nothing
  5448 ;; This function is called by:
  5449 ;;		_sprintf
  5450 ;; This function uses a non-reentrant model
  5451 ;;
  5452                           
  5453                           	psect	text18
  5454  006482                     __ptext18:
  5455                           	opt stack 0
  5456  006482                     ___ftge:
  5457                           	opt stack 29
  5458                           
  5459                           ;incstack = 0
  5460  006482  AE03               	btfss	___ftge@ff1+2,7,c
  5461  006484  D016               	goto	l612
  5462  006486  C001  F007         	movff	___ftge@ff1,??___ftge
  5463  00648A  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  5464  00648E  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  5465  006492  1E07               	comf	??___ftge,f,c
  5466  006494  1E08               	comf	??___ftge+1,f,c
  5467  006496  1E09               	comf	??___ftge+2,f,c
  5468  006498  2A07               	incf	??___ftge,f,c
  5469  00649A  0E00               	movlw	0
  5470  00649C  2208               	addwfc	??___ftge+1,f,c
  5471  00649E  2209               	addwfc	??___ftge+2,f,c
  5472  0064A0  0E00               	movlw	0
  5473  0064A2  2407               	addwf	??___ftge,w,c
  5474  0064A4  6E01               	movwf	___ftge@ff1,c
  5475  0064A6  0E00               	movlw	0
  5476  0064A8  2008               	addwfc	??___ftge+1,w,c
  5477  0064AA  6E02               	movwf	___ftge@ff1+1,c
  5478  0064AC  0E80               	movlw	128
  5479  0064AE  2009               	addwfc	??___ftge+2,w,c
  5480  0064B0  6E03               	movwf	___ftge@ff1+2,c
  5481  0064B2                     l612:
  5482  0064B2  AE06               	btfss	___ftge@ff2+2,7,c
  5483  0064B4  D016               	goto	l613
  5484  0064B6  C004  F007         	movff	___ftge@ff2,??___ftge
  5485  0064BA  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  5486  0064BE  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  5487  0064C2  1E07               	comf	??___ftge,f,c
  5488  0064C4  1E08               	comf	??___ftge+1,f,c
  5489  0064C6  1E09               	comf	??___ftge+2,f,c
  5490  0064C8  2A07               	incf	??___ftge,f,c
  5491  0064CA  0E00               	movlw	0
  5492  0064CC  2208               	addwfc	??___ftge+1,f,c
  5493  0064CE  2209               	addwfc	??___ftge+2,f,c
  5494  0064D0  0E00               	movlw	0
  5495  0064D2  2407               	addwf	??___ftge,w,c
  5496  0064D4  6E04               	movwf	___ftge@ff2,c
  5497  0064D6  0E00               	movlw	0
  5498  0064D8  2008               	addwfc	??___ftge+1,w,c
  5499  0064DA  6E05               	movwf	___ftge@ff2+1,c
  5500  0064DC  0E80               	movlw	128
  5501  0064DE  2009               	addwfc	??___ftge+2,w,c
  5502  0064E0  6E06               	movwf	___ftge@ff2+2,c
  5503  0064E2                     l613:
  5504  0064E2  0E00               	movlw	0
  5505  0064E4  1A01               	xorwf	___ftge@ff1,f,c
  5506  0064E6  0E00               	movlw	0
  5507  0064E8  1A02               	xorwf	___ftge@ff1+1,f,c
  5508  0064EA  0E80               	movlw	128
  5509  0064EC  1A03               	xorwf	___ftge@ff1+2,f,c
  5510  0064EE  0E00               	movlw	0
  5511  0064F0  1A04               	xorwf	___ftge@ff2,f,c
  5512  0064F2  0E00               	movlw	0
  5513  0064F4  1A05               	xorwf	___ftge@ff2+1,f,c
  5514  0064F6  0E80               	movlw	128
  5515  0064F8  1A06               	xorwf	___ftge@ff2+2,f,c
  5516  0064FA  5004               	movf	___ftge@ff2,w,c
  5517  0064FC  5C01               	subwf	___ftge@ff1,w,c
  5518  0064FE  5005               	movf	___ftge@ff2+1,w,c
  5519  006500  5802               	subwfb	___ftge@ff1+1,w,c
  5520  006502  5006               	movf	___ftge@ff2+2,w,c
  5521  006504  5803               	subwfb	___ftge@ff1+2,w,c
  5522  006506  B0D8               	btfsc	status,0,c
  5523  006508  D002               	goto	l2220
  5524  00650A  90D8               	bcf	status,0,c
  5525  00650C  0012               	return	
  5526  00650E                     l2220:
  5527  00650E  80D8               	bsf	status,0,c
  5528  006510  0012               	return	
  5529  006512                     __end_of___ftge:
  5530                           	opt stack 0
  5531                           tblptru	equ	0xFF8
  5532                           tblptrh	equ	0xFF7
  5533                           tblptrl	equ	0xFF6
  5534                           tablat	equ	0xFF5
  5535                           prodh	equ	0xFF4
  5536                           prodl	equ	0xFF3
  5537                           postinc0	equ	0xFEE
  5538                           wreg	equ	0xFE8
  5539                           indf2	equ	0xFDF
  5540                           postinc2	equ	0xFDE
  5541                           postdec2	equ	0xFDD
  5542                           fsr2h	equ	0xFDA
  5543                           fsr2l	equ	0xFD9
  5544                           status	equ	0xFD8
  5545                           
  5546 ;; *************** function _putrsXLCD *****************
  5547 ;; Defined at:
  5548 ;;		line 145 in file "LCD_libreria.c"
  5549 ;; Parameters:    Size  Location     Type
  5550 ;;  buffer          2    1[COMRAM] PTR const unsigned char 
  5551 ;;		 -> STR_13(12), STR_12(16), STR_10(12), STR_9(16), 
  5552 ;;		 -> datos(20), STR_7(12), STR_6(16), STR_5(13), 
  5553 ;;		 -> STR_4(13), STR_3(13), STR_2(16), STR_1(16), 
  5554 ;; Auto vars:     Size  Location     Type
  5555 ;;		None
  5556 ;; Return value:  Size  Location     Type
  5557 ;;                  1    wreg      void 
  5558 ;; Registers used:
  5559 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5560 ;; Tracked objects:
  5561 ;;		On entry : 0/0
  5562 ;;		On exit  : 0/0
  5563 ;;		Unchanged: 0/0
  5564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5565 ;;      Params:         2       0       0       0       0       0       0       0       0
  5566 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5567 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5568 ;;      Totals:         2       0       0       0       0       0       0       0       0
  5569 ;;Total ram usage:        2 bytes
  5570 ;; Hardware stack levels used:    1
  5571 ;; Hardware stack levels required when called:    3
  5572 ;; This function calls:
  5573 ;;		_BusyXLCD
  5574 ;;		_WriteDataXLCD
  5575 ;; This function is called by:
  5576 ;;		_main
  5577 ;; This function uses a non-reentrant model
  5578 ;;
  5579                           
  5580                           	psect	text19
  5581  0061EE                     __ptext19:
  5582                           	opt stack 0
  5583  0061EE                     _putrsXLCD:
  5584                           	opt stack 27
  5585                           
  5586                           ;LCD_libreria.c: 147: while(*buffer)
  5587                           
  5588                           ;incstack = 0
  5589  0061EE  D019               	goto	l154
  5590  0061F0                     
  5591                           ;LCD_libreria.c: 148: {
  5592                           ;LCD_libreria.c: 149: while(BusyXLCD());
  5593  0061F0  EC4E  F030         	call	_BusyXLCD	;wreg free
  5594  0061F4  0900               	iorlw	0
  5595  0061F6  A4D8               	btfss	status,2,c
  5596  0061F8  D7FB               	goto	l155
  5597                           
  5598                           ;LCD_libreria.c: 150: WriteDataXLCD(*buffer);
  5599  0061FA  C002  FFF6         	movff	putrsXLCD@buffer,tblptrl
  5600  0061FE  C003  FFF7         	movff	putrsXLCD@buffer+1,tblptrh
  5601  006202  6AF8               	clrf	tblptru,c
  5602  006204  0E07               	movlw	(high __ramtop+-1)
  5603  006206  64F7               	cpfsgt	tblptrh,c
  5604  006208  D003               	bra	u2667
  5605  00620A  0008               	tblrd		*
  5606  00620C  50F5               	movf	tablat,w,c
  5607  00620E  D005               	bra	u2660
  5608  006210                     u2667:
  5609  006210  CFF6 FFE9          	movff	tblptrl,fsr0l
  5610  006214  CFF7 FFEA          	movff	tblptrh,fsr0h
  5611  006218  50EF               	movf	indf0,w,c
  5612  00621A                     u2660:
  5613  00621A  ECAA  F030         	call	_WriteDataXLCD
  5614                           
  5615                           ;LCD_libreria.c: 151: buffer++;
  5616  00621E  4A02               	infsnz	putrsXLCD@buffer,f,c
  5617  006220  2A03               	incf	putrsXLCD@buffer+1,f,c
  5618  006222                     l154:
  5619  006222  C002  FFF6         	movff	putrsXLCD@buffer,tblptrl
  5620  006226  C003  FFF7         	movff	putrsXLCD@buffer+1,tblptrh
  5621  00622A  6AF8               	clrf	tblptru,c
  5622  00622C  0E07               	movlw	(high __ramtop+-1)
  5623  00622E  64F7               	cpfsgt	tblptrh,c
  5624  006230  D003               	bra	u2677
  5625  006232  0008               	tblrd		*
  5626  006234  50F5               	movf	tablat,w,c
  5627  006236  D005               	bra	u2670
  5628  006238                     u2677:
  5629  006238  CFF6 FFE9          	movff	tblptrl,fsr0l
  5630  00623C  CFF7 FFEA          	movff	tblptrh,fsr0h
  5631  006240  50EF               	movf	indf0,w,c
  5632  006242                     u2670:
  5633  006242  0900               	iorlw	0
  5634  006244  B4D8               	btfsc	status,2,c
  5635  006246  0012               	return	
  5636  006248  D7D3               	goto	l155
  5637  00624A                     __end_of_putrsXLCD:
  5638                           	opt stack 0
  5639                           tblptru	equ	0xFF8
  5640                           tblptrh	equ	0xFF7
  5641                           tblptrl	equ	0xFF6
  5642                           tablat	equ	0xFF5
  5643                           prodh	equ	0xFF4
  5644                           prodl	equ	0xFF3
  5645                           indf0	equ	0xFEF
  5646                           postinc0	equ	0xFEE
  5647                           fsr0h	equ	0xFEA
  5648                           fsr0l	equ	0xFE9
  5649                           wreg	equ	0xFE8
  5650                           indf2	equ	0xFDF
  5651                           postinc2	equ	0xFDE
  5652                           postdec2	equ	0xFDD
  5653                           fsr2h	equ	0xFDA
  5654                           fsr2l	equ	0xFD9
  5655                           status	equ	0xFD8
  5656                           
  5657 ;; *************** function _WriteDataXLCD *****************
  5658 ;; Defined at:
  5659 ;;		line 402 in file "LCD_libreria.c"
  5660 ;; Parameters:    Size  Location     Type
  5661 ;;  data            1    wreg     unsigned char 
  5662 ;; Auto vars:     Size  Location     Type
  5663 ;;  data            1    0[COMRAM] unsigned char 
  5664 ;; Return value:  Size  Location     Type
  5665 ;;                  1    wreg      void 
  5666 ;; Registers used:
  5667 ;;		wreg, status,2, status,0, cstack
  5668 ;; Tracked objects:
  5669 ;;		On entry : 0/0
  5670 ;;		On exit  : 0/0
  5671 ;;		Unchanged: 0/0
  5672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5673 ;;      Params:         0       0       0       0       0       0       0       0       0
  5674 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5675 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5676 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5677 ;;Total ram usage:        1 bytes
  5678 ;; Hardware stack levels used:    1
  5679 ;; Hardware stack levels required when called:    2
  5680 ;; This function calls:
  5681 ;;		_BusyXLCD
  5682 ;;		_DelayFor18TCY
  5683 ;; This function is called by:
  5684 ;;		_putrsXLCD
  5685 ;;		_LCD_WriteChr_CGRAM
  5686 ;;		_putsXLCD
  5687 ;; This function uses a non-reentrant model
  5688 ;;
  5689                           
  5690                           	psect	text20
  5691  006154                     __ptext20:
  5692                           	opt stack 0
  5693  006154                     _WriteDataXLCD:
  5694                           	opt stack 27
  5695                           
  5696                           ;incstack = 0
  5697                           ;WriteDataXLCD@data stored from wreg
  5698  006154  6E01               	movwf	WriteDataXLCD@data,c
  5699  006156                     
  5700                           ;LCD_libreria.c: 404: while(BusyXLCD());
  5701  006156  EC4E  F030         	call	_BusyXLCD	;wreg free
  5702  00615A  0900               	iorlw	0
  5703  00615C  A4D8               	btfss	status,2,c
  5704  00615E  D7FB               	goto	l2608
  5705                           
  5706                           ;LCD_libreria.c: 422: TRISD &= 0xf0;
  5707  006160  0EF0               	movlw	240
  5708  006162  1695               	andwf	3989,f,c	;volatile
  5709                           
  5710                           ;LCD_libreria.c: 423: PORTD &= 0xf0;
  5711  006164  0EF0               	movlw	240
  5712  006166  1683               	andwf	3971,f,c	;volatile
  5713                           
  5714                           ;LCD_libreria.c: 424: PORTD |= ((data>>4)&0x0f);
  5715  006168  3801               	swapf	WriteDataXLCD@data,w,c
  5716  00616A  0B0F               	andlw	15
  5717  00616C  0B0F               	andlw	15
  5718  00616E  1283               	iorwf	3971,f,c	;volatile
  5719                           
  5720                           ;LCD_libreria.c: 426: LATDbits.LATD5 = 1;
  5721  006170  8A8C               	bsf	3980,5,c	;volatile
  5722                           
  5723                           ;LCD_libreria.c: 427: LATDbits.LATD6 = 0;
  5724  006172  9C8C               	bcf	3980,6,c	;volatile
  5725                           
  5726                           ;LCD_libreria.c: 428: DelayFor18TCY();
  5727  006174  ECA0  F02F         	call	_DelayFor18TCY	;wreg free
  5728                           
  5729                           ;LCD_libreria.c: 429: LATDbits.LATD4 = 1;
  5730  006178  888C               	bsf	3980,4,c	;volatile
  5731                           
  5732                           ;LCD_libreria.c: 430: DelayFor18TCY();
  5733  00617A  ECA0  F02F         	call	_DelayFor18TCY	;wreg free
  5734                           
  5735                           ;LCD_libreria.c: 431: LATDbits.LATD4 = 0;
  5736  00617E  988C               	bcf	3980,4,c	;volatile
  5737                           
  5738                           ;LCD_libreria.c: 436: PORTD &= 0xf0;
  5739  006180  0EF0               	movlw	240
  5740  006182  1683               	andwf	3971,f,c	;volatile
  5741                           
  5742                           ;LCD_libreria.c: 437: PORTD |= (data&0x0f);
  5743  006184  5001               	movf	WriteDataXLCD@data,w,c
  5744  006186  0B0F               	andlw	15
  5745  006188  1283               	iorwf	3971,f,c	;volatile
  5746                           
  5747                           ;LCD_libreria.c: 439: DelayFor18TCY();
  5748  00618A  ECA0  F02F         	call	_DelayFor18TCY	;wreg free
  5749                           
  5750                           ;LCD_libreria.c: 440: LATDbits.LATD4 = 1;
  5751  00618E  888C               	bsf	3980,4,c	;volatile
  5752                           
  5753                           ;LCD_libreria.c: 441: DelayFor18TCY();
  5754  006190  ECA0  F02F         	call	_DelayFor18TCY	;wreg free
  5755                           
  5756                           ;LCD_libreria.c: 442: LATDbits.LATD4 = 0;
  5757  006194  988C               	bcf	3980,4,c	;volatile
  5758                           
  5759                           ;LCD_libreria.c: 446: TRISD |= 0x0f;
  5760  006196  0E0F               	movlw	15
  5761  006198  1295               	iorwf	3989,f,c	;volatile
  5762  00619A  0012               	return	
  5763  00619C                     __end_of_WriteDataXLCD:
  5764                           	opt stack 0
  5765                           tblptru	equ	0xFF8
  5766                           tblptrh	equ	0xFF7
  5767                           tblptrl	equ	0xFF6
  5768                           tablat	equ	0xFF5
  5769                           prodh	equ	0xFF4
  5770                           prodl	equ	0xFF3
  5771                           indf0	equ	0xFEF
  5772                           postinc0	equ	0xFEE
  5773                           fsr0h	equ	0xFEA
  5774                           fsr0l	equ	0xFE9
  5775                           wreg	equ	0xFE8
  5776                           indf2	equ	0xFDF
  5777                           postinc2	equ	0xFDE
  5778                           postdec2	equ	0xFDD
  5779                           fsr2h	equ	0xFDA
  5780                           fsr2l	equ	0xFD9
  5781                           status	equ	0xFD8
  5782                           
  5783 ;; *************** function ___lwtoft *****************
  5784 ;; Defined at:
  5785 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwtoft.c"
  5786 ;; Parameters:    Size  Location     Type
  5787 ;;  c               2    8[COMRAM] unsigned int 
  5788 ;; Auto vars:     Size  Location     Type
  5789 ;;		None
  5790 ;; Return value:  Size  Location     Type
  5791 ;;                  3    8[COMRAM] float 
  5792 ;; Registers used:
  5793 ;;		wreg, status,2, status,0, cstack
  5794 ;; Tracked objects:
  5795 ;;		On entry : 0/0
  5796 ;;		On exit  : 0/0
  5797 ;;		Unchanged: 0/0
  5798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5799 ;;      Params:         3       0       0       0       0       0       0       0       0
  5800 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5801 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5802 ;;      Totals:         3       0       0       0       0       0       0       0       0
  5803 ;;Total ram usage:        3 bytes
  5804 ;; Hardware stack levels used:    1
  5805 ;; Hardware stack levels required when called:    1
  5806 ;; This function calls:
  5807 ;;		___ftpack
  5808 ;; This function is called by:
  5809 ;;		_main
  5810 ;; This function uses a non-reentrant model
  5811 ;;
  5812                           
  5813                           	psect	text21
  5814  005FFC                     __ptext21:
  5815                           	opt stack 0
  5816  005FFC                     ___lwtoft:
  5817                           	opt stack 29
  5818                           
  5819                           ;incstack = 0
  5820  005FFC  C009  F001         	movff	___lwtoft@c,___ftpack@arg
  5821  006000  C00A  F002         	movff	___lwtoft@c+1,___ftpack@arg+1
  5822  006004  6A03               	clrf	___ftpack@arg+2,c
  5823  006006  0E8E               	movlw	142
  5824  006008  6E04               	movwf	___ftpack@exp,c
  5825  00600A  0E00               	movlw	0
  5826  00600C  6E05               	movwf	___ftpack@sign,c
  5827  00600E  ECDB  F032         	call	___ftpack	;wreg free
  5828  006012  C001  F009         	movff	?___ftpack,?___lwtoft
  5829  006016  C002  F00A         	movff	?___ftpack+1,?___lwtoft+1
  5830  00601A  C003  F00B         	movff	?___ftpack+2,?___lwtoft+2
  5831  00601E  0012               	return	
  5832  006020                     __end_of___lwtoft:
  5833                           	opt stack 0
  5834                           tblptru	equ	0xFF8
  5835                           tblptrh	equ	0xFF7
  5836                           tblptrl	equ	0xFF6
  5837                           tablat	equ	0xFF5
  5838                           prodh	equ	0xFF4
  5839                           prodl	equ	0xFF3
  5840                           indf0	equ	0xFEF
  5841                           postinc0	equ	0xFEE
  5842                           fsr0h	equ	0xFEA
  5843                           fsr0l	equ	0xFE9
  5844                           wreg	equ	0xFE8
  5845                           indf2	equ	0xFDF
  5846                           postinc2	equ	0xFDE
  5847                           postdec2	equ	0xFDD
  5848                           fsr2h	equ	0xFDA
  5849                           fsr2l	equ	0xFD9
  5850                           status	equ	0xFD8
  5851                           
  5852 ;; *************** function ___ftdiv *****************
  5853 ;; Defined at:
  5854 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
  5855 ;; Parameters:    Size  Location     Type
  5856 ;;  f1              3   35[COMRAM] float 
  5857 ;;  f2              3   38[COMRAM] float 
  5858 ;; Auto vars:     Size  Location     Type
  5859 ;;  f3              3   45[COMRAM] float 
  5860 ;;  sign            1   49[COMRAM] unsigned char 
  5861 ;;  exp             1   48[COMRAM] unsigned char 
  5862 ;;  cntr            1   44[COMRAM] unsigned char 
  5863 ;; Return value:  Size  Location     Type
  5864 ;;                  3   35[COMRAM] float 
  5865 ;; Registers used:
  5866 ;;		wreg, status,2, status,0, cstack
  5867 ;; Tracked objects:
  5868 ;;		On entry : 0/0
  5869 ;;		On exit  : 0/0
  5870 ;;		Unchanged: 0/0
  5871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5872 ;;      Params:         6       0       0       0       0       0       0       0       0
  5873 ;;      Locals:         6       0       0       0       0       0       0       0       0
  5874 ;;      Temps:          3       0       0       0       0       0       0       0       0
  5875 ;;      Totals:        15       0       0       0       0       0       0       0       0
  5876 ;;Total ram usage:       15 bytes
  5877 ;; Hardware stack levels used:    1
  5878 ;; Hardware stack levels required when called:    1
  5879 ;; This function calls:
  5880 ;;		___ftpack
  5881 ;; This function is called by:
  5882 ;;		_main
  5883 ;; This function uses a non-reentrant model
  5884 ;;
  5885                           
  5886                           	psect	text22
  5887  006664                     __ptext22:
  5888                           	opt stack 0
  5889  006664                     ___ftdiv:
  5890                           	opt stack 29
  5891                           
  5892                           ;incstack = 0
  5893  006664  C026  F02A         	movff	___ftdiv@f1+2,??___ftdiv
  5894  006668  6A2B               	clrf	(??___ftdiv+1)& (0+255),c
  5895  00666A  6A2C               	clrf	(??___ftdiv+2)& (0+255),c
  5896  00666C  3425               	rlcf	___ftdiv@f1+1,w,c
  5897  00666E  362A               	rlcf	??___ftdiv& (0+255),f,c
  5898  006670  E301               	bnc	u3041
  5899  006672  802B               	bsf	(??___ftdiv+1)& (0+255),0,c
  5900  006674                     u3041:
  5901  006674  502A               	movf	??___ftdiv,w,c
  5902  006676  6E31               	movwf	___ftdiv@exp,c
  5903  006678  5031               	movf	___ftdiv@exp,w,c
  5904  00667A  A4D8               	btfss	status,2,c
  5905  00667C  D007               	goto	l587
  5906  00667E  0E00               	movlw	0
  5907  006680  6E24               	movwf	?___ftdiv,c
  5908  006682  0E00               	movlw	0
  5909  006684  6E25               	movwf	?___ftdiv+1,c
  5910  006686  0E00               	movlw	0
  5911  006688  6E26               	movwf	?___ftdiv+2,c
  5912  00668A  0012               	return	
  5913  00668C                     l587:
  5914  00668C  C029  F02A         	movff	___ftdiv@f2+2,??___ftdiv
  5915  006690  6A2B               	clrf	(??___ftdiv+1)& (0+255),c
  5916  006692  6A2C               	clrf	(??___ftdiv+2)& (0+255),c
  5917  006694  3428               	rlcf	___ftdiv@f2+1,w,c
  5918  006696  362A               	rlcf	??___ftdiv& (0+255),f,c
  5919  006698  E301               	bnc	u3061
  5920  00669A  802B               	bsf	(??___ftdiv+1)& (0+255),0,c
  5921  00669C                     u3061:
  5922  00669C  502A               	movf	??___ftdiv,w,c
  5923  00669E  6E32               	movwf	___ftdiv@sign,c
  5924  0066A0  5032               	movf	___ftdiv@sign,w,c
  5925  0066A2  A4D8               	btfss	status,2,c
  5926  0066A4  D007               	goto	l589
  5927  0066A6  0E00               	movlw	0
  5928  0066A8  6E24               	movwf	?___ftdiv,c
  5929  0066AA  0E00               	movlw	0
  5930  0066AC  6E25               	movwf	?___ftdiv+1,c
  5931  0066AE  0E00               	movlw	0
  5932  0066B0  6E26               	movwf	?___ftdiv+2,c
  5933  0066B2  0012               	return	
  5934  0066B4                     l589:
  5935  0066B4  0E00               	movlw	0
  5936  0066B6  6E2E               	movwf	___ftdiv@f3,c
  5937  0066B8  0E00               	movlw	0
  5938  0066BA  6E2F               	movwf	___ftdiv@f3+1,c
  5939  0066BC  0E00               	movlw	0
  5940  0066BE  6E30               	movwf	___ftdiv@f3+2,c
  5941  0066C0  5032               	movf	___ftdiv@sign,w,c
  5942  0066C2  0F89               	addlw	137
  5943  0066C4  5E31               	subwf	___ftdiv@exp,f,c
  5944  0066C6  C026  F032         	movff	___ftdiv@f1+2,___ftdiv@sign
  5945  0066CA  5029               	movf	___ftdiv@f2+2,w,c
  5946  0066CC  1A32               	xorwf	___ftdiv@sign,f,c
  5947  0066CE  0E80               	movlw	128
  5948  0066D0  1632               	andwf	___ftdiv@sign,f,c
  5949  0066D2  8E25               	bsf	___ftdiv@f1+1,7,c
  5950  0066D4  0EFF               	movlw	255
  5951  0066D6  1624               	andwf	___ftdiv@f1,f,c
  5952  0066D8  0EFF               	movlw	255
  5953  0066DA  1625               	andwf	___ftdiv@f1+1,f,c
  5954  0066DC  0E00               	movlw	0
  5955  0066DE  1626               	andwf	___ftdiv@f1+2,f,c
  5956  0066E0  8E28               	bsf	___ftdiv@f2+1,7,c
  5957  0066E2  0EFF               	movlw	255
  5958  0066E4  1627               	andwf	___ftdiv@f2,f,c
  5959  0066E6  0EFF               	movlw	255
  5960  0066E8  1628               	andwf	___ftdiv@f2+1,f,c
  5961  0066EA  0E00               	movlw	0
  5962  0066EC  1629               	andwf	___ftdiv@f2+2,f,c
  5963  0066EE  0E18               	movlw	24
  5964  0066F0  6E2D               	movwf	___ftdiv@cntr,c
  5965  0066F2  90D8               	bcf	status,0,c
  5966  0066F4  362E               	rlcf	___ftdiv@f3,f,c
  5967  0066F6  362F               	rlcf	___ftdiv@f3+1,f,c
  5968  0066F8  3630               	rlcf	___ftdiv@f3+2,f,c
  5969  0066FA  5027               	movf	___ftdiv@f2,w,c
  5970  0066FC  5C24               	subwf	___ftdiv@f1,w,c
  5971  0066FE  5028               	movf	___ftdiv@f2+1,w,c
  5972  006700  5825               	subwfb	___ftdiv@f1+1,w,c
  5973  006702  5029               	movf	___ftdiv@f2+2,w,c
  5974  006704  5826               	subwfb	___ftdiv@f1+2,w,c
  5975  006706  A0D8               	btfss	status,0,c
  5976  006708  D007               	goto	l591
  5977  00670A  5027               	movf	___ftdiv@f2,w,c
  5978  00670C  5E24               	subwf	___ftdiv@f1,f,c
  5979  00670E  5028               	movf	___ftdiv@f2+1,w,c
  5980  006710  5A25               	subwfb	___ftdiv@f1+1,f,c
  5981  006712  5029               	movf	___ftdiv@f2+2,w,c
  5982  006714  5A26               	subwfb	___ftdiv@f1+2,f,c
  5983  006716  802E               	bsf	___ftdiv@f3,0,c
  5984  006718                     l591:
  5985  006718  90D8               	bcf	status,0,c
  5986  00671A  3624               	rlcf	___ftdiv@f1,f,c
  5987  00671C  3625               	rlcf	___ftdiv@f1+1,f,c
  5988  00671E  3626               	rlcf	___ftdiv@f1+2,f,c
  5989  006720  2E2D               	decfsz	___ftdiv@cntr,f,c
  5990  006722  D7E7               	goto	l590
  5991  006724  C02E  F001         	movff	___ftdiv@f3,___ftpack@arg
  5992  006728  C02F  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  5993  00672C  C030  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  5994  006730  C031  F004         	movff	___ftdiv@exp,___ftpack@exp
  5995  006734  C032  F005         	movff	___ftdiv@sign,___ftpack@sign
  5996  006738  ECDB  F032         	call	___ftpack	;wreg free
  5997  00673C  C001  F024         	movff	?___ftpack,?___ftdiv
  5998  006740  C002  F025         	movff	?___ftpack+1,?___ftdiv+1
  5999  006744  C003  F026         	movff	?___ftpack+2,?___ftdiv+2
  6000  006748  0012               	return	
  6001  00674A                     __end_of___ftdiv:
  6002                           	opt stack 0
  6003                           tblptru	equ	0xFF8
  6004                           tblptrh	equ	0xFF7
  6005                           tblptrl	equ	0xFF6
  6006                           tablat	equ	0xFF5
  6007                           prodh	equ	0xFF4
  6008                           prodl	equ	0xFF3
  6009                           indf0	equ	0xFEF
  6010                           postinc0	equ	0xFEE
  6011                           fsr0h	equ	0xFEA
  6012                           fsr0l	equ	0xFE9
  6013                           wreg	equ	0xFE8
  6014                           indf2	equ	0xFDF
  6015                           postinc2	equ	0xFDE
  6016                           postdec2	equ	0xFDD
  6017                           fsr2h	equ	0xFDA
  6018                           fsr2l	equ	0xFD9
  6019                           status	equ	0xFD8
  6020                           
  6021 ;; *************** function ___ftpack *****************
  6022 ;; Defined at:
  6023 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
  6024 ;; Parameters:    Size  Location     Type
  6025 ;;  arg             3    0[COMRAM] unsigned um
  6026 ;;  exp             1    3[COMRAM] unsigned char 
  6027 ;;  sign            1    4[COMRAM] unsigned char 
  6028 ;; Auto vars:     Size  Location     Type
  6029 ;;		None
  6030 ;; Return value:  Size  Location     Type
  6031 ;;                  3    0[COMRAM] float 
  6032 ;; Registers used:
  6033 ;;		wreg, status,2, status,0
  6034 ;; Tracked objects:
  6035 ;;		On entry : 0/0
  6036 ;;		On exit  : 0/0
  6037 ;;		Unchanged: 0/0
  6038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6039 ;;      Params:         5       0       0       0       0       0       0       0       0
  6040 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6041 ;;      Temps:          3       0       0       0       0       0       0       0       0
  6042 ;;      Totals:         8       0       0       0       0       0       0       0       0
  6043 ;;Total ram usage:        8 bytes
  6044 ;; Hardware stack levels used:    1
  6045 ;; This function calls:
  6046 ;;		Nothing
  6047 ;; This function is called by:
  6048 ;;		___ftadd
  6049 ;;		___ftdiv
  6050 ;;		___ftmul
  6051 ;;		___lltoft
  6052 ;;		___lwtoft
  6053 ;; This function uses a non-reentrant model
  6054 ;;
  6055                           
  6056                           	psect	text23
  6057  0065B6                     __ptext23:
  6058                           	opt stack 0
  6059  0065B6                     ___ftpack:
  6060                           	opt stack 27
  6061                           
  6062                           ;incstack = 0
  6063  0065B6  5004               	movf	___ftpack@exp,w,c
  6064  0065B8  B4D8               	btfsc	status,2,c
  6065  0065BA  D005               	goto	u1620
  6066  0065BC  5001               	movf	___ftpack@arg,w,c
  6067  0065BE  1002               	iorwf	___ftpack@arg+1,w,c
  6068  0065C0  1003               	iorwf	___ftpack@arg+2,w,c
  6069  0065C2  A4D8               	btfss	status,2,c
  6070  0065C4  D00C               	goto	l523
  6071  0065C6                     u1620:
  6072  0065C6  0E00               	movlw	0
  6073  0065C8  6E01               	movwf	?___ftpack,c
  6074  0065CA  0E00               	movlw	0
  6075  0065CC  6E02               	movwf	?___ftpack+1,c
  6076  0065CE  0E00               	movlw	0
  6077  0065D0  6E03               	movwf	?___ftpack+2,c
  6078  0065D2  0012               	return	
  6079  0065D4  2A04               	incf	___ftpack@exp,f,c
  6080  0065D6  90D8               	bcf	status,0,c
  6081  0065D8  3203               	rrcf	___ftpack@arg+2,f,c
  6082  0065DA  3202               	rrcf	___ftpack@arg+1,f,c
  6083  0065DC  3201               	rrcf	___ftpack@arg,f,c
  6084  0065DE                     l523:
  6085  0065DE  0E00               	movlw	0
  6086  0065E0  1401               	andwf	___ftpack@arg,w,c
  6087  0065E2  6E06               	movwf	??___ftpack& (0+255),c
  6088  0065E4  0E00               	movlw	0
  6089  0065E6  1402               	andwf	___ftpack@arg+1,w,c
  6090  0065E8  6E07               	movwf	(??___ftpack+1)& (0+255),c
  6091  0065EA  0EFE               	movlw	254
  6092  0065EC  1403               	andwf	___ftpack@arg+2,w,c
  6093  0065EE  6E08               	movwf	(??___ftpack+2)& (0+255),c
  6094  0065F0  5006               	movf	??___ftpack,w,c
  6095  0065F2  1007               	iorwf	??___ftpack+1,w,c
  6096  0065F4  1008               	iorwf	??___ftpack+2,w,c
  6097  0065F6  B4D8               	btfsc	status,2,c
  6098  0065F8  D00C               	goto	l526
  6099  0065FA  D7EC               	goto	l524
  6100  0065FC  2A04               	incf	___ftpack@exp,f,c
  6101  0065FE  0E01               	movlw	1
  6102  006600  2601               	addwf	___ftpack@arg,f,c
  6103  006602  0E00               	movlw	0
  6104  006604  2202               	addwfc	___ftpack@arg+1,f,c
  6105  006606  0E00               	movlw	0
  6106  006608  2203               	addwfc	___ftpack@arg+2,f,c
  6107  00660A  90D8               	bcf	status,0,c
  6108  00660C  3203               	rrcf	___ftpack@arg+2,f,c
  6109  00660E  3202               	rrcf	___ftpack@arg+1,f,c
  6110  006610  3201               	rrcf	___ftpack@arg,f,c
  6111  006612                     l526:
  6112  006612  0E00               	movlw	0
  6113  006614  1401               	andwf	___ftpack@arg,w,c
  6114  006616  6E06               	movwf	??___ftpack& (0+255),c
  6115  006618  0E00               	movlw	0
  6116  00661A  1402               	andwf	___ftpack@arg+1,w,c
  6117  00661C  6E07               	movwf	(??___ftpack+1)& (0+255),c
  6118  00661E  0EFF               	movlw	255
  6119  006620  1403               	andwf	___ftpack@arg+2,w,c
  6120  006622  6E08               	movwf	(??___ftpack+2)& (0+255),c
  6121  006624  5006               	movf	??___ftpack,w,c
  6122  006626  1007               	iorwf	??___ftpack+1,w,c
  6123  006628  1008               	iorwf	??___ftpack+2,w,c
  6124  00662A  B4D8               	btfsc	status,2,c
  6125  00662C  D006               	goto	l529
  6126  00662E  D7E6               	goto	l527
  6127  006630  0604               	decf	___ftpack@exp,f,c
  6128  006632  90D8               	bcf	status,0,c
  6129  006634  3601               	rlcf	___ftpack@arg,f,c
  6130  006636  3602               	rlcf	___ftpack@arg+1,f,c
  6131  006638  3603               	rlcf	___ftpack@arg+2,f,c
  6132  00663A                     l529:
  6133  00663A  BE02               	btfsc	___ftpack@arg+1,7,c
  6134  00663C  D003               	goto	u1660
  6135  00663E  0E02               	movlw	2
  6136  006640  6004               	cpfslt	___ftpack@exp,c
  6137  006642  D7F6               	goto	l530
  6138  006644                     u1660:
  6139  006644  A004               	btfss	___ftpack@exp,0,c
  6140  006646  9E02               	bcf	___ftpack@arg+1,7,c
  6141  006648  90D8               	bcf	status,0,c
  6142  00664A  3204               	rrcf	___ftpack@exp,f,c
  6143  00664C  5004               	movf	___ftpack@exp,w,c
  6144  00664E  1203               	iorwf	___ftpack@arg+2,f,c
  6145  006650  5005               	movf	___ftpack@sign,w,c
  6146  006652  A4D8               	btfss	status,2,c
  6147  006654  8E03               	bsf	___ftpack@arg+2,7,c
  6148  006656  C001  F001         	movff	___ftpack@arg,?___ftpack
  6149  00665A  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  6150  00665E  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  6151  006662  0012               	return	
  6152  006664                     __end_of___ftpack:
  6153                           	opt stack 0
  6154                           tblptru	equ	0xFF8
  6155                           tblptrh	equ	0xFF7
  6156                           tblptrl	equ	0xFF6
  6157                           tablat	equ	0xFF5
  6158                           prodh	equ	0xFF4
  6159                           prodl	equ	0xFF3
  6160                           indf0	equ	0xFEF
  6161                           postinc0	equ	0xFEE
  6162                           fsr0h	equ	0xFEA
  6163                           fsr0l	equ	0xFE9
  6164                           wreg	equ	0xFE8
  6165                           indf2	equ	0xFDF
  6166                           postinc2	equ	0xFDE
  6167                           postdec2	equ	0xFDD
  6168                           fsr2h	equ	0xFDA
  6169                           fsr2l	equ	0xFD9
  6170                           status	equ	0xFD8
  6171                           
  6172 ;; *************** function _PORT_Init *****************
  6173 ;; Defined at:
  6174 ;;		line 33 in file "Programa_principal.c"
  6175 ;; Parameters:    Size  Location     Type
  6176 ;;		None
  6177 ;; Auto vars:     Size  Location     Type
  6178 ;;		None
  6179 ;; Return value:  Size  Location     Type
  6180 ;;                  1    wreg      void 
  6181 ;; Registers used:
  6182 ;;		wreg, status,2
  6183 ;; Tracked objects:
  6184 ;;		On entry : 0/0
  6185 ;;		On exit  : 0/0
  6186 ;;		Unchanged: 0/0
  6187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6188 ;;      Params:         0       0       0       0       0       0       0       0       0
  6189 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6190 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6191 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6192 ;;Total ram usage:        0 bytes
  6193 ;; Hardware stack levels used:    1
  6194 ;; This function calls:
  6195 ;;		Nothing
  6196 ;; This function is called by:
  6197 ;;		_main
  6198 ;; This function uses a non-reentrant model
  6199 ;;
  6200                           
  6201                           	psect	text24
  6202  005F22                     __ptext24:
  6203                           	opt stack 0
  6204  005F22                     _PORT_Init:
  6205                           	opt stack 30
  6206                           
  6207                           ;Programa_principal.c: 34: TRISBbits.RB0 = 1;
  6208                           
  6209                           ;incstack = 0
  6210  005F22  8093               	bsf	3987,0,c	;volatile
  6211                           
  6212                           ;Programa_principal.c: 35: TRISBbits.RB1 = 1;
  6213  005F24  8293               	bsf	3987,1,c	;volatile
  6214                           
  6215                           ;Programa_principal.c: 36: TRISBbits.RB2 = 1;
  6216  005F26  8493               	bsf	3987,2,c	;volatile
  6217                           
  6218                           ;Programa_principal.c: 37: INTCON2bits.RBPU = 0;
  6219  005F28  9EF1               	bcf	intcon2,7,c	;volatile
  6220                           
  6221                           ;Programa_principal.c: 38: TRISA = 1;
  6222  005F2A  0E01               	movlw	1
  6223  005F2C  6E92               	movwf	3986,c	;volatile
  6224  005F2E  0012               	return		;funcret
  6225  005F30                     __end_of_PORT_Init:
  6226                           	opt stack 0
  6227                           tblptru	equ	0xFF8
  6228                           tblptrh	equ	0xFF7
  6229                           tblptrl	equ	0xFF6
  6230                           tablat	equ	0xFF5
  6231                           prodh	equ	0xFF4
  6232                           prodl	equ	0xFF3
  6233                           intcon2	equ	0xFF1
  6234                           indf0	equ	0xFEF
  6235                           postinc0	equ	0xFEE
  6236                           fsr0h	equ	0xFEA
  6237                           fsr0l	equ	0xFE9
  6238                           wreg	equ	0xFE8
  6239                           indf2	equ	0xFDF
  6240                           postinc2	equ	0xFDE
  6241                           postdec2	equ	0xFDD
  6242                           fsr2h	equ	0xFDA
  6243                           fsr2l	equ	0xFD9
  6244                           status	equ	0xFD8
  6245                           
  6246 ;; *************** function _LCD_gotoXY *****************
  6247 ;; Defined at:
  6248 ;;		line 62 in file "LCD_libreria.c"
  6249 ;; Parameters:    Size  Location     Type
  6250 ;;  x               2    1[COMRAM] int 
  6251 ;;  y               2    3[COMRAM] int 
  6252 ;; Auto vars:     Size  Location     Type
  6253 ;;		None
  6254 ;; Return value:  Size  Location     Type
  6255 ;;                  1    wreg      void 
  6256 ;; Registers used:
  6257 ;;		wreg, status,2, status,0, cstack
  6258 ;; Tracked objects:
  6259 ;;		On entry : 0/0
  6260 ;;		On exit  : 0/0
  6261 ;;		Unchanged: 0/0
  6262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6263 ;;      Params:         4       0       0       0       0       0       0       0       0
  6264 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6265 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6266 ;;      Totals:         4       0       0       0       0       0       0       0       0
  6267 ;;Total ram usage:        4 bytes
  6268 ;; Hardware stack levels used:    1
  6269 ;; Hardware stack levels required when called:    2
  6270 ;; This function calls:
  6271 ;;		_WriteCmdXLCD
  6272 ;; This function is called by:
  6273 ;;		_main
  6274 ;; This function uses a non-reentrant model
  6275 ;;
  6276                           
  6277                           	psect	text25
  6278  005FB6                     __ptext25:
  6279                           	opt stack 0
  6280  005FB6                     _LCD_gotoXY:
  6281                           	opt stack 28
  6282                           
  6283                           ;LCD_libreria.c: 64: if ( x>0 ){WriteCmdXLCD(0b11000000+y);}
  6284                           
  6285                           ;incstack = 0
  6286  005FB6  BE03               	btfsc	LCD_gotoXY@x+1,7,c
  6287  005FB8  D00A               	goto	l120
  6288  005FBA  5003               	movf	LCD_gotoXY@x+1,w,c
  6289  005FBC  E103               	bnz	u2640
  6290  005FBE  0402               	decf	LCD_gotoXY@x,w,c
  6291  005FC0  A0D8               	btfss	status,0,c
  6292  005FC2  D005               	goto	l120
  6293  005FC4                     u2640:
  6294  005FC4  5004               	movf	LCD_gotoXY@y,w,c
  6295  005FC6  0FC0               	addlw	192
  6296  005FC8  EC6B  F030         	call	_WriteCmdXLCD
  6297  005FCC  0012               	return	
  6298  005FCE                     l120:
  6299                           
  6300                           ;LCD_libreria.c: 65: else {WriteCmdXLCD(0b10000000+y);}
  6301  005FCE  5004               	movf	LCD_gotoXY@y,w,c
  6302  005FD0  0F80               	addlw	128
  6303  005FD2  EC6B  F030         	call	_WriteCmdXLCD
  6304  005FD6  0012               	return	
  6305  005FD8                     __end_of_LCD_gotoXY:
  6306                           	opt stack 0
  6307                           tblptru	equ	0xFF8
  6308                           tblptrh	equ	0xFF7
  6309                           tblptrl	equ	0xFF6
  6310                           tablat	equ	0xFF5
  6311                           prodh	equ	0xFF4
  6312                           prodl	equ	0xFF3
  6313                           intcon2	equ	0xFF1
  6314                           indf0	equ	0xFEF
  6315                           postinc0	equ	0xFEE
  6316                           fsr0h	equ	0xFEA
  6317                           fsr0l	equ	0xFE9
  6318                           wreg	equ	0xFE8
  6319                           indf2	equ	0xFDF
  6320                           postinc2	equ	0xFDE
  6321                           postdec2	equ	0xFDD
  6322                           fsr2h	equ	0xFDA
  6323                           fsr2l	equ	0xFD9
  6324                           status	equ	0xFD8
  6325                           
  6326 ;; *************** function _LCD_Init *****************
  6327 ;; Defined at:
  6328 ;;		line 26 in file "LCD_libreria.c"
  6329 ;; Parameters:    Size  Location     Type
  6330 ;;		None
  6331 ;; Auto vars:     Size  Location     Type
  6332 ;;		None
  6333 ;; Return value:  Size  Location     Type
  6334 ;;                  1    wreg      void 
  6335 ;; Registers used:
  6336 ;;		wreg, status,2, status,0, cstack
  6337 ;; Tracked objects:
  6338 ;;		On entry : 0/0
  6339 ;;		On exit  : 0/0
  6340 ;;		Unchanged: 0/0
  6341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6342 ;;      Params:         0       0       0       0       0       0       0       0       0
  6343 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6344 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6345 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6346 ;;Total ram usage:        0 bytes
  6347 ;; Hardware stack levels used:    1
  6348 ;; Hardware stack levels required when called:    3
  6349 ;; This function calls:
  6350 ;;		_BusyXLCD
  6351 ;;		_OpenXLCD
  6352 ;;		_WriteCmdXLCD
  6353 ;; This function is called by:
  6354 ;;		_main
  6355 ;; This function uses a non-reentrant model
  6356 ;;
  6357                           
  6358                           	psect	text26
  6359  005F5A                     __ptext26:
  6360                           	opt stack 0
  6361  005F5A                     _LCD_Init:
  6362                           	opt stack 27
  6363                           
  6364                           ;LCD_libreria.c: 27: OpenXLCD(0b00101100 & 0b00111000 );
  6365                           
  6366                           ;incstack = 0
  6367  005F5A  0E28               	movlw	40
  6368  005F5C  EC89  F032         	call	_OpenXLCD
  6369  005F60  EC4E  F030         	call	_BusyXLCD	;wreg free
  6370  005F64  0900               	iorlw	0
  6371  005F66  A4D8               	btfss	status,2,c
  6372  005F68  D7FB               	goto	l106
  6373                           
  6374                           ;LCD_libreria.c: 29: WriteCmdXLCD(0x06);
  6375  005F6A  0E06               	movlw	6
  6376  005F6C  EC6B  F030         	call	_WriteCmdXLCD
  6377                           
  6378                           ;LCD_libreria.c: 30: WriteCmdXLCD(0x0C);
  6379  005F70  0E0C               	movlw	12
  6380  005F72  EC6B  F030         	call	_WriteCmdXLCD
  6381  005F76  0012               	return		;funcret
  6382  005F78                     __end_of_LCD_Init:
  6383                           	opt stack 0
  6384                           tblptru	equ	0xFF8
  6385                           tblptrh	equ	0xFF7
  6386                           tblptrl	equ	0xFF6
  6387                           tablat	equ	0xFF5
  6388                           prodh	equ	0xFF4
  6389                           prodl	equ	0xFF3
  6390                           intcon2	equ	0xFF1
  6391                           indf0	equ	0xFEF
  6392                           postinc0	equ	0xFEE
  6393                           fsr0h	equ	0xFEA
  6394                           fsr0l	equ	0xFE9
  6395                           wreg	equ	0xFE8
  6396                           indf2	equ	0xFDF
  6397                           postinc2	equ	0xFDE
  6398                           postdec2	equ	0xFDD
  6399                           fsr2h	equ	0xFDA
  6400                           fsr2l	equ	0xFD9
  6401                           status	equ	0xFD8
  6402                           
  6403 ;; *************** function _OpenXLCD *****************
  6404 ;; Defined at:
  6405 ;;		line 81 in file "LCD_libreria.c"
  6406 ;; Parameters:    Size  Location     Type
  6407 ;;  lcdtype         1    wreg     unsigned char 
  6408 ;; Auto vars:     Size  Location     Type
  6409 ;;  lcdtype         1    4[COMRAM] unsigned char 
  6410 ;; Return value:  Size  Location     Type
  6411 ;;                  1    wreg      void 
  6412 ;; Registers used:
  6413 ;;		wreg, status,2, status,0, cstack
  6414 ;; Tracked objects:
  6415 ;;		On entry : 0/0
  6416 ;;		On exit  : 0/0
  6417 ;;		Unchanged: 0/0
  6418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6419 ;;      Params:         0       0       0       0       0       0       0       0       0
  6420 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6421 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6422 ;;      Totals:         1       0       0       0       0       0       0       0       0
  6423 ;;Total ram usage:        1 bytes
  6424 ;; Hardware stack levels used:    1
  6425 ;; Hardware stack levels required when called:    2
  6426 ;; This function calls:
  6427 ;;		_BusyXLCD
  6428 ;;		_DelayPORXLCD
  6429 ;;		_SetDDRamAddr
  6430 ;;		_WriteCmdXLCD
  6431 ;; This function is called by:
  6432 ;;		_LCD_Init
  6433 ;; This function uses a non-reentrant model
  6434 ;;
  6435                           
  6436                           	psect	text27
  6437  006512                     __ptext27:
  6438                           	opt stack 0
  6439  006512                     _OpenXLCD:
  6440                           	opt stack 27
  6441                           
  6442                           ;incstack = 0
  6443                           ;OpenXLCD@lcdtype stored from wreg
  6444  006512  6E05               	movwf	OpenXLCD@lcdtype,c
  6445                           
  6446                           ;LCD_libreria.c: 93: PORTD &= 0xf0;
  6447  006514  0EF0               	movlw	240
  6448  006516  1683               	andwf	3971,f,c	;volatile
  6449                           
  6450                           ;LCD_libreria.c: 94: TRISD &= 0xF0;
  6451  006518  0EF0               	movlw	240
  6452  00651A  1695               	andwf	3989,f,c	;volatile
  6453                           
  6454                           ;LCD_libreria.c: 97: TRISDbits.TRISD6 = 0;
  6455  00651C  9C95               	bcf	3989,6,c	;volatile
  6456                           
  6457                           ;LCD_libreria.c: 98: TRISDbits.TRISD5 = 0;
  6458  00651E  9A95               	bcf	3989,5,c	;volatile
  6459                           
  6460                           ;LCD_libreria.c: 99: TRISDbits.TRISD4 = 0;
  6461  006520  9895               	bcf	3989,4,c	;volatile
  6462                           
  6463                           ;LCD_libreria.c: 100: LATDbits.LATD6 = 0;
  6464  006522  9C8C               	bcf	3980,6,c	;volatile
  6465                           
  6466                           ;LCD_libreria.c: 101: LATDbits.LATD5 = 0;
  6467  006524  9A8C               	bcf	3980,5,c	;volatile
  6468                           
  6469                           ;LCD_libreria.c: 102: LATDbits.LATD4 = 0;
  6470  006526  988C               	bcf	3980,4,c	;volatile
  6471                           
  6472                           ;LCD_libreria.c: 105: DelayPORXLCD();
  6473  006528  EC98  F02F         	call	_DelayPORXLCD	;wreg free
  6474                           
  6475                           ;LCD_libreria.c: 107: WriteCmdXLCD(0x30);
  6476  00652C  0E30               	movlw	48
  6477  00652E  EC6B  F030         	call	_WriteCmdXLCD
  6478                           
  6479                           ;LCD_libreria.c: 108: _delay((unsigned long)((1)*(20000000L/4000000.0)));
  6480  006532  D000               	nop2		;2 cycle nop
  6481  006534  D000               	nop2		;2 cycle nop
  6482  006536  F000               	nop	
  6483                           
  6484                           ;LCD_libreria.c: 110: WriteCmdXLCD(0x30);
  6485  006538  0E30               	movlw	48
  6486  00653A  EC6B  F030         	call	_WriteCmdXLCD
  6487                           
  6488                           ;LCD_libreria.c: 111: _delay((unsigned long)((1)*(20000000L/4000000.0)));
  6489  00653E  D000               	nop2		;2 cycle nop
  6490  006540  D000               	nop2		;2 cycle nop
  6491  006542  F000               	nop	
  6492                           
  6493                           ;LCD_libreria.c: 114: WriteCmdXLCD(0x32);
  6494  006544  0E32               	movlw	50
  6495  006546  EC6B  F030         	call	_WriteCmdXLCD
  6496  00654A  EC4E  F030         	call	_BusyXLCD	;wreg free
  6497  00654E  0900               	iorlw	0
  6498  006550  A4D8               	btfss	status,2,c
  6499  006552  D7FB               	goto	l131
  6500  006554                     u2100:
  6501                           
  6502                           ;LCD_libreria.c: 120: while(BusyXLCD());
  6503  006554  EC4E  F030         	call	_BusyXLCD	;wreg free
  6504  006558  0900               	iorlw	0
  6505  00655A  A4D8               	btfss	status,2,c
  6506  00655C  D7FB               	goto	u2100
  6507                           
  6508                           ;LCD_libreria.c: 121: WriteCmdXLCD(lcdtype);
  6509  00655E  5005               	movf	OpenXLCD@lcdtype,w,c
  6510  006560  EC6B  F030         	call	_WriteCmdXLCD
  6511  006564  EC4E  F030         	call	_BusyXLCD	;wreg free
  6512  006568  0900               	iorlw	0
  6513  00656A  A4D8               	btfss	status,2,c
  6514  00656C  D7FB               	goto	l137
  6515                           
  6516                           ;LCD_libreria.c: 125: WriteCmdXLCD(0b00001011&0b00001101&0b00001110);
  6517  00656E  0E08               	movlw	8
  6518  006570  EC6B  F030         	call	_WriteCmdXLCD
  6519  006574  EC4E  F030         	call	_BusyXLCD	;wreg free
  6520  006578  0900               	iorlw	0
  6521  00657A  A4D8               	btfss	status,2,c
  6522  00657C  D7FB               	goto	l140
  6523                           
  6524                           ;LCD_libreria.c: 127: WriteCmdXLCD(0b00001111&0b00001111&0b00001111);
  6525  00657E  0E0F               	movlw	15
  6526  006580  EC6B  F030         	call	_WriteCmdXLCD
  6527  006584  EC4E  F030         	call	_BusyXLCD	;wreg free
  6528  006588  0900               	iorlw	0
  6529  00658A  A4D8               	btfss	status,2,c
  6530  00658C  D7FB               	goto	l143
  6531                           
  6532                           ;LCD_libreria.c: 131: WriteCmdXLCD(0x01);
  6533  00658E  0E01               	movlw	1
  6534  006590  EC6B  F030         	call	_WriteCmdXLCD
  6535  006594  EC4E  F030         	call	_BusyXLCD	;wreg free
  6536  006598  0900               	iorlw	0
  6537  00659A  A4D8               	btfss	status,2,c
  6538  00659C  D7FB               	goto	l146
  6539                           
  6540                           ;LCD_libreria.c: 135: WriteCmdXLCD(0b00000100);
  6541  00659E  0E04               	movlw	4
  6542  0065A0  EC6B  F030         	call	_WriteCmdXLCD
  6543  0065A4  EC4E  F030         	call	_BusyXLCD	;wreg free
  6544  0065A8  0900               	iorlw	0
  6545  0065AA  A4D8               	btfss	status,2,c
  6546  0065AC  D7FB               	goto	l149
  6547                           
  6548                           ;LCD_libreria.c: 139: SetDDRamAddr(0x80);
  6549  0065AE  0E80               	movlw	128
  6550  0065B0  ECCE  F030         	call	_SetDDRamAddr
  6551  0065B4  0012               	return	
  6552  0065B6                     __end_of_OpenXLCD:
  6553                           	opt stack 0
  6554                           tblptru	equ	0xFF8
  6555                           tblptrh	equ	0xFF7
  6556                           tblptrl	equ	0xFF6
  6557                           tablat	equ	0xFF5
  6558                           prodh	equ	0xFF4
  6559                           prodl	equ	0xFF3
  6560                           intcon2	equ	0xFF1
  6561                           indf0	equ	0xFEF
  6562                           postinc0	equ	0xFEE
  6563                           fsr0h	equ	0xFEA
  6564                           fsr0l	equ	0xFE9
  6565                           wreg	equ	0xFE8
  6566                           indf2	equ	0xFDF
  6567                           postinc2	equ	0xFDE
  6568                           postdec2	equ	0xFDD
  6569                           fsr2h	equ	0xFDA
  6570                           fsr2l	equ	0xFD9
  6571                           status	equ	0xFD8
  6572                           
  6573 ;; *************** function _WriteCmdXLCD *****************
  6574 ;; Defined at:
  6575 ;;		line 169 in file "LCD_libreria.c"
  6576 ;; Parameters:    Size  Location     Type
  6577 ;;  cmd             1    wreg     unsigned char 
  6578 ;; Auto vars:     Size  Location     Type
  6579 ;;  cmd             1    0[COMRAM] unsigned char 
  6580 ;; Return value:  Size  Location     Type
  6581 ;;                  1    wreg      void 
  6582 ;; Registers used:
  6583 ;;		wreg, status,2, status,0, cstack
  6584 ;; Tracked objects:
  6585 ;;		On entry : 0/0
  6586 ;;		On exit  : 0/0
  6587 ;;		Unchanged: 0/0
  6588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6589 ;;      Params:         0       0       0       0       0       0       0       0       0
  6590 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6591 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6592 ;;      Totals:         1       0       0       0       0       0       0       0       0
  6593 ;;Total ram usage:        1 bytes
  6594 ;; Hardware stack levels used:    1
  6595 ;; Hardware stack levels required when called:    1
  6596 ;; This function calls:
  6597 ;;		_DelayFor18TCY
  6598 ;; This function is called by:
  6599 ;;		_main
  6600 ;;		_LCD_Init
  6601 ;;		_LCD_gotoXY
  6602 ;;		_OpenXLCD
  6603 ;; This function uses a non-reentrant model
  6604 ;;
  6605                           
  6606                           	psect	text28
  6607  0060D6                     __ptext28:
  6608                           	opt stack 0
  6609  0060D6                     _WriteCmdXLCD:
  6610                           	opt stack 29
  6611                           
  6612                           ;incstack = 0
  6613                           ;WriteCmdXLCD@cmd stored from wreg
  6614  0060D6  6E01               	movwf	WriteCmdXLCD@cmd,c
  6615                           
  6616                           ;LCD_libreria.c: 188: TRISD &= 0xf0;
  6617  0060D8  0EF0               	movlw	240
  6618  0060DA  1695               	andwf	3989,f,c	;volatile
  6619                           
  6620                           ;LCD_libreria.c: 189: PORTD &= 0xf0;
  6621  0060DC  0EF0               	movlw	240
  6622  0060DE  1683               	andwf	3971,f,c	;volatile
  6623                           
  6624                           ;LCD_libreria.c: 190: PORTD |= (cmd>>4)&0x0f;
  6625  0060E0  3801               	swapf	WriteCmdXLCD@cmd,w,c
  6626  0060E2  0B0F               	andlw	15
  6627  0060E4  0B0F               	andlw	15
  6628  0060E6  1283               	iorwf	3971,f,c	;volatile
  6629                           
  6630                           ;LCD_libreria.c: 192: LATDbits.LATD6 = 0;
  6631  0060E8  9C8C               	bcf	3980,6,c	;volatile
  6632                           
  6633                           ;LCD_libreria.c: 193: LATDbits.LATD5 = 0;
  6634  0060EA  9A8C               	bcf	3980,5,c	;volatile
  6635                           
  6636                           ;LCD_libreria.c: 194: DelayFor18TCY();
  6637  0060EC  ECA0  F02F         	call	_DelayFor18TCY	;wreg free
  6638                           
  6639                           ;LCD_libreria.c: 195: LATDbits.LATD4 = 1;
  6640  0060F0  888C               	bsf	3980,4,c	;volatile
  6641                           
  6642                           ;LCD_libreria.c: 196: DelayFor18TCY();
  6643  0060F2  ECA0  F02F         	call	_DelayFor18TCY	;wreg free
  6644                           
  6645                           ;LCD_libreria.c: 197: LATDbits.LATD4 = 0;
  6646  0060F6  988C               	bcf	3980,4,c	;volatile
  6647                           
  6648                           ;LCD_libreria.c: 202: PORTD &= 0xf0;
  6649  0060F8  0EF0               	movlw	240
  6650  0060FA  1683               	andwf	3971,f,c	;volatile
  6651                           
  6652                           ;LCD_libreria.c: 203: PORTD |= cmd&0x0f;
  6653  0060FC  5001               	movf	WriteCmdXLCD@cmd,w,c
  6654  0060FE  0B0F               	andlw	15
  6655  006100  1283               	iorwf	3971,f,c	;volatile
  6656                           
  6657                           ;LCD_libreria.c: 205: DelayFor18TCY();
  6658  006102  ECA0  F02F         	call	_DelayFor18TCY	;wreg free
  6659                           
  6660                           ;LCD_libreria.c: 206: LATDbits.LATD4 = 1;
  6661  006106  888C               	bsf	3980,4,c	;volatile
  6662                           
  6663                           ;LCD_libreria.c: 207: DelayFor18TCY();
  6664  006108  ECA0  F02F         	call	_DelayFor18TCY	;wreg free
  6665                           
  6666                           ;LCD_libreria.c: 208: LATDbits.LATD4 = 0;
  6667  00610C  988C               	bcf	3980,4,c	;volatile
  6668                           
  6669                           ;LCD_libreria.c: 212: TRISD |= 0x0f;
  6670  00610E  0E0F               	movlw	15
  6671  006110  1295               	iorwf	3989,f,c	;volatile
  6672  006112  0012               	return	
  6673  006114                     __end_of_WriteCmdXLCD:
  6674                           	opt stack 0
  6675                           tblptru	equ	0xFF8
  6676                           tblptrh	equ	0xFF7
  6677                           tblptrl	equ	0xFF6
  6678                           tablat	equ	0xFF5
  6679                           prodh	equ	0xFF4
  6680                           prodl	equ	0xFF3
  6681                           intcon2	equ	0xFF1
  6682                           indf0	equ	0xFEF
  6683                           postinc0	equ	0xFEE
  6684                           fsr0h	equ	0xFEA
  6685                           fsr0l	equ	0xFE9
  6686                           wreg	equ	0xFE8
  6687                           indf2	equ	0xFDF
  6688                           postinc2	equ	0xFDE
  6689                           postdec2	equ	0xFDD
  6690                           fsr2h	equ	0xFDA
  6691                           fsr2l	equ	0xFD9
  6692                           status	equ	0xFD8
  6693                           
  6694 ;; *************** function _SetDDRamAddr *****************
  6695 ;; Defined at:
  6696 ;;		line 310 in file "LCD_libreria.c"
  6697 ;; Parameters:    Size  Location     Type
  6698 ;;  DDaddr          1    wreg     unsigned char 
  6699 ;; Auto vars:     Size  Location     Type
  6700 ;;  DDaddr          1    3[COMRAM] unsigned char 
  6701 ;; Return value:  Size  Location     Type
  6702 ;;                  1    wreg      void 
  6703 ;; Registers used:
  6704 ;;		wreg, status,2, status,0, cstack
  6705 ;; Tracked objects:
  6706 ;;		On entry : 0/0
  6707 ;;		On exit  : 0/0
  6708 ;;		Unchanged: 0/0
  6709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6710 ;;      Params:         0       0       0       0       0       0       0       0       0
  6711 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6712 ;;      Temps:          3       0       0       0       0       0       0       0       0
  6713 ;;      Totals:         4       0       0       0       0       0       0       0       0
  6714 ;;Total ram usage:        4 bytes
  6715 ;; Hardware stack levels used:    1
  6716 ;; Hardware stack levels required when called:    1
  6717 ;; This function calls:
  6718 ;;		_DelayFor18TCY
  6719 ;; This function is called by:
  6720 ;;		_OpenXLCD
  6721 ;; This function uses a non-reentrant model
  6722 ;;
  6723                           
  6724                           	psect	text29
  6725  00619C                     __ptext29:
  6726                           	opt stack 0
  6727  00619C                     _SetDDRamAddr:
  6728                           	opt stack 27
  6729                           
  6730                           ;incstack = 0
  6731                           ;SetDDRamAddr@DDaddr stored from wreg
  6732  00619C  6E04               	movwf	SetDDRamAddr@DDaddr,c
  6733                           
  6734                           ;LCD_libreria.c: 329: TRISD &= 0xf0;
  6735  00619E  0EF0               	movlw	240
  6736  0061A0  1695               	andwf	3989,f,c	;volatile
  6737                           
  6738                           ;LCD_libreria.c: 330: PORTD &= 0xf0;
  6739  0061A2  0EF0               	movlw	240
  6740  0061A4  1683               	andwf	3971,f,c	;volatile
  6741                           
  6742                           ;LCD_libreria.c: 331: PORTD |= (((DDaddr | 0b10000000)>>4) & 0x0f);
  6743  0061A6  5004               	movf	SetDDRamAddr@DDaddr,w,c
  6744  0061A8  6E01               	movwf	??_SetDDRamAddr& (0+255),c
  6745  0061AA  6A02               	clrf	(??_SetDDRamAddr+1)& (0+255),c
  6746  0061AC  8E01               	bsf	??_SetDDRamAddr,7,c
  6747  0061AE  0E04               	movlw	4
  6748  0061B0  6E03               	movwf	(??_SetDDRamAddr+2)& (0+255),c
  6749  0061B2                     u1705:
  6750  0061B2  3402               	rlcf	??_SetDDRamAddr+1,w,c
  6751  0061B4  3202               	rrcf	??_SetDDRamAddr+1,f,c
  6752  0061B6  3201               	rrcf	??_SetDDRamAddr,f,c
  6753  0061B8  2E03               	decfsz	(??_SetDDRamAddr+2)& (0+255),f,c
  6754  0061BA  D7FB               	goto	u1705
  6755  0061BC  5001               	movf	??_SetDDRamAddr,w,c
  6756  0061BE  0B0F               	andlw	15
  6757  0061C0  1283               	iorwf	3971,f,c	;volatile
  6758                           
  6759                           ;LCD_libreria.c: 333: LATDbits.LATD6 = 0;
  6760  0061C2  9C8C               	bcf	3980,6,c	;volatile
  6761                           
  6762                           ;LCD_libreria.c: 334: LATDbits.LATD5 = 0;
  6763  0061C4  9A8C               	bcf	3980,5,c	;volatile
  6764                           
  6765                           ;LCD_libreria.c: 335: DelayFor18TCY();
  6766  0061C6  ECA0  F02F         	call	_DelayFor18TCY	;wreg free
  6767                           
  6768                           ;LCD_libreria.c: 336: LATDbits.LATD4 = 1;
  6769  0061CA  888C               	bsf	3980,4,c	;volatile
  6770                           
  6771                           ;LCD_libreria.c: 337: DelayFor18TCY();
  6772  0061CC  ECA0  F02F         	call	_DelayFor18TCY	;wreg free
  6773                           
  6774                           ;LCD_libreria.c: 338: LATDbits.LATD4 = 0;
  6775  0061D0  988C               	bcf	3980,4,c	;volatile
  6776                           
  6777                           ;LCD_libreria.c: 343: PORTD &= 0xf0;
  6778  0061D2  0EF0               	movlw	240
  6779  0061D4  1683               	andwf	3971,f,c	;volatile
  6780                           
  6781                           ;LCD_libreria.c: 344: PORTD |= (DDaddr&0x0f);
  6782  0061D6  5004               	movf	SetDDRamAddr@DDaddr,w,c
  6783  0061D8  0B0F               	andlw	15
  6784  0061DA  1283               	iorwf	3971,f,c	;volatile
  6785                           
  6786                           ;LCD_libreria.c: 346: DelayFor18TCY();
  6787  0061DC  ECA0  F02F         	call	_DelayFor18TCY	;wreg free
  6788                           
  6789                           ;LCD_libreria.c: 347: LATDbits.LATD4 = 1;
  6790  0061E0  888C               	bsf	3980,4,c	;volatile
  6791                           
  6792                           ;LCD_libreria.c: 348: DelayFor18TCY();
  6793  0061E2  ECA0  F02F         	call	_DelayFor18TCY	;wreg free
  6794                           
  6795                           ;LCD_libreria.c: 349: LATDbits.LATD4 = 0;
  6796  0061E6  988C               	bcf	3980,4,c	;volatile
  6797                           
  6798                           ;LCD_libreria.c: 353: TRISD |= 0x0f;
  6799  0061E8  0E0F               	movlw	15
  6800  0061EA  1295               	iorwf	3989,f,c	;volatile
  6801  0061EC  0012               	return	
  6802  0061EE                     __end_of_SetDDRamAddr:
  6803                           	opt stack 0
  6804                           tblptru	equ	0xFF8
  6805                           tblptrh	equ	0xFF7
  6806                           tblptrl	equ	0xFF6
  6807                           tablat	equ	0xFF5
  6808                           prodh	equ	0xFF4
  6809                           prodl	equ	0xFF3
  6810                           intcon2	equ	0xFF1
  6811                           indf0	equ	0xFEF
  6812                           postinc0	equ	0xFEE
  6813                           fsr0h	equ	0xFEA
  6814                           fsr0l	equ	0xFE9
  6815                           wreg	equ	0xFE8
  6816                           indf2	equ	0xFDF
  6817                           postinc2	equ	0xFDE
  6818                           postdec2	equ	0xFDD
  6819                           fsr2h	equ	0xFDA
  6820                           fsr2l	equ	0xFD9
  6821                           status	equ	0xFD8
  6822                           
  6823 ;; *************** function _DelayPORXLCD *****************
  6824 ;; Defined at:
  6825 ;;		line 51 in file "LCD_libreria.c"
  6826 ;; Parameters:    Size  Location     Type
  6827 ;;		None
  6828 ;; Auto vars:     Size  Location     Type
  6829 ;;		None
  6830 ;; Return value:  Size  Location     Type
  6831 ;;                  1    wreg      void 
  6832 ;; Registers used:
  6833 ;;		wreg
  6834 ;; Tracked objects:
  6835 ;;		On entry : 0/0
  6836 ;;		On exit  : 0/0
  6837 ;;		Unchanged: 0/0
  6838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6839 ;;      Params:         0       0       0       0       0       0       0       0       0
  6840 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6841 ;;      Temps:          1       0       0       0       0       0       0       0       0
  6842 ;;      Totals:         1       0       0       0       0       0       0       0       0
  6843 ;;Total ram usage:        1 bytes
  6844 ;; Hardware stack levels used:    1
  6845 ;; This function calls:
  6846 ;;		Nothing
  6847 ;; This function is called by:
  6848 ;;		_OpenXLCD
  6849 ;; This function uses a non-reentrant model
  6850 ;;
  6851                           
  6852                           	psect	text30
  6853  005F30                     __ptext30:
  6854                           	opt stack 0
  6855  005F30                     _DelayPORXLCD:
  6856                           	opt stack 28
  6857                           
  6858                           ;LCD_libreria.c: 52: _delay((unsigned long)((15)*(20000000L/4000.0)));
  6859                           
  6860                           ;incstack = 0
  6861  005F30  0E62               	movlw	98
  6862  005F32  6E01               	movwf	??_DelayPORXLCD& (0+255),c
  6863  005F34  0E66               	movlw	102
  6864  005F36                     u3327:
  6865  005F36  2EE8               	decfsz	wreg,f,c
  6866  005F38  D7FE               	bra	u3327
  6867  005F3A  2E01               	decfsz	??_DelayPORXLCD& (0+255),f,c
  6868  005F3C  D7FC               	bra	u3327
  6869  005F3E  0012               	return	
  6870  005F40                     __end_of_DelayPORXLCD:
  6871                           	opt stack 0
  6872                           tblptru	equ	0xFF8
  6873                           tblptrh	equ	0xFF7
  6874                           tblptrl	equ	0xFF6
  6875                           tablat	equ	0xFF5
  6876                           prodh	equ	0xFF4
  6877                           prodl	equ	0xFF3
  6878                           intcon2	equ	0xFF1
  6879                           indf0	equ	0xFEF
  6880                           postinc0	equ	0xFEE
  6881                           fsr0h	equ	0xFEA
  6882                           fsr0l	equ	0xFE9
  6883                           wreg	equ	0xFE8
  6884                           indf2	equ	0xFDF
  6885                           postinc2	equ	0xFDE
  6886                           postdec2	equ	0xFDD
  6887                           fsr2h	equ	0xFDA
  6888                           fsr2l	equ	0xFD9
  6889                           status	equ	0xFD8
  6890                           
  6891 ;; *************** function _BusyXLCD *****************
  6892 ;; Defined at:
  6893 ;;		line 453 in file "LCD_libreria.c"
  6894 ;; Parameters:    Size  Location     Type
  6895 ;;		None
  6896 ;; Auto vars:     Size  Location     Type
  6897 ;;		None
  6898 ;; Return value:  Size  Location     Type
  6899 ;;                  1    wreg      unsigned char 
  6900 ;; Registers used:
  6901 ;;		wreg, cstack
  6902 ;; Tracked objects:
  6903 ;;		On entry : 0/0
  6904 ;;		On exit  : 0/0
  6905 ;;		Unchanged: 0/0
  6906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6907 ;;      Params:         0       0       0       0       0       0       0       0       0
  6908 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6909 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6910 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6911 ;;Total ram usage:        0 bytes
  6912 ;; Hardware stack levels used:    1
  6913 ;; Hardware stack levels required when called:    1
  6914 ;; This function calls:
  6915 ;;		_DelayFor18TCY
  6916 ;; This function is called by:
  6917 ;;		_LCD_Init
  6918 ;;		_OpenXLCD
  6919 ;;		_putrsXLCD
  6920 ;;		_WriteDataXLCD
  6921 ;;		_putsXLCD
  6922 ;;		_SetCGRamAddr
  6923 ;; This function uses a non-reentrant model
  6924 ;;
  6925                           
  6926                           	psect	text31
  6927  00609C                     __ptext31:
  6928                           	opt stack 0
  6929  00609C                     _BusyXLCD:
  6930                           	opt stack 27
  6931                           
  6932                           ;LCD_libreria.c: 455: LATDbits.LATD6 = 1;
  6933                           
  6934                           ;incstack = 0
  6935  00609C  8C8C               	bsf	3980,6,c	;volatile
  6936                           
  6937                           ;LCD_libreria.c: 456: LATDbits.LATD5 = 0;
  6938  00609E  9A8C               	bcf	3980,5,c	;volatile
  6939                           
  6940                           ;LCD_libreria.c: 457: DelayFor18TCY();
  6941  0060A0  ECA0  F02F         	call	_DelayFor18TCY	;wreg free
  6942                           
  6943                           ;LCD_libreria.c: 458: LATDbits.LATD4 = 1;
  6944  0060A4  888C               	bsf	3980,4,c	;volatile
  6945                           
  6946                           ;LCD_libreria.c: 459: DelayFor18TCY();
  6947  0060A6  ECA0  F02F         	call	_DelayFor18TCY	;wreg free
  6948                           
  6949                           ;LCD_libreria.c: 477: if(PORTD&0x08)
  6950  0060AA  A683               	btfss	3971,3,c	;volatile
  6951  0060AC  D00A               	goto	l196
  6952                           
  6953                           ;LCD_libreria.c: 479: {
  6954                           ;LCD_libreria.c: 480: LATDbits.LATD4 = 0;
  6955  0060AE  988C               	bcf	3980,4,c	;volatile
  6956                           
  6957                           ;LCD_libreria.c: 481: DelayFor18TCY();
  6958  0060B0  ECA0  F02F         	call	_DelayFor18TCY	;wreg free
  6959                           
  6960                           ;LCD_libreria.c: 482: LATDbits.LATD4 = 1;
  6961  0060B4  888C               	bsf	3980,4,c	;volatile
  6962                           
  6963                           ;LCD_libreria.c: 483: DelayFor18TCY();
  6964  0060B6  ECA0  F02F         	call	_DelayFor18TCY	;wreg free
  6965                           
  6966                           ;LCD_libreria.c: 484: LATDbits.LATD4 = 0;
  6967  0060BA  988C               	bcf	3980,4,c	;volatile
  6968                           
  6969                           ;LCD_libreria.c: 485: LATDbits.LATD6 = 0;
  6970  0060BC  9C8C               	bcf	3980,6,c	;volatile
  6971                           
  6972                           ;LCD_libreria.c: 486: return 1;
  6973  0060BE  0E01               	movlw	1
  6974                           
  6975                           ;LCD_libreria.c: 487: }
  6976  0060C0  0012               	return	
  6977  0060C2                     l196:
  6978                           
  6979                           ;LCD_libreria.c: 488: else
  6980                           ;LCD_libreria.c: 489: {
  6981                           ;LCD_libreria.c: 490: LATDbits.LATD4 = 0;
  6982  0060C2  988C               	bcf	3980,4,c	;volatile
  6983                           
  6984                           ;LCD_libreria.c: 491: DelayFor18TCY();
  6985  0060C4  ECA0  F02F         	call	_DelayFor18TCY	;wreg free
  6986                           
  6987                           ;LCD_libreria.c: 492: LATDbits.LATD4 = 1;
  6988  0060C8  888C               	bsf	3980,4,c	;volatile
  6989                           
  6990                           ;LCD_libreria.c: 493: DelayFor18TCY();
  6991  0060CA  ECA0  F02F         	call	_DelayFor18TCY	;wreg free
  6992                           
  6993                           ;LCD_libreria.c: 494: LATDbits.LATD4 = 0;
  6994  0060CE  988C               	bcf	3980,4,c	;volatile
  6995                           
  6996                           ;LCD_libreria.c: 495: LATDbits.LATD6 = 0;
  6997  0060D0  9C8C               	bcf	3980,6,c	;volatile
  6998                           
  6999                           ;LCD_libreria.c: 496: return 0;
  7000  0060D2  0E00               	movlw	0
  7001  0060D4  0012               	return	
  7002  0060D6                     __end_of_BusyXLCD:
  7003                           	opt stack 0
  7004                           tblptru	equ	0xFF8
  7005                           tblptrh	equ	0xFF7
  7006                           tblptrl	equ	0xFF6
  7007                           tablat	equ	0xFF5
  7008                           prodh	equ	0xFF4
  7009                           prodl	equ	0xFF3
  7010                           intcon2	equ	0xFF1
  7011                           indf0	equ	0xFEF
  7012                           postinc0	equ	0xFEE
  7013                           fsr0h	equ	0xFEA
  7014                           fsr0l	equ	0xFE9
  7015                           wreg	equ	0xFE8
  7016                           indf2	equ	0xFDF
  7017                           postinc2	equ	0xFDE
  7018                           postdec2	equ	0xFDD
  7019                           fsr2h	equ	0xFDA
  7020                           fsr2l	equ	0xFD9
  7021                           status	equ	0xFD8
  7022                           
  7023 ;; *************** function _DelayFor18TCY *****************
  7024 ;; Defined at:
  7025 ;;		line 34 in file "LCD_libreria.c"
  7026 ;; Parameters:    Size  Location     Type
  7027 ;;		None
  7028 ;; Auto vars:     Size  Location     Type
  7029 ;;		None
  7030 ;; Return value:  Size  Location     Type
  7031 ;;                  1    wreg      void 
  7032 ;; Registers used:
  7033 ;;		None
  7034 ;; Tracked objects:
  7035 ;;		On entry : 0/0
  7036 ;;		On exit  : 0/0
  7037 ;;		Unchanged: 0/0
  7038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7039 ;;      Params:         0       0       0       0       0       0       0       0       0
  7040 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7041 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7042 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7043 ;;Total ram usage:        0 bytes
  7044 ;; Hardware stack levels used:    1
  7045 ;; This function calls:
  7046 ;;		Nothing
  7047 ;; This function is called by:
  7048 ;;		_WriteCmdXLCD
  7049 ;;		_SetDDRamAddr
  7050 ;;		_WriteDataXLCD
  7051 ;;		_BusyXLCD
  7052 ;;		_ReadAddrXLCD
  7053 ;;		_ReadDataXLCD
  7054 ;; This function uses a non-reentrant model
  7055 ;;
  7056                           
  7057                           	psect	text32
  7058  005F40                     __ptext32:
  7059                           	opt stack 0
  7060  005F40                     _DelayFor18TCY:
  7061                           	opt stack 28
  7062                           
  7063                           ;LCD_libreria.c: 35: __nop();
  7064                           
  7065                           ;incstack = 0
  7066  005F40  F000               	nop	
  7067                           
  7068                           ;LCD_libreria.c: 36: __nop();
  7069  005F42  F000               	nop	
  7070                           
  7071                           ;LCD_libreria.c: 37: __nop();
  7072  005F44  F000               	nop	
  7073                           
  7074                           ;LCD_libreria.c: 38: __nop();
  7075  005F46  F000               	nop	
  7076                           
  7077                           ;LCD_libreria.c: 39: __nop();
  7078  005F48  F000               	nop	
  7079                           
  7080                           ;LCD_libreria.c: 40: __nop();
  7081  005F4A  F000               	nop	
  7082                           
  7083                           ;LCD_libreria.c: 41: __nop();
  7084  005F4C  F000               	nop	
  7085                           
  7086                           ;LCD_libreria.c: 42: __nop();
  7087  005F4E  F000               	nop	
  7088                           
  7089                           ;LCD_libreria.c: 43: __nop();
  7090  005F50  F000               	nop	
  7091                           
  7092                           ;LCD_libreria.c: 44: __nop();
  7093  005F52  F000               	nop	
  7094                           
  7095                           ;LCD_libreria.c: 45: __nop();
  7096  005F54  F000               	nop	
  7097                           
  7098                           ;LCD_libreria.c: 46: __nop();
  7099  005F56  F000               	nop	
  7100                           
  7101                           ;LCD_libreria.c: 47: return;
  7102  005F58  0012               	return		;funcret
  7103  005F5A                     __end_of_DelayFor18TCY:
  7104                           	opt stack 0
  7105                           tblptru	equ	0xFF8
  7106                           tblptrh	equ	0xFF7
  7107                           tblptrl	equ	0xFF6
  7108                           tablat	equ	0xFF5
  7109                           prodh	equ	0xFF4
  7110                           prodl	equ	0xFF3
  7111                           intcon2	equ	0xFF1
  7112                           indf0	equ	0xFEF
  7113                           postinc0	equ	0xFEE
  7114                           fsr0h	equ	0xFEA
  7115                           fsr0l	equ	0xFE9
  7116                           wreg	equ	0xFE8
  7117                           indf2	equ	0xFDF
  7118                           postinc2	equ	0xFDE
  7119                           postdec2	equ	0xFDD
  7120                           fsr2h	equ	0xFDA
  7121                           fsr2l	equ	0xFD9
  7122                           status	equ	0xFD8
  7123                           
  7124 ;; *************** function _ADC_read *****************
  7125 ;; Defined at:
  7126 ;;		line 32 in file "ADC_libreria.c"
  7127 ;; Parameters:    Size  Location     Type
  7128 ;;  ch              1    wreg     unsigned char 
  7129 ;; Auto vars:     Size  Location     Type
  7130 ;;  ch              1    2[COMRAM] unsigned char 
  7131 ;; Return value:  Size  Location     Type
  7132 ;;                  2    0[COMRAM] unsigned int 
  7133 ;; Registers used:
  7134 ;;		wreg, status,2, status,0
  7135 ;; Tracked objects:
  7136 ;;		On entry : 0/0
  7137 ;;		On exit  : 0/0
  7138 ;;		Unchanged: 0/0
  7139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7140 ;;      Params:         2       0       0       0       0       0       0       0       0
  7141 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7142 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7143 ;;      Totals:         3       0       0       0       0       0       0       0       0
  7144 ;;Total ram usage:        3 bytes
  7145 ;; Hardware stack levels used:    1
  7146 ;; This function calls:
  7147 ;;		Nothing
  7148 ;; This function is called by:
  7149 ;;		_main
  7150 ;; This function uses a non-reentrant model
  7151 ;;
  7152                           
  7153                           	psect	text33
  7154  00606A                     __ptext33:
  7155                           	opt stack 0
  7156  00606A                     _ADC_read:
  7157                           	opt stack 30
  7158                           
  7159                           ;incstack = 0
  7160                           ;ADC_read@ch stored from wreg
  7161  00606A  6E03               	movwf	ADC_read@ch,c
  7162                           
  7163                           ;ADC_libreria.c: 33: if(ch > 13)return 0;
  7164  00606C  0E0D               	movlw	13
  7165  00606E  6403               	cpfsgt	ADC_read@ch,c
  7166  006070  D005               	goto	l74
  7167  006072  0E00               	movlw	0
  7168  006074  6E02               	movwf	?_ADC_read+1,c
  7169  006076  0E00               	movlw	0
  7170  006078  6E01               	movwf	?_ADC_read,c
  7171  00607A  0012               	return	
  7172  00607C                     l74:
  7173                           
  7174                           ;ADC_libreria.c: 34: ADCON0 = 0;
  7175  00607C  0E00               	movlw	0
  7176  00607E  6EC2               	movwf	4034,c	;volatile
  7177                           
  7178                           ;ADC_libreria.c: 35: ADCON0 = (ch<<2);
  7179  006080  4403               	rlncf	ADC_read@ch,w,c
  7180  006082  46E8               	rlncf	wreg,f,c
  7181  006084  0BFC               	andlw	252
  7182  006086  6EC2               	movwf	4034,c	;volatile
  7183                           
  7184                           ;ADC_libreria.c: 36: ADCON0bits.ADON = 1;
  7185  006088  80C2               	bsf	4034,0,c	;volatile
  7186                           
  7187                           ;ADC_libreria.c: 37: ADCON0bits.GO_DONE = 1;
  7188  00608A  82C2               	bsf	4034,1,c	;volatile
  7189  00608C  B2C2               	btfsc	4034,1,c	;volatile
  7190  00608E  D7FE               	goto	l77
  7191                           
  7192                           ;ADC_libreria.c: 39: ADCON0bits.ADON = 0;
  7193  006090  90C2               	bcf	4034,0,c	;volatile
  7194                           
  7195                           ;ADC_libreria.c: 40: return ADRES;
  7196  006092  CFC3 F001          	movff	4035,?_ADC_read	;volatile
  7197  006096  CFC4 F002          	movff	4036,?_ADC_read+1	;volatile
  7198  00609A  0012               	return		;funcret
  7199  00609C                     __end_of_ADC_read:
  7200                           	opt stack 0
  7201                           tblptru	equ	0xFF8
  7202                           tblptrh	equ	0xFF7
  7203                           tblptrl	equ	0xFF6
  7204                           tablat	equ	0xFF5
  7205                           prodh	equ	0xFF4
  7206                           prodl	equ	0xFF3
  7207                           intcon2	equ	0xFF1
  7208                           indf0	equ	0xFEF
  7209                           postinc0	equ	0xFEE
  7210                           fsr0h	equ	0xFEA
  7211                           fsr0l	equ	0xFE9
  7212                           wreg	equ	0xFE8
  7213                           indf2	equ	0xFDF
  7214                           postinc2	equ	0xFDE
  7215                           postdec2	equ	0xFDD
  7216                           fsr2h	equ	0xFDA
  7217                           fsr2l	equ	0xFD9
  7218                           status	equ	0xFD8
  7219                           
  7220 ;; *************** function _ADC_init *****************
  7221 ;; Defined at:
  7222 ;;		line 23 in file "ADC_libreria.c"
  7223 ;; Parameters:    Size  Location     Type
  7224 ;;		None
  7225 ;; Auto vars:     Size  Location     Type
  7226 ;;		None
  7227 ;; Return value:  Size  Location     Type
  7228 ;;                  1    wreg      void 
  7229 ;; Registers used:
  7230 ;;		wreg, status,2
  7231 ;; Tracked objects:
  7232 ;;		On entry : 0/0
  7233 ;;		On exit  : 0/0
  7234 ;;		Unchanged: 0/0
  7235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7236 ;;      Params:         0       0       0       0       0       0       0       0       0
  7237 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7238 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7239 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7240 ;;Total ram usage:        0 bytes
  7241 ;; Hardware stack levels used:    1
  7242 ;; This function calls:
  7243 ;;		Nothing
  7244 ;; This function is called by:
  7245 ;;		_main
  7246 ;; This function uses a non-reentrant model
  7247 ;;
  7248                           
  7249                           	psect	text34
  7250  005FD8                     __ptext34:
  7251                           	opt stack 0
  7252  005FD8                     _ADC_init:
  7253                           	opt stack 30
  7254                           
  7255                           ;ADC_libreria.c: 24: ADCON1bits.PCFG = 0b1100;
  7256                           
  7257                           ;incstack = 0
  7258  005FD8  50C1               	movf	4033,w,c	;volatile
  7259  005FDA  0BF0               	andlw	-16
  7260  005FDC  090C               	iorlw	12
  7261  005FDE  6EC1               	movwf	4033,c	;volatile
  7262                           
  7263                           ;ADC_libreria.c: 25: ADCON1bits.VCFG = 0;
  7264  005FE0  0ECF               	movlw	-49
  7265  005FE2  16C1               	andwf	4033,f,c	;volatile
  7266                           
  7267                           ;ADC_libreria.c: 26: ADCON0 = 0;
  7268  005FE4  0E00               	movlw	0
  7269  005FE6  6EC2               	movwf	4034,c	;volatile
  7270                           
  7271                           ;ADC_libreria.c: 27: ADCON2bits.ACQT = 3;
  7272  005FE8  50C0               	movf	4032,w,c	;volatile
  7273  005FEA  0BC7               	andlw	-57
  7274  005FEC  0918               	iorlw	24
  7275  005FEE  6EC0               	movwf	4032,c	;volatile
  7276                           
  7277                           ;ADC_libreria.c: 28: ADCON2bits.ADCS = 5;
  7278  005FF0  50C0               	movf	4032,w,c	;volatile
  7279  005FF2  0BF8               	andlw	-8
  7280  005FF4  0905               	iorlw	5
  7281  005FF6  6EC0               	movwf	4032,c	;volatile
  7282                           
  7283                           ;ADC_libreria.c: 29: ADCON2bits.ADFM = 1;
  7284  005FF8  8EC0               	bsf	4032,7,c	;volatile
  7285  005FFA  0012               	return		;funcret
  7286  005FFC                     __end_of_ADC_init:
  7287                           	opt stack 0
  7288                           tblptru	equ	0xFF8
  7289                           tblptrh	equ	0xFF7
  7290                           tblptrl	equ	0xFF6
  7291                           tablat	equ	0xFF5
  7292                           prodh	equ	0xFF4
  7293                           prodl	equ	0xFF3
  7294                           intcon2	equ	0xFF1
  7295                           indf0	equ	0xFEF
  7296                           postinc0	equ	0xFEE
  7297                           fsr0h	equ	0xFEA
  7298                           fsr0l	equ	0xFE9
  7299                           wreg	equ	0xFE8
  7300                           indf2	equ	0xFDF
  7301                           postinc2	equ	0xFDE
  7302                           postdec2	equ	0xFDD
  7303                           fsr2h	equ	0xFDA
  7304                           fsr2l	equ	0xFD9
  7305                           status	equ	0xFD8
  7306                           tblptru	equ	0xFF8
  7307                           tblptrh	equ	0xFF7
  7308                           tblptrl	equ	0xFF6
  7309                           tablat	equ	0xFF5
  7310                           prodh	equ	0xFF4
  7311                           prodl	equ	0xFF3
  7312                           intcon2	equ	0xFF1
  7313                           indf0	equ	0xFEF
  7314                           postinc0	equ	0xFEE
  7315                           fsr0h	equ	0xFEA
  7316                           fsr0l	equ	0xFE9
  7317                           wreg	equ	0xFE8
  7318                           indf2	equ	0xFDF
  7319                           postinc2	equ	0xFDE
  7320                           postdec2	equ	0xFDD
  7321                           fsr2h	equ	0xFDA
  7322                           fsr2l	equ	0xFD9
  7323                           status	equ	0xFD8
  7324                           
  7325                           	psect	rparam
  7326  0000                     tblptru	equ	0xFF8
  7327                           tblptrh	equ	0xFF7
  7328                           tblptrl	equ	0xFF6
  7329                           tablat	equ	0xFF5
  7330                           prodh	equ	0xFF4
  7331                           prodl	equ	0xFF3
  7332                           intcon2	equ	0xFF1
  7333                           indf0	equ	0xFEF
  7334                           postinc0	equ	0xFEE
  7335                           fsr0h	equ	0xFEA
  7336                           fsr0l	equ	0xFE9
  7337                           wreg	equ	0xFE8
  7338                           indf2	equ	0xFDF
  7339                           postinc2	equ	0xFDE
  7340                           postdec2	equ	0xFDD
  7341                           fsr2h	equ	0xFDA
  7342                           fsr2l	equ	0xFD9
  7343                           status	equ	0xFD8


Data Sizes:
    Strings     136
    Constant    118
    Data        0
    BSS         25
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     78      83
    BANK0           160     23      43
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_14(CODE[5]), STR_11(CODE[5]), STR_8(CODE[5]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 20
		 -> datos(BANK0[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    putrsXLCD@buffer	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_13(CODE[12]), STR_12(CODE[16]), STR_10(CODE[12]), STR_9(CODE[16]), 
		 -> datos(BANK0[20]), STR_7(CODE[12]), STR_6(CODE[16]), STR_5(CODE[13]), 
		 -> STR_4(CODE[13]), STR_3(CODE[13]), STR_2(CODE[16]), STR_1(CODE[16]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    _putrsXLCD->_WriteDataXLCD
    ___lwtoft->___ftpack
    ___ftdiv->___ftmul
    _LCD_gotoXY->_WriteCmdXLCD
    _LCD_Init->_OpenXLCD
    _OpenXLCD->_SetDDRamAddr

Critical Paths under _main in BANK0

    _main->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   65909
                                             76 COMRAM     2     2      0
                           _ADC_init
                           _ADC_read
                           _LCD_Init
                         _LCD_gotoXY
                          _PORT_Init
                       _WriteCmdXLCD
                            ___ftdiv
                            ___ftmul
                           ___lwtoft
                          _putrsXLCD
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             44    37      7   50613
                                             63 COMRAM    13     6      7
                                              0 BANK0     23    23      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                                7     4      3   12211
                                             35 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              10     7      3   12013
                                             35 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    2743
                                             14 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    5541
                                             20 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1664
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1820
                                              6 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     455
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     598
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    2650
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     615
                                              0 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     466
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     480
                                             42 COMRAM    15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    4120
                                             57 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    3775
                                             45 COMRAM    12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     121
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     592
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) _putrsXLCD                                            2     0      2    1153
                                              1 COMRAM     2     0      2
                           _BusyXLCD
                      _WriteDataXLCD
 ---------------------------------------------------------------------------------
 (2) _WriteDataXLCD                                        1     1      0      44
                                              0 COMRAM     1     1      0
                           _BusyXLCD
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (1) ___lwtoft                                             3     0      3    2755
                                              8 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) ___ftdiv                                             15     9      6    3367
                                             35 COMRAM    15     9      6
                            ___ftmul (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2505
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _PORT_Init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LCD_gotoXY                                           4     0      4    2238
                                              1 COMRAM     4     0      4
                       _WriteCmdXLCD
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             0     0      0     154
                           _BusyXLCD
                           _OpenXLCD
                       _WriteCmdXLCD
 ---------------------------------------------------------------------------------
 (2) _OpenXLCD                                             1     1      0     110
                                              4 COMRAM     1     1      0
                           _BusyXLCD
                       _DelayPORXLCD
                       _SetDDRamAddr
                       _WriteCmdXLCD
 ---------------------------------------------------------------------------------
 (1) _WriteCmdXLCD                                         1     1      0      44
                                              0 COMRAM     1     1      0
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (3) _SetDDRamAddr                                         4     4      0      44
                                              0 COMRAM     4     4      0
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (3) _DelayPORXLCD                                         1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _BusyXLCD                                             0     0      0       0
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (3) _DelayFor18TCY                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_read                                             3     1      2      44
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _ADC_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_init
   _ADC_read
   _LCD_Init
     _BusyXLCD
       _DelayFor18TCY
     _OpenXLCD
       _BusyXLCD
         _DelayFor18TCY
       _DelayPORXLCD
       _SetDDRamAddr
         _DelayFor18TCY
       _WriteCmdXLCD
         _DelayFor18TCY
     _WriteCmdXLCD
       _DelayFor18TCY
   _LCD_gotoXY
     _WriteCmdXLCD
       _DelayFor18TCY
   _PORT_Init
   _WriteCmdXLCD
     _DelayFor18TCY
   ___ftdiv
     ___ftmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftpack (ARG)
     ___lwtoft (ARG)
       ___ftpack
   ___ftmul
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
     ___ftpack (ARG)
     ___lwtoft (ARG)
       ___ftpack
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   ___lwtoft
     ___ftpack
   _putrsXLCD
     _BusyXLCD
       _DelayFor18TCY
     _WriteDataXLCD
       _BusyXLCD
         _DelayFor18TCY
       _DelayFor18TCY
   _sprintf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___ftpack
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     17      2B       5       26.9%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     4E      53       1       87.4%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      7E      20        0.0%
DATA                 0      0      7E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sun Jul 08 20:51:12 2018

                     l45 76E8                       l38 7412                       l39 75D4  
                     l74 607C                       l77 608C             ___awdiv@sign 000C  
    ___wmul@multiplicand 0011              __CFG_BORV$3 000000             __CFG_CP0$OFF 000000  
           __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000  
           ___ftadd@exp1 0039             ___ftadd@exp2 0038             ___ftadd@sign 0037  
                    l120 5FCE                      l106 5F60                      l131 654A  
                    l140 6574                      l220 6F4A                      l230 736E  
                    l143 6584                      l223 7192                      l224 70BE  
                    l137 6564                      l217 6E7E                      l241 78A4  
                    l146 6594                      l154 6222                      l234 7804  
                    l155 61F0                      l227 716E                      l251 79B0  
                    l235 781A                      l228 72BE                      l252 7A16  
                    l244 78A0                      l236 7892                      l149 65A4  
                    l245 78C8                      l237 787C                      l270 7C9A  
                    l254 7A3C                      l238 7844                      l503 6A42  
                    l247 7E62                      l271 7C06                      l255 7A7C  
                    l504 6A36                      l280 7D54                      l256 7B44  
                    l248 78DC                      l601 6B50                      l273 7CBA  
                    l265 7BAA                      l249 791E                      l530 6630  
                    l602 6B40                      l282 7E58                      l274 7CA4  
                    l523 65DE                      l283 7E42                      l259 7AEC  
                    l196 60C2                      l524 65D4                      l612 64B2  
                    l460 6422                      l276 7CDE                      l613 64E2  
                    l621 688E                      l285 7E7A                      l277 7CE2  
                    l526 6612                      l630 6036                      l702 625C  
                    l462 6440                      l622 68C0                      l286 7E96  
                    l278 7D04                      l527 65FC                      l703 6250  
                    l607 6B74                      l463 6438                      l623 68D0  
                    l279 7E36                      l640 6776                      l608 6B68  
                    l480 6364                      l472 6320                      l288 7EB6  
                    l529 663A                      l481 6372                      l473 632C  
                    l625 68E8                      l289 7EDA                      l554 6BDE  
                    l642 67EC                      l466 6460                      l626 68F8  
                    l563 6C6E                      l651 682C                      l643 67DC  
                    l491 6950                      l467 646A                      l459 6412  
                    l475 6342                      l619 6866                      l580 6CC6  
                    l636 612A                      l468 6478                      l476 633A  
                    l581 6CE2                      l493 696E                      l590 66F2  
                    l582 6D12                      l558 6C08                      l494 69B0  
                    l591 6718                      l495 69E0                      l479 635A  
                    l655 5F8E                      l568 6C64                      l648 6810  
                    l577 6CA2                      l569 6C5A                      l649 6804  
                    l681 63AA                      l497 6A1E                      l578 6C98  
                    l682 639E                      l498 6A0E                      l587 668C  
                    l691 62C4                      l595 6A86                      l692 62B8  
                    l589 66B4                      l685 63DE                      l597 6AB2  
                    l686 63EC                      l598 6AEC                      l695 62EC  
                    l599 6B14                      l696 62FA             __CFG_CPB$OFF 000000  
           __CFG_CPD$OFF 000000              ?_LCD_gotoXY 0002             __CFG_BOR$OFF 000000  
  __size_of_WriteCmdXLCD 003E             ___awmod@sign 0006                      wreg 000FE8  
           __CFG_FOSC$HS 000000             __CFG_LVP$OFF 000000             ___ftdiv@cntr 002D  
           ___ftdiv@sign 0032             __CFG_WDT$OFF 000000                     l2220 650E  
                   l3102 7BAE                     l3130 7CA4                     l3082 7AC6  
                   l3074 7A7C                     l2608 6156                     l3192 7ED6  
                   STR_1 7FB7                     STR_2 7F77                     STR_3 7FC7  
                   STR_4 7FD4                     STR_5 7FE1                     STR_6 7F87  
                   STR_7 7FEE                     STR_8 7FFA                     STR_9 7F97  
                   u2010 6444                     u2100 6554                     u2070 6346  
                   u3030 7EF2                     u3110 75D8                     u3041 6674  
                   u1620 65C6                     u2500 6794                     u2420 6A48  
                   u3061 669C                     u2350 6B7A                     u1711 6B9C  
                   u2271 6A6A                     u2600 62C8                     u1705 61B2  
                   u1721 6BB0                     u2505 678C                     u3217 73C8  
                   u1810 6C38                     u3090 74C4                     u2291 6A96  
                   u3307 7716                     u3227 73FE                     u1660 6644  
                   u2540 6816                     u3317 77EA                     u3237 743C  
                   u1750 6BD0                     u3327 5F36                     u3247 7474  
                   u2640 5FC4                     u2481 675A                     u1921 684E  
                   u3257 74B2                     u1850 6C76                     u2570 63AE  
                   u3267 74EE                     u2660 621A                     u1780 6BFA  
                   u2900 7BE6                     u2820 7A4E                     u1941 6876  
                   u3277 75C2                     u2670 6242                     u2830 7A8E  
                   u3287 7602                     u1880 6CAA                     u3297 76D6  
                   u2930 7CC8                     u2667 6210                     u2940 7CD8  
                   u2860 7AC6                     u2780 7956                     u2677 6238  
                   u2785 794C                     _main 7392             ___ftpack@arg 0001  
           ___ftpack@exp 0004                     fsr0h 000FEA                     indf0 000FEF  
                   fsr2h 000FDA                     fsr0l 000FE9                     indf2 000FDF  
                   fsr2l 000FD9   __size_of_WriteDataXLCD 0048                     prodh 000FF4  
                   prodl 000FF3                     start 0000         __end_of_ADC_init 5FFC  
       __end_of_ADC_read 609C            __CFG_IESO$OFF 000000             _sprintf$1174 0060  
          __CFG_MCLRE$ON 000000             ___ftmul@cntr 0022             ___param_bank 000000  
           ___ftmul@sign 0023             ___fttol@exp1 0039             ___fttol@lval 0035  
           _WriteCmdXLCD 60D6         __end_of_LCD_Init 5F78            __CFG_PLLDIV$1 000000  
         __CFG_CCP2MX$ON 000000            ?_SetDDRamAddr 0001                    ?_main 0001  
        __end_of___awdiv 6482                    _ADRES 000FC3          __end_of___ftadd 6D38  
                  STR_10 7FEE                    STR_11 7FFA                    STR_12 7FA7  
                  STR_13 7FEE                    STR_14 7FFA          __end_of___awmod 637C  
        __end_of___ftdiv 674A          __end_of___ftneg 6044          __end_of___lldiv 63FE  
        __end_of___ftmul 6932          ___awdiv@divisor 0009          __end_of___llmod 630C  
        __end_of___ftsub 6154          __end_of___fttol 683E          ___awdiv@counter 000B  
                  _PORTD 000F83            __CFG_USBDIV$1 000000                    _TRISA 000F92  
                  _TRISD 000F95            __CFG_PWRT$OFF 000000            __CFG_WRT0$OFF 000000  
          __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000  
           ___lltoft@exp 0011           __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000  
         __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000           __CFG_EBTR3$OFF 000000  
          __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000  
         __CFG_EBTRB$OFF 000000                    _datos 0077          __end_of_dpowers 7F29  
                  _scale 6F8A          __end_of_isdigit 5F96            ___ftpack@sign 0005  
                  _valor 0052       __size_of_PORT_Init 000E                    tablat 000FF5  
                  status 000FD8          __end_of_sprintf 7F00           __CFG_ICPRT$OFF 000000  
         __CFG_PBADEN$ON 000000      __size_of_LCD_gotoXY 0022          __initialization 5F96  
            LCD_gotoXY@x 0002              LCD_gotoXY@y 0004             __end_of_main 77F8  
       __end_of_BusyXLCD 60D6    __size_of_DelayPORXLCD 0010           ??_SetDDRamAddr 0001  
       __end_of_OpenXLCD 65B6                   ??_main 004D            ___fttol@sign1 0034  
          __activetblptr 000002            _WriteDataXLCD 6154     __size_of__tdiv_to_l_ 0132  
                 _ADCON0 000FC2         ___llmod@dividend 0001                   ?_scale 0024  
       ___awdiv@dividend 0007         __end_of___ftpack 6664         __end_of___lltoft 62A6  
       __end_of___lwtoft 6020             _DelayPORXLCD 5F30           __CFG_XINST$OFF 000000  
       __end_of__powers_ 7F50                   ___ftge 6482                   ___wmul 6044  
              ??___awdiv 000B                ??___ftadd 0034           __CFG_STVREN$ON 000000  
              ??___awmod 0005                ??___ftdiv 002A                ??___ftneg 0004  
              ??___lldiv 0009                ??___ftmul 001B                ??___llmod 0009  
              ??___ftsub 0040                ??___fttol 002F        __end_of_PORT_Init 5F30  
                 _fround 6D38                   clear_0 5F9C         ___awdiv@quotient 000D  
        ___awmod@divisor 0003          ___awmod@counter 0005           ?_WriteDataXLCD 0001  
  ___ftmul@f3_as_product 001F                ??_isdigit 0001             __mediumconst 7F00  
                 tblptrh 000FF7                   tblptrl 000FF6                   tblptru 000FF8  
              ?_ADC_init 0001                ?_ADC_read 0001                ??_sprintf 0047  
             __accesstop 0060  __end_of__initialization 5FAC                ?_LCD_Init 0001  
             ___ftadd@f1 002E               ___ftadd@f2 0031               ___ftge@ff1 0001  
             ___ftge@ff2 0004            ___rparam_used 000001               ___ftdiv@f1 0024  
             ___ftdiv@f2 0027               ___ftdiv@f3 002E               ___ftneg@f1 0001  
             ___ftmul@f1 0015               ___ftmul@f2 0018               ___ftsub@f1 003A  
             ___ftsub@f2 003D               ___fttol@f1 002B           __pcstackCOMRAM 0001  
             ___lltoft@c 0009            __end_of_scale 7392               ___lwtoft@c 0009  
           ??_LCD_gotoXY 0006               __div_to_l_ 6932               ??_ADC_init 0001  
             ??_ADC_read 0003          __div_to_l_@exp1 000C          __div_to_l_@cntr 000B  
                ??_scale 0027   __size_of_DelayFor18TCY 001A          __div_to_l_@quot 0007  
             __pbssBANK0 0077                ?_BusyXLCD 0001          WriteCmdXLCD@cmd 0001  
             ??_LCD_Init 0006     __end_of_SetDDRamAddr 61EE                ?_OpenXLCD 0001  
          __div_to_l_@f1 0001            __div_to_l_@f2 0004       __end_of_LCD_gotoXY 5FD8  
                ?___ftge 0001        WriteDataXLCD@data 0001                  ?___wmul 000F  
        ??_WriteDataXLCD 0001                  ?_fround 0024                ?___ftpack 0001  
              ?___lltoft 0009                ?___lwtoft 0009       __size_of_putrsXLCD 005C  
             ??_BusyXLCD 0001          __CFG_VREGEN$OFF 000000               ADC_read@ch 0003  
             ??_OpenXLCD 0005        __end_of__npowers_ 7F77                  __Hparam 0000  
             _scale$1173 0027                  __Lparam 0000          __size_of___ftge 0090  
                ___awdiv 63FE            _DelayFor18TCY 5F40                  ___ftadd 6B8C  
                ___awmod 630C                  ___ftdiv 6664                  ___ftneg 6020  
                ___lldiv 637C          __size_of___wmul 0026                  ___ftmul 683E  
                ___llmod 62A6                  ___ftsub 6114                  ___fttol 674A  
                __pcinit 5F96               ??___ftpack 0006          putrsXLCD@buffer 0002  
        __size_of_fround 0252                  __ramtop 0800               ??___lltoft 000D  
                __ptext0 7392                  __ptext1 77F8                  __ptext2 6F8A  
                __ptext3 5F78                  __ptext4 6D38                  __ptext5 6044  
                __ptext6 683E                  __ptext7 630C                  __ptext8 63FE  
                __ptext9 6A5A               ??___lwtoft 000C              ?__div_to_l_ 0001  
                _dpowers 7F01                  _isdigit 5F78         ___awmod@dividend 0001  
                _sprintf 77F8                  _voltaje 004F     end_of_initialization 5FAC  
          __Lmediumconst 7F00          ___lldiv@divisor 0005          ___lldiv@counter 000D  
         ?_DelayFor18TCY 0001                  postdec2 000FDD                  postinc0 000FEE  
                postinc2 000FDE           __tdiv_to_l_@f1 0001           __tdiv_to_l_@f2 0004  
      __end_of_putrsXLCD 624A            ??__tdiv_to_l_ 0007                _PORTBbits 000F81  
              _PORT_Init 5F22                _TRISBbits 000F93                _TRISDbits 000F95  
  __size_of_SetDDRamAddr 0052        __size_of_ADC_init 0024        __size_of_ADC_read 0032  
            ___ftdiv@exp 0031        __size_of_LCD_Init 001E      __size_of__div_to_l_ 0128  
            ___ftmul@exp 001E           __end_of___ftge 6512           __end_of___wmul 606A  
         __end_of_fround 6F8A             _SetDDRamAddr 619C               ?_PORT_Init 0001  
     SetDDRamAddr@DDaddr 0004      start_initialization 5F96      __end_of__tdiv_to_l_ 6B8C  
        ___llmod@divisor 0005        __size_of_BusyXLCD 003A          ___llmod@counter 0009  
        ??_DelayFor18TCY 0001        __size_of_OpenXLCD 00A4                 ??___ftge 0007  
               ??___wmul 0013            ?_WriteCmdXLCD 0001         __CFG_LPT1OSC$OFF 000000  
               ??_fround 0027            sprintf@tmpval 006D               fround@prec 002D  
      __size_of___ftpack 00AE        __size_of___lltoft 005C              __pbssCOMRAM 004F  
      __size_of___lwtoft 0024            __pcstackBANK0 0060              sprintf@flag 0065  
            sprintf@fval 0073              sprintf@prec 0071            __pmediumconst 7F00  
         ??_WriteCmdXLCD 0001                 ?___awdiv 0007                 ?___ftadd 002E  
               ?___awmod 0001                 ?___ftdiv 0024                 ?___ftneg 0001  
               ?___lldiv 0001                 ?___ftmul 0015                 ?___llmod 0001  
               ?___ftsub 003A                __npowers_ 7F50                 ?___fttol 002B  
            __tdiv_to_l_ 6A5A    __end_of_WriteDataXLCD 619C              ??_PORT_Init 0001  
           ??__div_to_l_ 0007                 ?_isdigit 0001                 _ADC_init 5FD8  
               _ADC_read 606A                 ?_sprintf 0040           __size_of_scale 0408  
               _LCD_Init 5F5A           ___wmul@product 0013                 _LATDbits 000F8C  
          ?_DelayPORXLCD 0001          OpenXLCD@lcdtype 0005       __end_of__div_to_l_ 6A5A  
       __CFG_WDTPS$32768 000000               _ADCON0bits 000FC2               _ADCON1bits 000FC1  
             _ADCON2bits 000FC0        ___wmul@multiplier 000F                _putrsXLCD 61EE  
            _INTCON2bits 000FF1                 _BusyXLCD 609C           ??_DelayPORXLCD 0001  
               _OpenXLCD 6512                 __Hrparam 0000                 __Lrparam 0000  
       __size_of___awdiv 0084         __size_of___ftadd 01AC         __size_of___awmod 0070  
       __size_of___ftdiv 00E6         __size_of___ftneg 0024         __size_of___lldiv 0082  
       __size_of___ftmul 00F4         __size_of___llmod 0066         __size_of___ftsub 0040  
       __size_of___fttol 00F4                 ___ftpack 65B6              _fround$1171 002A  
            _fround$1172 0027                 ___lltoft 624A              _isdigit$823 0002  
               ___lwtoft 5FFC               sprintf@exp 006B               sprintf@val 0067  
             ?_putrsXLCD 0002         __size_of_isdigit 001E                 __ptext10 6932  
               __ptext11 624A                 __ptext20 6154                 __ptext12 62A6  
               __ptext21 5FFC                 __ptext13 637C                 __ptext30 5F30  
               __ptext22 6664                 __ptext14 674A                 __ptext31 609C  
               __ptext23 65B6                 __ptext15 6114                 __ptext32 5F40  
               __ptext24 5F22                 __ptext16 6B8C                 __ptext33 606A  
               __ptext25 5FB6                 __ptext17 6020                 __ptext34 5FD8  
               __ptext26 5F5A                 __ptext18 6482                 __ptext27 6512  
               __ptext19 61EE                 __ptext28 60D6                 __ptext29 619C  
               __powers_ 7F29     __end_of_WriteCmdXLCD 6114         __size_of_sprintf 0708  
          __size_of_main 0466    __CFG_CPUDIV$OSC1_PLL2 000000               _LCD_gotoXY 5FB6  
               isdigit@c 0003                 scale@scl 002A                sprintf@ap 0063  
       __tdiv_to_l_@exp1 000F                sprintf@sp 0040         __tdiv_to_l_@cntr 000E  
       __tdiv_to_l_@quot 000A         ___lldiv@dividend 0001    __end_of_DelayFor18TCY 5F5A  
           ?__tdiv_to_l_ 0001                 sprintf@c 0076                 sprintf@f 0042  
   __end_of_DelayPORXLCD 5F40              ??_putrsXLCD 0004         ___lldiv@quotient 0009  
