

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Jul 16 23:43:01 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     7                           	psect	text0,global,reloc=2,class=CODE,delta=1
     8                           	psect	text1,global,reloc=2,class=CODE,delta=1
     9                           	psect	text2,global,reloc=2,class=CODE,delta=1
    10                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    11                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    12                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    13  0000                     
    14                           ; Version 1.45
    15                           ; Generated 16/11/2017 GMT
    16                           ; 
    17                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    18                           ; All rights reserved.
    19                           ; 
    20                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    21                           ; 
    22                           ; Redistribution and use in source and binary forms, with or without modification, are
    23                           ; permitted provided that the following conditions are met:
    24                           ; 
    25                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    26                           ;        conditions and the following disclaimer.
    27                           ; 
    28                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    29                           ;        of conditions and the following disclaimer in the documentation and/or other
    30                           ;        materials provided with the distribution.
    31                           ; 
    32                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    33                           ;        software without specific prior written permission.
    34                           ; 
    35                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    36                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    37                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    38                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    39                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    40                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    41                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    42                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    43                           ; 
    44                           ; 
    45                           ; Code-generator required, PIC18F4550 Definitions
    46                           ; 
    47                           ; SFR Addresses
    48  0000                     _RCREG	set	4014
    49  0000                     _TXREG	set	4013
    50  0000                     _RCSTAbits	set	4011
    51  0000                     _TXSTAbits	set	4012
    52  0000                     _SPBRG	set	4015
    53  0000                     _TRISCbits	set	3988
    54                           
    55                           ; #config settings
    56  0000                     
    57                           	psect	cinit
    58  007E64                     __pcinit:
    59                           	opt stack 0
    60  007E64                     start_initialization:
    61                           	opt stack 0
    62  007E64                     __initialization:
    63                           	opt stack 0
    64  007E64                     end_of_initialization:
    65                           	opt stack 0
    66  007E64                     __end_of__initialization:
    67                           	opt stack 0
    68  007E64  0100               	movlb	0
    69  007E66  EF39  F03F         	goto	_main	;jump to C main() function
    70                           
    71                           	psect	cstackCOMRAM
    72  000001                     __pcstackCOMRAM:
    73                           	opt stack 0
    74  000001                     ?___aldiv:
    75                           	opt stack 0
    76  000001                     USART_Tx@data:
    77                           	opt stack 0
    78  000001                     ___aldiv@dividend:
    79                           	opt stack 0
    80                           
    81                           ; 4 bytes @ 0x0
    82  000001                     	ds	4
    83  000005                     ___aldiv@divisor:
    84                           	opt stack 0
    85                           
    86                           ; 4 bytes @ 0x4
    87  000005                     	ds	4
    88  000009                     ___aldiv@counter:
    89                           	opt stack 0
    90                           
    91                           ; 1 bytes @ 0x8
    92  000009                     	ds	1
    93  00000A                     ___aldiv@sign:
    94                           	opt stack 0
    95                           
    96                           ; 1 bytes @ 0x9
    97  00000A                     	ds	1
    98  00000B                     ___aldiv@quotient:
    99                           	opt stack 0
   100                           
   101                           ; 4 bytes @ 0xA
   102  00000B                     	ds	4
   103  00000F                     USART_Init@BAUD:
   104                           	opt stack 0
   105                           
   106                           ; 4 bytes @ 0xE
   107  00000F                     	ds	4
   108  000013                     _USART_Init$746:
   109                           	opt stack 0
   110                           
   111                           ; 4 bytes @ 0x12
   112  000013                     	ds	4
   113  000017                     ??_main:
   114                           
   115                           ; 1 bytes @ 0x16
   116  000017                     	ds	2
   117                           
   118 ;;
   119 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   120 ;;
   121 ;; *************** function _main *****************
   122 ;; Defined at:
   123 ;;		line 27 in file "Programa_principal.c"
   124 ;; Parameters:    Size  Location     Type
   125 ;;		None
   126 ;; Auto vars:     Size  Location     Type
   127 ;;		None
   128 ;; Return value:  Size  Location     Type
   129 ;;                  1    wreg      void 
   130 ;; Registers used:
   131 ;;		wreg, status,2, status,0, cstack
   132 ;; Tracked objects:
   133 ;;		On entry : 0/0
   134 ;;		On exit  : 0/0
   135 ;;		Unchanged: 0/0
   136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   137 ;;      Params:         0       0       0       0       0       0       0       0       0
   138 ;;      Locals:         0       0       0       0       0       0       0       0       0
   139 ;;      Temps:          2       0       0       0       0       0       0       0       0
   140 ;;      Totals:         2       0       0       0       0       0       0       0       0
   141 ;;Total ram usage:        2 bytes
   142 ;; Hardware stack levels required when called:    2
   143 ;; This function calls:
   144 ;;		_USART_Init
   145 ;;		_USART_Tx
   146 ;; This function is called by:
   147 ;;		Startup code after reset
   148 ;; This function uses a non-reentrant model
   149 ;;
   150                           
   151                           	psect	text0
   152  007E72                     __ptext0:
   153                           	opt stack 0
   154  007E72                     _main:
   155                           	opt stack 29
   156                           
   157                           ;Programa_principal.c: 28: USART_Init(9600);
   158                           
   159                           ;incstack = 0
   160  007E72  0E80               	movlw	128
   161  007E74  6E0F               	movwf	USART_Init@BAUD,c
   162  007E76  0E25               	movlw	37
   163  007E78  6E10               	movwf	USART_Init@BAUD+1,c
   164  007E7A  0E00               	movlw	0
   165  007E7C  6E11               	movwf	USART_Init@BAUD+2,c
   166  007E7E  0E00               	movlw	0
   167  007E80  6E12               	movwf	USART_Init@BAUD+3,c
   168  007E82  EC62  F03F         	call	_USART_Init	;wreg free
   169  007E86                     
   170                           ;Programa_principal.c: 30: USART_Tx(0x33);
   171  007E86  0E33               	movlw	51
   172  007E88  EC35  F03F         	call	_USART_Tx
   173                           
   174                           ;Programa_principal.c: 31: _delay((unsigned long)((500)*(20000000L/4000.0)));
   175  007E8C  0E0D               	movlw	13
   176  007E8E  6E18               	movwf	(??_main+1)& (0+255),c
   177  007E90  0EAF               	movlw	175
   178  007E92  6E17               	movwf	??_main& (0+255),c
   179  007E94  0EB6               	movlw	182
   180  007E96                     u137:
   181  007E96  2EE8               	decfsz	wreg,f,c
   182  007E98  D7FE               	bra	u137
   183  007E9A  2E17               	decfsz	??_main& (0+255),f,c
   184  007E9C  D7FC               	bra	u137
   185  007E9E  2E18               	decfsz	(??_main+1)& (0+255),f,c
   186  007EA0  D7FA               	bra	u137
   187  007EA2  D000               	nop2	
   188                           
   189                           ;Programa_principal.c: 32: USART_Tx(0x99);
   190  007EA4  0E99               	movlw	153
   191  007EA6  EC35  F03F         	call	_USART_Tx
   192                           
   193                           ;Programa_principal.c: 33: _delay((unsigned long)((500)*(20000000L/4000.0)));
   194  007EAA  0E0D               	movlw	13
   195  007EAC  6E18               	movwf	(??_main+1)& (0+255),c
   196  007EAE  0EAF               	movlw	175
   197  007EB0  6E17               	movwf	??_main& (0+255),c
   198  007EB2  0EB6               	movlw	182
   199  007EB4                     u147:
   200  007EB4  2EE8               	decfsz	wreg,f,c
   201  007EB6  D7FE               	bra	u147
   202  007EB8  2E17               	decfsz	??_main& (0+255),f,c
   203  007EBA  D7FC               	bra	u147
   204  007EBC  2E18               	decfsz	(??_main+1)& (0+255),f,c
   205  007EBE  D7FA               	bra	u147
   206  007EC0  D000               	nop2	
   207  007EC2  D7E1               	goto	l11
   208  007EC4                     __end_of_main:
   209                           	opt stack 0
   210                           wreg	equ	0xFE8
   211                           
   212 ;; *************** function _USART_Tx *****************
   213 ;; Defined at:
   214 ;;		line 27 in file "USART_libreria.c"
   215 ;; Parameters:    Size  Location     Type
   216 ;;  data            1    wreg     unsigned char 
   217 ;; Auto vars:     Size  Location     Type
   218 ;;  data            1    0[COMRAM] unsigned char 
   219 ;; Return value:  Size  Location     Type
   220 ;;                  1    wreg      void 
   221 ;; Registers used:
   222 ;;		wreg
   223 ;; Tracked objects:
   224 ;;		On entry : 0/0
   225 ;;		On exit  : 0/0
   226 ;;		Unchanged: 0/0
   227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   228 ;;      Params:         0       0       0       0       0       0       0       0       0
   229 ;;      Locals:         1       0       0       0       0       0       0       0       0
   230 ;;      Temps:          0       0       0       0       0       0       0       0       0
   231 ;;      Totals:         1       0       0       0       0       0       0       0       0
   232 ;;Total ram usage:        1 bytes
   233 ;; Hardware stack levels used:    1
   234 ;; This function calls:
   235 ;;		Nothing
   236 ;; This function is called by:
   237 ;;		_main
   238 ;; This function uses a non-reentrant model
   239 ;;
   240                           
   241                           	psect	text1
   242  007E6A                     __ptext1:
   243                           	opt stack 0
   244  007E6A                     _USART_Tx:
   245                           	opt stack 30
   246                           
   247                           ;incstack = 0
   248                           ;USART_Tx@data stored from wreg
   249  007E6A  6E01               	movwf	USART_Tx@data,c
   250                           
   251                           ;USART_libreria.c: 28: TXREG = data;
   252  007E6C  C001  FFAD         	movff	USART_Tx@data,4013	;volatile
   253  007E70  0012               	return		;funcret
   254  007E72                     __end_of_USART_Tx:
   255                           	opt stack 0
   256                           wreg	equ	0xFE8
   257                           
   258 ;; *************** function _USART_Init *****************
   259 ;; Defined at:
   260 ;;		line 5 in file "USART_libreria.c"
   261 ;; Parameters:    Size  Location     Type
   262 ;;  BAUD            4   14[COMRAM] long 
   263 ;; Auto vars:     Size  Location     Type
   264 ;;		None
   265 ;; Return value:  Size  Location     Type
   266 ;;                  1    wreg      void 
   267 ;; Registers used:
   268 ;;		wreg, status,2, status,0, cstack
   269 ;; Tracked objects:
   270 ;;		On entry : 0/0
   271 ;;		On exit  : 0/0
   272 ;;		Unchanged: 0/0
   273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   274 ;;      Params:         4       0       0       0       0       0       0       0       0
   275 ;;      Locals:         4       0       0       0       0       0       0       0       0
   276 ;;      Temps:          0       0       0       0       0       0       0       0       0
   277 ;;      Totals:         8       0       0       0       0       0       0       0       0
   278 ;;Total ram usage:        8 bytes
   279 ;; Hardware stack levels used:    1
   280 ;; Hardware stack levels required when called:    1
   281 ;; This function calls:
   282 ;;		___aldiv
   283 ;; This function is called by:
   284 ;;		_main
   285 ;; This function uses a non-reentrant model
   286 ;;
   287                           
   288                           	psect	text2
   289  007EC4                     __ptext2:
   290                           	opt stack 0
   291  007EC4                     _USART_Init:
   292                           	opt stack 29
   293                           
   294                           ;USART_libreria.c: 7: TRISCbits.RC6 = 0;
   295                           
   296                           ;incstack = 0
   297  007EC4  9C94               	bcf	3988,6,c	;volatile
   298                           
   299                           ;USART_libreria.c: 8: TRISCbits.RC7 = 1;
   300  007EC6  8E94               	bsf	3988,7,c	;volatile
   301                           
   302                           ;USART_libreria.c: 11: SPBRG = (unsigned char)(((20000000L/BAUD)/64)-1);
   303  007EC8  C00F  F005         	movff	USART_Init@BAUD,___aldiv@divisor
   304  007ECC  C010  F006         	movff	USART_Init@BAUD+1,___aldiv@divisor+1
   305  007ED0  C011  F007         	movff	USART_Init@BAUD+2,___aldiv@divisor+2
   306  007ED4  C012  F008         	movff	USART_Init@BAUD+3,___aldiv@divisor+3
   307  007ED8  0E00               	movlw	0
   308  007EDA  6E01               	movwf	___aldiv@dividend,c
   309  007EDC  0E2D               	movlw	45
   310  007EDE  6E02               	movwf	___aldiv@dividend+1,c
   311  007EE0  0E31               	movlw	49
   312  007EE2  6E03               	movwf	___aldiv@dividend+2,c
   313  007EE4  0E01               	movlw	1
   314  007EE6  6E04               	movwf	___aldiv@dividend+3,c
   315  007EE8  EC9A  F03F         	call	___aldiv	;wreg free
   316  007EEC  C001  F013         	movff	?___aldiv,_USART_Init$746
   317  007EF0  C002  F014         	movff	?___aldiv+1,_USART_Init$746+1
   318  007EF4  C003  F015         	movff	?___aldiv+2,_USART_Init$746+2
   319  007EF8  C004  F016         	movff	?___aldiv+3,_USART_Init$746+3
   320                           
   321                           ;USART_libreria.c: 11: SPBRG = (unsigned char)(((20000000L/BAUD)/64)-1);
   322  007EFC  C013  F001         	movff	_USART_Init$746,___aldiv@dividend
   323  007F00  C014  F002         	movff	_USART_Init$746+1,___aldiv@dividend+1
   324  007F04  C015  F003         	movff	_USART_Init$746+2,___aldiv@dividend+2
   325  007F08  C016  F004         	movff	_USART_Init$746+3,___aldiv@dividend+3
   326  007F0C  0E40               	movlw	64
   327  007F0E  6E05               	movwf	___aldiv@divisor,c
   328  007F10  0E00               	movlw	0
   329  007F12  6E06               	movwf	___aldiv@divisor+1,c
   330  007F14  0E00               	movlw	0
   331  007F16  6E07               	movwf	___aldiv@divisor+2,c
   332  007F18  0E00               	movlw	0
   333  007F1A  6E08               	movwf	___aldiv@divisor+3,c
   334  007F1C  EC9A  F03F         	call	___aldiv	;wreg free
   335  007F20  0401               	decf	?___aldiv,w,c
   336  007F22  6EAF               	movwf	4015,c	;volatile
   337                           
   338                           ;USART_libreria.c: 14: TXSTAbits.BRGH = 0;
   339  007F24  94AC               	bcf	4012,2,c	;volatile
   340                           
   341                           ;USART_libreria.c: 15: TXSTAbits.SYNC = 0;
   342  007F26  98AC               	bcf	4012,4,c	;volatile
   343                           
   344                           ;USART_libreria.c: 16: RCSTAbits.SPEN = 1;
   345  007F28  8EAB               	bsf	4011,7,c	;volatile
   346                           
   347                           ;USART_libreria.c: 19: TXSTAbits.TX9 = 0;
   348  007F2A  9CAC               	bcf	4012,6,c	;volatile
   349                           
   350                           ;USART_libreria.c: 20: TXSTAbits.TXEN = 1;
   351  007F2C  8AAC               	bsf	4012,5,c	;volatile
   352                           
   353                           ;USART_libreria.c: 23: RCSTAbits.RC9 = 0;
   354  007F2E  9CAB               	bcf	4011,6,c	;volatile
   355                           
   356                           ;USART_libreria.c: 24: RCSTAbits.CREN = 1;
   357  007F30  88AB               	bsf	4011,4,c	;volatile
   358  007F32  0012               	return		;funcret
   359  007F34                     __end_of_USART_Init:
   360                           	opt stack 0
   361                           wreg	equ	0xFE8
   362                           
   363 ;; *************** function ___aldiv *****************
   364 ;; Defined at:
   365 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\aldiv.c"
   366 ;; Parameters:    Size  Location     Type
   367 ;;  dividend        4    0[COMRAM] long 
   368 ;;  divisor         4    4[COMRAM] long 
   369 ;; Auto vars:     Size  Location     Type
   370 ;;  quotient        4   10[COMRAM] long 
   371 ;;  sign            1    9[COMRAM] unsigned char 
   372 ;;  counter         1    8[COMRAM] unsigned char 
   373 ;; Return value:  Size  Location     Type
   374 ;;                  4    0[COMRAM] long 
   375 ;; Registers used:
   376 ;;		wreg, status,2, status,0
   377 ;; Tracked objects:
   378 ;;		On entry : 0/0
   379 ;;		On exit  : 0/0
   380 ;;		Unchanged: 0/0
   381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   382 ;;      Params:         8       0       0       0       0       0       0       0       0
   383 ;;      Locals:         6       0       0       0       0       0       0       0       0
   384 ;;      Temps:          0       0       0       0       0       0       0       0       0
   385 ;;      Totals:        14       0       0       0       0       0       0       0       0
   386 ;;Total ram usage:       14 bytes
   387 ;; Hardware stack levels used:    1
   388 ;; This function calls:
   389 ;;		Nothing
   390 ;; This function is called by:
   391 ;;		_USART_Init
   392 ;; This function uses a non-reentrant model
   393 ;;
   394                           
   395                           	psect	text3
   396  007F34                     __ptext3:
   397                           	opt stack 0
   398  007F34                     ___aldiv:
   399                           	opt stack 29
   400                           
   401                           ;incstack = 0
   402  007F34  0E00               	movlw	0
   403  007F36  6E0A               	movwf	___aldiv@sign,c
   404  007F38  AE08               	btfss	___aldiv@divisor+3,7,c
   405  007F3A  D00A               	goto	l91
   406  007F3C  1E08               	comf	___aldiv@divisor+3,f,c
   407  007F3E  1E07               	comf	___aldiv@divisor+2,f,c
   408  007F40  1E06               	comf	___aldiv@divisor+1,f,c
   409  007F42  6C05               	negf	___aldiv@divisor,c
   410  007F44  0E00               	movlw	0
   411  007F46  2206               	addwfc	___aldiv@divisor+1,f,c
   412  007F48  2207               	addwfc	___aldiv@divisor+2,f,c
   413  007F4A  2208               	addwfc	___aldiv@divisor+3,f,c
   414  007F4C  0E01               	movlw	1
   415  007F4E  6E0A               	movwf	___aldiv@sign,c
   416  007F50                     l91:
   417  007F50  AE04               	btfss	___aldiv@dividend+3,7,c
   418  007F52  D00A               	goto	l92
   419  007F54  1E04               	comf	___aldiv@dividend+3,f,c
   420  007F56  1E03               	comf	___aldiv@dividend+2,f,c
   421  007F58  1E02               	comf	___aldiv@dividend+1,f,c
   422  007F5A  6C01               	negf	___aldiv@dividend,c
   423  007F5C  0E00               	movlw	0
   424  007F5E  2202               	addwfc	___aldiv@dividend+1,f,c
   425  007F60  2203               	addwfc	___aldiv@dividend+2,f,c
   426  007F62  2204               	addwfc	___aldiv@dividend+3,f,c
   427  007F64  0E01               	movlw	1
   428  007F66  1A0A               	xorwf	___aldiv@sign,f,c
   429  007F68                     l92:
   430  007F68  0E00               	movlw	0
   431  007F6A  6E0B               	movwf	___aldiv@quotient,c
   432  007F6C  0E00               	movlw	0
   433  007F6E  6E0C               	movwf	___aldiv@quotient+1,c
   434  007F70  0E00               	movlw	0
   435  007F72  6E0D               	movwf	___aldiv@quotient+2,c
   436  007F74  0E00               	movlw	0
   437  007F76  6E0E               	movwf	___aldiv@quotient+3,c
   438  007F78  5005               	movf	___aldiv@divisor,w,c
   439  007F7A  1006               	iorwf	___aldiv@divisor+1,w,c
   440  007F7C  1007               	iorwf	___aldiv@divisor+2,w,c
   441  007F7E  1008               	iorwf	___aldiv@divisor+3,w,c
   442  007F80  B4D8               	btfsc	status,2,c
   443  007F82  D02A               	goto	l99
   444  007F84  0E01               	movlw	1
   445  007F86  6E09               	movwf	___aldiv@counter,c
   446  007F88  D006               	goto	l94
   447  007F8A  90D8               	bcf	status,0,c
   448  007F8C  3605               	rlcf	___aldiv@divisor,f,c
   449  007F8E  3606               	rlcf	___aldiv@divisor+1,f,c
   450  007F90  3607               	rlcf	___aldiv@divisor+2,f,c
   451  007F92  3608               	rlcf	___aldiv@divisor+3,f,c
   452  007F94  2A09               	incf	___aldiv@counter,f,c
   453  007F96                     l94:
   454  007F96  AE08               	btfss	___aldiv@divisor+3,7,c
   455  007F98  D7F8               	goto	l95
   456  007F9A                     u100:
   457  007F9A  90D8               	bcf	status,0,c
   458  007F9C  360B               	rlcf	___aldiv@quotient,f,c
   459  007F9E  360C               	rlcf	___aldiv@quotient+1,f,c
   460  007FA0  360D               	rlcf	___aldiv@quotient+2,f,c
   461  007FA2  360E               	rlcf	___aldiv@quotient+3,f,c
   462  007FA4  5005               	movf	___aldiv@divisor,w,c
   463  007FA6  5C01               	subwf	___aldiv@dividend,w,c
   464  007FA8  5006               	movf	___aldiv@divisor+1,w,c
   465  007FAA  5802               	subwfb	___aldiv@dividend+1,w,c
   466  007FAC  5007               	movf	___aldiv@divisor+2,w,c
   467  007FAE  5803               	subwfb	___aldiv@dividend+2,w,c
   468  007FB0  5008               	movf	___aldiv@divisor+3,w,c
   469  007FB2  5804               	subwfb	___aldiv@dividend+3,w,c
   470  007FB4  A0D8               	btfss	status,0,c
   471  007FB6  D009               	goto	l98
   472  007FB8  5005               	movf	___aldiv@divisor,w,c
   473  007FBA  5E01               	subwf	___aldiv@dividend,f,c
   474  007FBC  5006               	movf	___aldiv@divisor+1,w,c
   475  007FBE  5A02               	subwfb	___aldiv@dividend+1,f,c
   476  007FC0  5007               	movf	___aldiv@divisor+2,w,c
   477  007FC2  5A03               	subwfb	___aldiv@dividend+2,f,c
   478  007FC4  5008               	movf	___aldiv@divisor+3,w,c
   479  007FC6  5A04               	subwfb	___aldiv@dividend+3,f,c
   480  007FC8  800B               	bsf	___aldiv@quotient,0,c
   481  007FCA                     l98:
   482  007FCA  90D8               	bcf	status,0,c
   483  007FCC  3208               	rrcf	___aldiv@divisor+3,f,c
   484  007FCE  3207               	rrcf	___aldiv@divisor+2,f,c
   485  007FD0  3206               	rrcf	___aldiv@divisor+1,f,c
   486  007FD2  3205               	rrcf	___aldiv@divisor,f,c
   487  007FD4  2E09               	decfsz	___aldiv@counter,f,c
   488  007FD6  D7E1               	goto	u100
   489  007FD8                     l99:
   490  007FD8  500A               	movf	___aldiv@sign,w,c
   491  007FDA  B4D8               	btfsc	status,2,c
   492  007FDC  D008               	goto	l100
   493  007FDE  1E0E               	comf	___aldiv@quotient+3,f,c
   494  007FE0  1E0D               	comf	___aldiv@quotient+2,f,c
   495  007FE2  1E0C               	comf	___aldiv@quotient+1,f,c
   496  007FE4  6C0B               	negf	___aldiv@quotient,c
   497  007FE6  0E00               	movlw	0
   498  007FE8  220C               	addwfc	___aldiv@quotient+1,f,c
   499  007FEA  220D               	addwfc	___aldiv@quotient+2,f,c
   500  007FEC  220E               	addwfc	___aldiv@quotient+3,f,c
   501  007FEE                     l100:
   502  007FEE  C00B  F001         	movff	___aldiv@quotient,?___aldiv
   503  007FF2  C00C  F002         	movff	___aldiv@quotient+1,?___aldiv+1
   504  007FF6  C00D  F003         	movff	___aldiv@quotient+2,?___aldiv+2
   505  007FFA  C00E  F004         	movff	___aldiv@quotient+3,?___aldiv+3
   506  007FFE  0012               	return	
   507  008000                     __end_of___aldiv:
   508                           	opt stack 0
   509  0000                     wreg	equ	0xFE8
   510                           status	equ	0xFD8
   511                           wreg	equ	0xFE8
   512                           status	equ	0xFD8
   513                           
   514                           	psect	rparam
   515  0000                     wreg	equ	0xFE8
   516                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     24      24
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_USART_Init
    _USART_Init->___aldiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0     740
                                             22 COMRAM     2     2      0
                         _USART_Init
                           _USART_Tx
 ---------------------------------------------------------------------------------
 (1) _USART_Tx                                             1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _USART_Init                                           8     4      4     725
                                             14 COMRAM     8     4      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     604
                                              0 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _USART_Init
     ___aldiv
   _USART_Tx

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F     18      18       1       25.3%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
ABS                  0      0       0      20        0.0%
BIGRAM             7FF      0       0      21        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Jul 16 23:43:01 2018

                     l11 7E86                       l91 7F50                       l92 7F68  
                     l94 7F96                       l95 7F8A                       l98 7FCA  
                     l99 7FD8              __CFG_BORV$3 000000             __CFG_CP0$OFF 000000  
           __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000  
                    l100 7FEE             __CFG_CPB$OFF 000000                      u100 7F9A  
                    u137 7E96                      u147 7EB4             __CFG_CPD$OFF 000000  
           __CFG_BOR$OFF 000000                      wreg 000FE8             __CFG_FOSC$HS 000000  
           __CFG_LVP$OFF 000000             __CFG_WDT$OFF 000000             __CFG_PWRT$ON 000000  
                   _main 7E72                     start 0000            __CFG_IESO$OFF 000000  
          __CFG_MCLRE$ON 000000             ___param_bank 000000            __CFG_PLLDIV$1 000000  
         __CFG_CCP2MX$ON 000000          __end_of___aldiv 8000                    ?_main 0001  
                  _RCREG 000FAE                    _SPBRG 000FAF            __CFG_USBDIV$1 000000  
                  _TXREG 000FAD            __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000  
          __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000           __CFG_EBTR0$OFF 000000  
         __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000  
         __CFG_EBTR3$OFF 000000            __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000  
          __CFG_WRTD$OFF 000000           __CFG_EBTRB$OFF 000000         __end_of_USART_Tx 7E72  
           USART_Tx@data 0001                    status 000FD8           __CFG_ICPRT$OFF 000000  
         __CFG_PBADEN$ON 000000              ?_USART_Init 000F          __initialization 7E64  
           __end_of_main 7EC4                   ??_main 0017            __activetblptr 000000  
         __CFG_XINST$OFF 000000                ??___aldiv 0009           __CFG_STVREN$ON 000000  
    __size_of_USART_Init 0070               __accesstop 0060  __end_of__initialization 7E64  
          ___rparam_used 000001           __pcstackCOMRAM 0001                ?_USART_Tx 0001  
             ??_USART_Tx 0001          __CFG_VREGEN$OFF 000000             ??_USART_Init 0013  
                __Hparam 0000                  __Lparam 0000                  ___aldiv 7F34  
         USART_Init@BAUD 000F                  __pcinit 7E64                  __ramtop 0800  
                __ptext0 7E72                  __ptext1 7E6A                  __ptext2 7EC4  
                __ptext3 7F34         ___aldiv@dividend 0001       __end_of_USART_Init 7F34  
   end_of_initialization 7E64                _RCSTAbits 000FAB         ___aldiv@quotient 000B  
              _TRISCbits 000F94                _TXSTAbits 000FAC        __size_of_USART_Tx 0008  
    start_initialization 7E64         __CFG_LPT1OSC$OFF 000000                 ?___aldiv 0001  
        ___aldiv@divisor 0005          ___aldiv@counter 0009         __CFG_WDTPS$32768 000000  
               _USART_Tx 7E6A                 __Hrparam 0000                 __Lrparam 0000  
       __size_of___aldiv 00CC            __size_of_main 0052    __CFG_CPUDIV$OSC1_PLL2 000000  
         _USART_Init$746 0013             ___aldiv@sign 000A               _USART_Init 7EC4  
